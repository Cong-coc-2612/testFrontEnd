{"ast":null,"code":"import _classCallCheck from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import{connect}from'react-redux';import Select from'react-select';import'react-block-ui/style.css';import CompetitionSettingCompetitionsItem from'components/CompetitionSettingCompetitionsItem';import CompetitionSettingCompetitionsAddItem from'components/CompetitionSettingCompetitionsAddItem';import CustomModal from'components/CustomModal';import TextInput from'components/TextInput';import{queryAllFormats,queryAllSports}from'screens/CompetitionInfo/actions';import{queryAllCompetitionsByTournamentId,addACompetition,createAFinalStageSetting,createAGroupStageSetting}from'./actions';import'./styles.css';var competitionFormatOptions=[];var customStyles={content:{top:'15%',left:'15%',right:'15%',bottom:'15%',backgroundColor:'#2b303d',display:'flex',flexDirection:'column'},overlay:{zIndex:100001}};var sportOptions=[];var CompetitionSetting=/*#__PURE__*/function(_React$Component){_inherits(CompetitionSetting,_React$Component);var _super=_createSuper(CompetitionSetting);function CompetitionSetting(props){var _this;_classCallCheck(this,CompetitionSetting);_this=_super.call(this,props);_this.requestData=function(){var params={path:'',param:{tournamentId:_this.props.tournamentId,limit:99},data:{}};_this.props.queryAllCompetitionsByTournamentId(params);_this.props.queryAllSports();_this.props.queryAllFormats();};_this.handleCloseModal=function(){_this.setState({showModal:false});};_this.handleOpenModal=function(){_this.setState({showModal:true});};_this.validate=function(){var competitionNameError=false;var competitionNameErrorContent='';var competitionFormatError=false;var competitionFormatErrorContent='';if(_this.state.competitionName.trim()===''){if(_this.state.selectedSport==null){competitionNameError=true;competitionNameErrorContent='Tên cuộc thi không được trống, môn thể thao không được trống';}else{competitionNameError=true;competitionNameErrorContent='Tên cuộc thi không được trống';}}else{if(_this.state.selectedSport==null){competitionNameError=true;competitionNameErrorContent='Môn thể thao không được trống';}}if(_this.state.selectedCompetitionFormatPhase1==null||_this.state.twoPhase&&_this.state.selectedCompetitionFormatPhase2==null){competitionFormatError=true;competitionFormatErrorContent='Thể thức không được trống';}if(_this.props.allCompetitionByTournamentId.find(function(element){return element.name===_this.state.competitionName;})){competitionNameError=true;competitionNameErrorContent='Tên cuộc thi này đã tồn tại';}return{competitionNameError:competitionNameError,competitionNameErrorContent:competitionNameErrorContent,competitionFormatError:competitionFormatError,competitionFormatErrorContent:competitionFormatErrorContent};};_this.handleConfirmModal=function(){var _this$validate=_this.validate(),competitionNameError=_this$validate.competitionNameError,competitionNameErrorContent=_this$validate.competitionNameErrorContent,competitionFormatError=_this$validate.competitionFormatError,competitionFormatErrorContent=_this$validate.competitionFormatErrorContent;var _this$validateAmountO=_this.validateAmountOfTeamsGoOnInAGroup(),amountOfTeamsGoOnInAGroupError=_this$validateAmountO.amountOfTeamsGoOnInAGroupError,amountOfTeamsGoOnInAGroupErrorContent=_this$validateAmountO.amountOfTeamsGoOnInAGroupErrorContent;var _this$validateAmountO2=_this.validateAmountOfTeamsInAGroup(),amountOfTeamsInAGroupError=_this$validateAmountO2.amountOfTeamsInAGroupError,amountOfTeamsInAGroupErrorContent=_this$validateAmountO2.amountOfTeamsInAGroupErrorContent;_this.setState({competitionNameError:competitionNameError,competitionNameErrorContent:competitionNameErrorContent,competitionFormatError:competitionFormatError,competitionFormatErrorContent:competitionFormatErrorContent,amountOfTeamsGoOnInAGroupError:amountOfTeamsGoOnInAGroupError,amountOfTeamsGoOnInAGroupErrorContent:amountOfTeamsGoOnInAGroupErrorContent,amountOfTeamsInAGroupError:amountOfTeamsInAGroupError,amountOfTeamsInAGroupErrorContent:amountOfTeamsInAGroupErrorContent});if(competitionNameError===true||competitionFormatError===true||amountOfTeamsGoOnInAGroupError===true||amountOfTeamsInAGroupError===true){return;}var params={path:'',param:{},data:{name:_this.state.competitionName,tournamentId:_this.props.tournamentId,sportId:_this.state.selectedSport.value,description:'',hasGroupStage:_this.state.twoPhase===true}};_this.props.addACompetition(params);_this.setState({showModal:false});};_this.onChangeHomeWayPhase1=function(){_this.setState({homeWayPhase1:!_this.state.homeWayPhase1});};_this.onChangeHomeWayPhase2=function(){_this.setState({homeWayPhase2:!_this.state.homeWayPhase2});};_this.onChangeCompetitionName=function(value){_this.setState({competitionName:value});};_this.onChangeSport=function(value){_this.setState({selectedSport:value});};_this.OnChoose1=function(){_this.setState({onePhase:true,twoPhase:false});};_this.OnChoose2=function(){_this.setState({onePhase:false,twoPhase:true});};_this.onChangeCompetitionFormatPhase1=function(value){_this.setState({selectedCompetitionFormatPhase1:value});};_this.onChangeCompetitionFormatPhase2=function(value){_this.setState({selectedCompetitionFormatPhase2:value});};_this.onChangeAmountOfTeamsInAGroup=function(value){var tempValue=0;if(!isNaN(value)){tempValue=Number(value);}else{tempValue=0;}_this.setState({amountOfTeamsInAGroup:tempValue});};_this.onChangeAmountOfTeamsGoOnInAGroup=function(value){var tempValue=0;if(!isNaN(value)){tempValue=Number(value);}else{tempValue=0;}_this.setState({amountOfTeamsGoOnInAGroup:tempValue});};_this.onBlurAmountOfTeamsInAGroup=function(){var _this$validateAmountO3=_this.validateAmountOfTeamsInAGroup(),amountOfTeamsInAGroupError=_this$validateAmountO3.amountOfTeamsInAGroupError,amountOfTeamsInAGroupErrorContent=_this$validateAmountO3.amountOfTeamsInAGroupErrorContent;_this.setState({amountOfTeamsInAGroupError:amountOfTeamsInAGroupError,amountOfTeamsInAGroupErrorContent:amountOfTeamsInAGroupErrorContent});if(amountOfTeamsInAGroupError===true){return;}};_this.onBlurAmountOfTeamsGoOnInAGroup=function(){var _this$validateAmountO4=_this.validateAmountOfTeamsGoOnInAGroup(),amountOfTeamsGoOnInAGroupError=_this$validateAmountO4.amountOfTeamsGoOnInAGroupError,amountOfTeamsGoOnInAGroupErrorContent=_this$validateAmountO4.amountOfTeamsGoOnInAGroupErrorContent;_this.setState({amountOfTeamsGoOnInAGroupError:amountOfTeamsGoOnInAGroupError,amountOfTeamsGoOnInAGroupErrorContent:amountOfTeamsGoOnInAGroupErrorContent});if(amountOfTeamsGoOnInAGroupError===true){return;}};_this.validateAmountOfTeamsGoOnInAGroup=function(){var amountOfTeamsGoOnInAGroupError=false;var amountOfTeamsGoOnInAGroupErrorContent='';if(_this.state.amountOfTeamsGoOnInAGroup<1||_this.state.amountOfTeamsGoOnInAGroup>=_this.state.amountOfTeamsInAGroup){amountOfTeamsGoOnInAGroupError=true;amountOfTeamsGoOnInAGroupErrorContent='Số đội đi tiếp trong 1 bảng phải lớn hơn 0 và nhỏ hơn số đội tối đa';}return{amountOfTeamsGoOnInAGroupError:amountOfTeamsGoOnInAGroupError,amountOfTeamsGoOnInAGroupErrorContent:amountOfTeamsGoOnInAGroupErrorContent};};_this.validateAmountOfTeamsInAGroup=function(){var amountOfTeamsInAGroupError=false;var amountOfTeamsInAGroupErrorContent='';if(_this.state.amountOfTeamsInAGroup<2){amountOfTeamsInAGroupError=true;amountOfTeamsInAGroupErrorContent='Số đội tối đa trong 1 bảng phải lớn hơn 1';}return{amountOfTeamsInAGroupError:amountOfTeamsInAGroupError,amountOfTeamsInAGroupErrorContent:amountOfTeamsInAGroupErrorContent};};_this.state={showModal:false,competitionName:'',competitionNameError:false,competitionNameErrorContent:'',competitionFormatError:false,competitionFormatErrorContent:'',selectedSport:null,onePhase:true,twoPhase:false,selectedCompetitionFormatPhase1:null,selectedCompetitionFormatPhase2:null,// limitAmountOfTeamchecked: false,\n// maxAmountTeamOfGroup: 0,\n// maxAmountTeamOfGroupError: false,\n// maxAmountTeamOfGroupErrorContent: '',\n// maxAmountOfTeam: 0,\n// maxAmountOfTeamError: false,\n// maxAmountOfTeamErrorContent: '',\n// maxAmountMemberOfTeamError: false,\n// maxAmountMemberOfTeamErrorContent: '',\n// maxAmountMemberOfTeam: 0,\n// minAmountMemberOfTeam: 0,\n// minAmountMemberOfTeamError: false,\n// minAmountMemberOfTeamErrorContent: '',\nhomeWayPhase2:false,homeWayPhase1:false,amountOfTeamsInAGroup:2,amountOfTeamsInAGroupError:false,amountOfTeamsInAGroupErrorContent:'',amountOfTeamsGoOnInAGroup:1,amountOfTeamsGoOnInAGroupError:false,amountOfTeamsGoOnInAGroupErrorContent:''};return _this;}_createClass(CompetitionSetting,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(nextProps,nextState){if(this.props.allSports!==nextProps.allSports){sportOptions=[];nextProps.allSports.map(function(item,index){return sportOptions.push({value:item.id,label:item.fullName});});if(nextProps.allSports.length>0){this.setState({selectedSport:{value:nextProps.allSports[0].id,label:nextProps.allSports[0].fullName}});}}if(this.props.newCompetition!==nextProps.newCompetition&&nextProps.newCompetition!==null){var params={path:'',param:{},data:{competitionId:nextProps.newCompetition.id,formatId:nextState.twoPhase===true?nextState.selectedCompetitionFormatPhase2.value:nextState.selectedCompetitionFormatPhase1.value,hasHomeMatch:nextState.twoPhase===true?nextState.homeWayPhase2:nextState.homeWayPhase1}};this.props.createAFinalStageSetting(params);if(nextState.twoPhase===false){params={path:'',param:{},data:{competitionId:nextProps.newCompetition.id}};this.props.createAGroupStageSetting(params);}else{params={path:'',param:{},data:{competitionId:nextProps.newCompetition.id,formatId:this.state.selectedCompetitionFormatPhase1.value,hasHomeMatch:this.state.homeWayPhase1,advanceTeamPerTable:this.state.amountOfTeamsGoOnInAGroup,maxTeamPerTable:this.state.amountOfTeamsInAGroup}};this.props.createAGroupStageSetting(params);}}if(this.props.allFormats!==nextProps.allFormats){competitionFormatOptions=[];nextProps.allFormats.map(function(item,index){return competitionFormatOptions.push({value:item.id,label:item.description});});if(nextProps.allFormats.length>0){this.setState({selectedCompetitionFormatPhase1:{value:nextProps.allFormats[0].id,label:nextProps.allFormats[0].description},selectedCompetitionFormatPhase2:{value:nextProps.allFormats[0].id,label:nextProps.allFormats[0].description}});}}return true;}},{key:\"componentDidMount\",value:function componentDidMount(){this.requestData();}},{key:\"render\",value:function render(){var _this2=this;if(this.props.allCompetitionByTournamentId!=null){return/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionSetting-container\"},this.props.allCompetitionByTournamentId.map(function(item,index){return/*#__PURE__*/React.createElement(CompetitionSettingCompetitionsItem,{tournamentInfo:_this2.props.tournamentInfo,info:item,index:index,key:index,listCompetition:_this2.props.allCompetitionByTournamentId,tournamentId:_this2.props.tournamentId});}),/*#__PURE__*/React.createElement(CompetitionSettingCompetitionsAddItem,{handleAddACompetition:this.handleOpenModal}),/*#__PURE__*/React.createElement(CustomModal,{customStyles:customStyles,handleCloseModal:this.handleCloseModal,showModal:this.state.showModal,handleConfirmModal:this.handleConfirmModal},/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionSetting-header-name-container\"},/*#__PURE__*/React.createElement(\"h2\",null,\"T\\u1EA1o m\\u1ED9t cu\\u1ED9c thi m\\u1EDBi trong gi\\u1EA3i\")),/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionSetting-tournament-name-container\"},/*#__PURE__*/React.createElement(TextInput,{label:'Nhập tên cuộc thi',value:this.state.competitionName,error:this.state.competitionNameError,errorContent:this.state.competitionNameErrorContent,onChangeText:this.onChangeCompetitionName})),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-info-item\"},/*#__PURE__*/React.createElement(\"p\",{className:\"TournamentInfo-text\"},\"B\\u1ED9 m\\xF4n\"),/*#__PURE__*/React.createElement(Select,{options:sportOptions,className:\"Select\",defaultValue:this.state.selectedSport,value:this.state.selectedSport,onChange:this.onChangeSport,maxMenuHeight:140})),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-info-item\"},/*#__PURE__*/React.createElement(\"p\",{className:\"TournamentInfo-text\"},\"C\\xE1ch t\\u1ED5 ch\\u1EE9c gi\\u1EA3i:\"),/*#__PURE__*/React.createElement(\"input\",{type:\"radio\",name:\"competitionType\",onClick:this.OnChoose1,checked:this.state.onePhase,readOnly:true}),/*#__PURE__*/React.createElement(\"label\",{onClick:this.OnChoose1},\"1 giai \\u0111o\\u1EA1n\"),/*#__PURE__*/React.createElement(\"input\",{type:\"radio\",name:\"competitionType\",onClick:this.OnChoose2,checked:this.state.twoPhase,readOnly:true}),/*#__PURE__*/React.createElement(\"label\",{onClick:this.OnChoose2},\"2 giai \\u0111o\\u1EA1n\")),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-info-item\"},/*#__PURE__*/React.createElement(\"p\",{className:\"TournamentInfo-text\"},\"Th\\u1EC3 th\\u1EE9c\".concat(this.state.onePhase===true?'':' vòng bảng')),/*#__PURE__*/React.createElement(Select,{options:competitionFormatOptions,className:\"Select\",defaultValue:this.state.selectedCompetitionFormatPhase1,value:this.state.selectedCompetitionFormatPhase1,onChange:this.onChangeCompetitionFormatPhase1,menuPlacement:'top'})),this.state.selectedCompetitionFormatPhase1!=null&&this.state.selectedCompetitionFormatPhase1.value!==2&&/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionInfo-content-info-basic-info-container-singleRow\"},/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionInfo-info-item\"},/*#__PURE__*/React.createElement(\"label\",{className:\"Checkbox-label\"},/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",checked:this.state.homeWayPhase1,onChange:this.onChangeHomeWayPhase1}),\"\".concat(this.state.selectedCompetitionFormatPhase1.value===3?\"\".concat(this.state.twoPhase===true?'Chơi lượt đi lượt về vòng bảng':'Chơi lượt đi lượt về'):\"\".concat(this.state.twoPhase===true?'Có trận tranh hạng 3 vòng bảng':'Có trận tranh hạng 3'))))),this.state.twoPhase===true&&/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionInfo-content-info-basic-info-container-singleRow\"},/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionInfo-info-item\"},/*#__PURE__*/React.createElement(TextInput,{style:{width:250},label:'Số đội trong 1 bảng (lớn hơn 1)',value:this.state.amountOfTeamsInAGroup,onChangeText:this.onChangeAmountOfTeamsInAGroup,error:this.state.amountOfTeamsInAGroupError,errorContent:this.state.amountOfTeamsInAGroupErrorContent,onBlur:this.onBlurAmountOfTeamsInAGroup}))),this.state.twoPhase===true&&/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionInfo-content-info-basic-info-container-singleRow\"},/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionInfo-info-item\"},/*#__PURE__*/React.createElement(TextInput,{style:{width:300},label:'Số đội đi tiếp trong 1 bảng (lớn hơn 0)',value:this.state.amountOfTeamsGoOnInAGroup,onChangeText:this.onChangeAmountOfTeamsGoOnInAGroup,error:this.state.amountOfTeamsGoOnInAGroupError,errorContent:this.state.amountOfTeamsGoOnInAGroupErrorContent,onBlur:this.onBlurAmountOfTeamsGoOnInAGroup}))),this.state.twoPhase===true&&/*#__PURE__*/React.createElement(\"p\",{className:\"TournamentInfo-text\"},\"Th\\u1EC3 th\\u1EE9c v\\xF2ng chung k\\u1EBFt\"),this.state.twoPhase===true&&/*#__PURE__*/React.createElement(Select,{options:competitionFormatOptions,className:\"Select\",defaultValue:this.state.selectedCompetitionFormatPhase2,value:this.state.selectedCompetitionFormatPhase2,onChange:this.onChangeCompetitionFormatPhase2,menuPlacement:'top'}),this.state.twoPhase===true&&this.state.selectedCompetitionFormatPhase2.value!==2&&(this.state.selectedCompetitionFormatPhase2.value===3?/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionInfo-content-info-basic-info-container-singleRow\"},/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionInfo-info-item\"},/*#__PURE__*/React.createElement(\"label\",{className:\"Checkbox-label\"},/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",checked:this.state.homeWayPhase2,onChange:this.onChangeHomeWayPhase2}),\"Ch\\u01A1i l\\u01B0\\u1EE3t \\u0111i l\\u01B0\\u1EE3t v\\u1EC1 v\\xF2ng chung k\\u1EBFt\"))):/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionInfo-content-info-basic-info-container-singleRow\"},/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionInfo-info-item\"},/*#__PURE__*/React.createElement(\"label\",{className:\"Checkbox-label\"},/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",checked:this.state.homeWayPhase2,onChange:this.onChangeHomeWayPhase2}),\"C\\xF3 tr\\u1EADn tranh h\\u1EA1ng 3 v\\xF2ng chung k\\u1EBFt\")))),this.state.competitionFormatError===true&&/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-info-item\"},/*#__PURE__*/React.createElement(\"p\",{className:'TextInput-error-text'},this.state.competitionFormatErrorContent))));}else{return/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionSetting-container\"});}}}]);return CompetitionSetting;}(React.Component);var mapStateToProps=function mapStateToProps(state){return{allCompetitionByTournamentId:state.allCompetitionByTournamentId,allFormats:state.allFormats,allSports:state.allSports,newCompetition:state.newCompetition};};export default connect(mapStateToProps,{queryAllCompetitionsByTournamentId:queryAllCompetitionsByTournamentId,addACompetition:addACompetition,queryAllFormats:queryAllFormats,queryAllSports:queryAllSports,createAFinalStageSetting:createAFinalStageSetting,createAGroupStageSetting:createAGroupStageSetting})(CompetitionSetting);","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/components/CompetitionsSetting/index.tsx"],"names":["React","connect","Select","CompetitionSettingCompetitionsItem","CompetitionSettingCompetitionsAddItem","CustomModal","TextInput","queryAllFormats","queryAllSports","queryAllCompetitionsByTournamentId","addACompetition","createAFinalStageSetting","createAGroupStageSetting","competitionFormatOptions","customStyles","content","top","left","right","bottom","backgroundColor","display","flexDirection","overlay","zIndex","sportOptions","CompetitionSetting","props","requestData","params","path","param","tournamentId","limit","data","handleCloseModal","setState","showModal","handleOpenModal","validate","competitionNameError","competitionNameErrorContent","competitionFormatError","competitionFormatErrorContent","state","competitionName","trim","selectedSport","selectedCompetitionFormatPhase1","twoPhase","selectedCompetitionFormatPhase2","allCompetitionByTournamentId","find","element","name","handleConfirmModal","validateAmountOfTeamsGoOnInAGroup","amountOfTeamsGoOnInAGroupError","amountOfTeamsGoOnInAGroupErrorContent","validateAmountOfTeamsInAGroup","amountOfTeamsInAGroupError","amountOfTeamsInAGroupErrorContent","sportId","value","description","hasGroupStage","onChangeHomeWayPhase1","homeWayPhase1","onChangeHomeWayPhase2","homeWayPhase2","onChangeCompetitionName","onChangeSport","OnChoose1","onePhase","OnChoose2","onChangeCompetitionFormatPhase1","onChangeCompetitionFormatPhase2","onChangeAmountOfTeamsInAGroup","tempValue","isNaN","Number","amountOfTeamsInAGroup","onChangeAmountOfTeamsGoOnInAGroup","amountOfTeamsGoOnInAGroup","onBlurAmountOfTeamsInAGroup","onBlurAmountOfTeamsGoOnInAGroup","nextProps","nextState","allSports","map","item","index","push","id","label","fullName","length","newCompetition","competitionId","formatId","hasHomeMatch","advanceTeamPerTable","maxTeamPerTable","allFormats","tournamentInfo","width","Component","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Styles } from 'react-modal';\r\nimport Select, { ValueType, OptionTypeBase } from 'react-select';\r\nimport 'react-block-ui/style.css';\r\nimport CompetitionSettingCompetitionsItem from 'components/CompetitionSettingCompetitionsItem';\r\nimport CompetitionSettingCompetitionsAddItem from 'components/CompetitionSettingCompetitionsAddItem';\r\nimport CustomModal from 'components/CustomModal';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport {\r\n  queryAllFormats,\r\n  queryAllSports\r\n} from 'screens/CompetitionInfo/actions';\r\nimport { queryAllCompetitionsByTournamentId, addACompetition, createAFinalStageSetting, createAGroupStageSetting } from './actions';\r\nimport './styles.css';\r\n\r\ninterface ICompetitionSettingProps extends React.ClassAttributes<CompetitionSetting> {\r\n  tournamentId: number;\r\n  tournamentInfo: IParams | null;\r\n  newCompetition: IParams | null;\r\n  allCompetitionByTournamentId: IParams[] | null;\r\n  allSports: IParams[];\r\n  allFormats: IParams[];\r\n\r\n  onChangeCompetitionSetting(): void;\r\n  queryAllCompetitionsByTournamentId(param: IBigRequest): void;\r\n  addACompetition(param: IBigRequest): void;\r\n  createAFinalStageSetting(param: IBigRequest): void;\r\n  createAGroupStageSetting(param: IBigRequest): void;\r\n  queryAllSports(): void;\r\n  queryAllFormats(): void;\r\n}\r\n\r\ninterface ICompetitionSettingState {\r\n  showModal: boolean;\r\n  competitionName: string;\r\n  competitionNameError: boolean;\r\n  competitionNameErrorContent: string;\r\n  competitionFormatError: boolean;\r\n  competitionFormatErrorContent: string;\r\n  selectedSport: ValueType<OptionTypeBase>;\r\n  onePhase: boolean;\r\n  twoPhase: boolean;\r\n  selectedCompetitionFormatPhase1: ValueType<OptionTypeBase>;\r\n  selectedCompetitionFormatPhase2: ValueType<OptionTypeBase>;\r\n  // maxAmountTeamOfGroup: number;\r\n  // maxAmountTeamOfGroupError: boolean;\r\n  // maxAmountTeamOfGroupErrorContent: string;\r\n  // limitAmountOfTeamchecked: boolean;\r\n  // maxAmountOfTeam: number;\r\n  // maxAmountOfTeamError: boolean;\r\n  // maxAmountOfTeamErrorContent: string;\r\n  // maxAmountMemberOfTeam: number;\r\n  // minAmountMemberOfTeam: number;\r\n  // minAmountMemberOfTeamError: boolean;\r\n  // maxAmountMemberOfTeamError: boolean;\r\n  // maxAmountMemberOfTeamErrorContent: string;\r\n  // minAmountMemberOfTeamErrorContent: string;\r\n  homeWayPhase2: boolean;\r\n  homeWayPhase1: boolean;\r\n  amountOfTeamsInAGroup: number;\r\n  amountOfTeamsInAGroupError: boolean;\r\n  amountOfTeamsInAGroupErrorContent: string;\r\n  amountOfTeamsGoOnInAGroup: number;\r\n  amountOfTeamsGoOnInAGroupError: boolean;\r\n  amountOfTeamsGoOnInAGroupErrorContent: string;\r\n}\r\n\r\nlet competitionFormatOptions: IParams[] = [];\r\n\r\nconst customStyles: Styles = {\r\n  content: {\r\n    top: '15%',\r\n    left: '15%',\r\n    right: '15%',\r\n    bottom: '15%',\r\n    backgroundColor: '#2b303d',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  overlay: {\r\n    zIndex: 100001,\r\n  },\r\n};\r\n\r\nlet sportOptions: IParams[] = [];\r\n\r\nclass CompetitionSetting extends React.Component<ICompetitionSettingProps, ICompetitionSettingState> {\r\n  constructor(props: ICompetitionSettingProps) {\r\n    super(props);\r\n    this.state = {\r\n      showModal: false,\r\n      competitionName: '',\r\n      competitionNameError: false,\r\n      competitionNameErrorContent: '',\r\n      competitionFormatError: false,\r\n      competitionFormatErrorContent: '',\r\n      selectedSport: null,\r\n      onePhase: true,\r\n      twoPhase: false,\r\n      selectedCompetitionFormatPhase1: null,\r\n      selectedCompetitionFormatPhase2: null,\r\n      // limitAmountOfTeamchecked: false,\r\n      // maxAmountTeamOfGroup: 0,\r\n      // maxAmountTeamOfGroupError: false,\r\n      // maxAmountTeamOfGroupErrorContent: '',\r\n      // maxAmountOfTeam: 0,\r\n      // maxAmountOfTeamError: false,\r\n      // maxAmountOfTeamErrorContent: '',\r\n      // maxAmountMemberOfTeamError: false,\r\n      // maxAmountMemberOfTeamErrorContent: '',\r\n      // maxAmountMemberOfTeam: 0,\r\n      // minAmountMemberOfTeam: 0,\r\n      // minAmountMemberOfTeamError: false,\r\n      // minAmountMemberOfTeamErrorContent: '',\r\n      homeWayPhase2: false,\r\n      homeWayPhase1: false,\r\n      amountOfTeamsInAGroup: 2,\r\n      amountOfTeamsInAGroupError: false,\r\n      amountOfTeamsInAGroupErrorContent: '',\r\n      amountOfTeamsGoOnInAGroup: 1,\r\n      amountOfTeamsGoOnInAGroupError: false,\r\n      amountOfTeamsGoOnInAGroupErrorContent: '',\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: ICompetitionSettingProps, nextState: ICompetitionSettingState) {\r\n    if (this.props.allSports !== nextProps.allSports) {\r\n      sportOptions = [];\r\n      nextProps.allSports.map((item, index) => sportOptions.push({ value: item.id, label: item.fullName }));\r\n      if (nextProps.allSports.length > 0) {\r\n        this.setState({\r\n          selectedSport: { value: nextProps.allSports[0].id, label: nextProps.allSports[0].fullName },\r\n        });\r\n      }\r\n    }\r\n    if (this.props.newCompetition !== nextProps.newCompetition && nextProps.newCompetition !== null) {\r\n      let params: IBigRequest = {\r\n        path: '',\r\n        param: {},\r\n        data: {\r\n          competitionId: nextProps.newCompetition.id,\r\n          formatId: nextState.twoPhase === true ? (nextState.selectedCompetitionFormatPhase2 as IParams).value : (nextState.selectedCompetitionFormatPhase1 as IParams).value,\r\n          hasHomeMatch: nextState.twoPhase === true ? nextState.homeWayPhase2 : nextState.homeWayPhase1,\r\n        },\r\n      };\r\n      this.props.createAFinalStageSetting(params);\r\n      if (nextState.twoPhase === false) {\r\n        params = {\r\n          path: '',\r\n          param: {},\r\n          data: {\r\n            competitionId: nextProps.newCompetition.id,\r\n          },\r\n        };\r\n        this.props.createAGroupStageSetting(params);\r\n      } else {\r\n        params = {\r\n          path: '',\r\n          param: {},\r\n          data: {\r\n            competitionId: nextProps.newCompetition.id,\r\n            formatId: (this.state.selectedCompetitionFormatPhase1 as IParams).value,\r\n            hasHomeMatch: this.state.homeWayPhase1,\r\n            advanceTeamPerTable: this.state.amountOfTeamsGoOnInAGroup,\r\n            maxTeamPerTable: this.state.amountOfTeamsInAGroup,\r\n          },\r\n        };\r\n        this.props.createAGroupStageSetting(params);\r\n      }\r\n    }\r\n    if (this.props.allFormats !== nextProps.allFormats) {\r\n      competitionFormatOptions = [];\r\n      nextProps.allFormats.map((item, index) => competitionFormatOptions.push({ value: item.id, label: item.description }));\r\n      if (nextProps.allFormats.length > 0) {\r\n        this.setState({\r\n          selectedCompetitionFormatPhase1: { value: nextProps.allFormats[0].id, label: nextProps.allFormats[0].description },\r\n          selectedCompetitionFormatPhase2: { value: nextProps.allFormats[0].id, label: nextProps.allFormats[0].description },\r\n        });\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        tournamentId: this.props.tournamentId,\r\n        limit: 99,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryAllCompetitionsByTournamentId(params);\r\n    this.props.queryAllSports();\r\n    this.props.queryAllFormats();\r\n  }\r\n\r\n  private handleCloseModal = () => {\r\n    this.setState({\r\n      showModal: false,\r\n    });\r\n  }\r\n\r\n  private handleOpenModal = () => {\r\n    this.setState({\r\n      showModal: true,\r\n    });\r\n  }\r\n\r\n  private validate = () => {\r\n    let competitionNameError = false;\r\n    let competitionNameErrorContent = '';\r\n    let competitionFormatError = false;\r\n    let competitionFormatErrorContent = '';\r\n    if (this.state.competitionName.trim() === '') {\r\n      if (this.state.selectedSport == null) {\r\n        competitionNameError = true;\r\n        competitionNameErrorContent = 'Tên cuộc thi không được trống, môn thể thao không được trống';\r\n      } else {\r\n        competitionNameError = true;\r\n        competitionNameErrorContent = 'Tên cuộc thi không được trống';\r\n      }\r\n    } else {\r\n      if (this.state.selectedSport == null) {\r\n        competitionNameError = true;\r\n        competitionNameErrorContent = 'Môn thể thao không được trống';\r\n      }\r\n    }\r\n    if (this.state.selectedCompetitionFormatPhase1 == null || (this.state.twoPhase && this.state.selectedCompetitionFormatPhase2 == null)) {\r\n      competitionFormatError = true;\r\n      competitionFormatErrorContent = 'Thể thức không được trống';\r\n    }\r\n    if (this.props.allCompetitionByTournamentId!.find(element => element.name === this.state.competitionName)) {\r\n      competitionNameError = true;\r\n      competitionNameErrorContent = 'Tên cuộc thi này đã tồn tại';\r\n    }\r\n\r\n    return { competitionNameError, competitionNameErrorContent, competitionFormatError, competitionFormatErrorContent };\r\n  }\r\n\r\n  // private onChangeMaxAmountMemberOfTeam = (value: string) => {\r\n  //   let tempValue = 0;\r\n  //   if (!isNaN(value as unknown as number)) {\r\n  //     tempValue = Number(value);\r\n  //   } else {\r\n  //     tempValue = 0;\r\n  //   }\r\n  //   this.setState({ maxAmountMemberOfTeam: tempValue, });\r\n  // }\r\n\r\n  // private onChangeMinAmountMemberOfTeam = (value: string) => {\r\n  //   let tempValue = 0;\r\n  //   if (!isNaN(value as unknown as number)) {\r\n  //     tempValue = Number(value);\r\n  //   } else {\r\n  //     tempValue = 0;\r\n  //   }\r\n  //   this.setState({ minAmountMemberOfTeam: tempValue, });\r\n  // }\r\n\r\n  private handleConfirmModal = () => {\r\n    const { competitionNameError, competitionNameErrorContent, competitionFormatError, competitionFormatErrorContent } = this.validate();\r\n    const { amountOfTeamsGoOnInAGroupError, amountOfTeamsGoOnInAGroupErrorContent } = this.validateAmountOfTeamsGoOnInAGroup();\r\n    const { amountOfTeamsInAGroupError, amountOfTeamsInAGroupErrorContent } = this.validateAmountOfTeamsInAGroup();\r\n    this.setState({\r\n      competitionNameError,\r\n      competitionNameErrorContent,\r\n      competitionFormatError,\r\n      competitionFormatErrorContent,\r\n      amountOfTeamsGoOnInAGroupError,\r\n      amountOfTeamsGoOnInAGroupErrorContent,\r\n      amountOfTeamsInAGroupError,\r\n      amountOfTeamsInAGroupErrorContent\r\n    });\r\n    if (competitionNameError === true || competitionFormatError === true || amountOfTeamsGoOnInAGroupError === true || amountOfTeamsInAGroupError === true) {\r\n      return;\r\n    }\r\n\r\n    let params: IBigRequest = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        name: this.state.competitionName,\r\n        tournamentId: this.props.tournamentId,\r\n        sportId: (this.state.selectedSport as IParams).value,\r\n        description: '',\r\n        hasGroupStage: this.state.twoPhase === true,\r\n      },\r\n    };\r\n    this.props.addACompetition(params);\r\n    this.setState({\r\n      showModal: false,\r\n    });\r\n  }\r\n\r\n  private onChangeHomeWayPhase1 = () => {\r\n    this.setState({\r\n      homeWayPhase1: !this.state.homeWayPhase1,\r\n    });\r\n  };\r\n\r\n  private onChangeHomeWayPhase2 = () => {\r\n    this.setState({\r\n      homeWayPhase2: !this.state.homeWayPhase2,\r\n    });\r\n  };\r\n\r\n  private onChangeCompetitionName = (value: string) => {\r\n    this.setState({ competitionName: value, });\r\n  }\r\n\r\n  private onChangeSport = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedSport: value,\r\n    });\r\n  }\r\n\r\n  // private onChangeLimitAmountOfTeam = () => {\r\n  //   this.setState({\r\n  //     limitAmountOfTeamchecked: !this.state.limitAmountOfTeamchecked,\r\n  //   });\r\n  // };\r\n\r\n  // private onChangeMaxAmountOfTeam = (value: string) => {\r\n  //   let tempValue = 0;\r\n  //   if (!isNaN(value as unknown as number)) {\r\n  //     tempValue = Number(value);\r\n  //   } else {\r\n  //     tempValue = 0;\r\n  //   }\r\n  //   this.setState({ maxAmountOfTeam: tempValue, });\r\n  // }\r\n\r\n  private OnChoose1 = () => {\r\n    this.setState({\r\n      onePhase: true,\r\n      twoPhase: false,\r\n    });\r\n  }\r\n\r\n  private OnChoose2 = () => {\r\n    this.setState({\r\n      onePhase: false,\r\n      twoPhase: true,\r\n    });\r\n  }\r\n\r\n  private onChangeCompetitionFormatPhase1 = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedCompetitionFormatPhase1: value,\r\n    });\r\n  }\r\n\r\n  private onChangeCompetitionFormatPhase2 = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedCompetitionFormatPhase2: value,\r\n    });\r\n  }\r\n\r\n  // private onChangeMaxAmountTeamOfGroup = (value: string) => {\r\n  //   let tempValue = 0;\r\n  //   if (!isNaN(value as unknown as number)) {\r\n  //     tempValue = Number(value);\r\n  //   } else {\r\n  //     tempValue = 0;\r\n  //   }\r\n  //   this.setState({ maxAmountTeamOfGroup: tempValue, });\r\n  // }\r\n\r\n  private onChangeAmountOfTeamsInAGroup = (value: string) => {\r\n    let tempValue = 0;\r\n    if (!isNaN(value as unknown as number)) {\r\n      tempValue = Number(value);\r\n    } else {\r\n      tempValue = 0;\r\n    }\r\n    this.setState({ amountOfTeamsInAGroup: tempValue, });\r\n  }\r\n\r\n  private onChangeAmountOfTeamsGoOnInAGroup = (value: string) => {\r\n    let tempValue = 0;\r\n    if (!isNaN(value as unknown as number)) {\r\n      tempValue = Number(value);\r\n    } else {\r\n      tempValue = 0;\r\n    }\r\n    this.setState({ amountOfTeamsGoOnInAGroup: tempValue, });\r\n  }\r\n\r\n  private onBlurAmountOfTeamsInAGroup = () => {\r\n    const { amountOfTeamsInAGroupError, amountOfTeamsInAGroupErrorContent } = this.validateAmountOfTeamsInAGroup();\r\n    this.setState({\r\n      amountOfTeamsInAGroupError,\r\n      amountOfTeamsInAGroupErrorContent\r\n    });\r\n    if (amountOfTeamsInAGroupError === true) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  private onBlurAmountOfTeamsGoOnInAGroup = () => {\r\n    const { amountOfTeamsGoOnInAGroupError, amountOfTeamsGoOnInAGroupErrorContent } = this.validateAmountOfTeamsGoOnInAGroup();\r\n    this.setState({\r\n      amountOfTeamsGoOnInAGroupError,\r\n      amountOfTeamsGoOnInAGroupErrorContent\r\n    });\r\n    if (amountOfTeamsGoOnInAGroupError === true) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  private validateAmountOfTeamsGoOnInAGroup = () => {\r\n    let amountOfTeamsGoOnInAGroupError = false;\r\n    let amountOfTeamsGoOnInAGroupErrorContent = '';\r\n    if (this.state.amountOfTeamsGoOnInAGroup < 1 || this.state.amountOfTeamsGoOnInAGroup >= this.state.amountOfTeamsInAGroup) {\r\n      amountOfTeamsGoOnInAGroupError = true;\r\n      amountOfTeamsGoOnInAGroupErrorContent = 'Số đội đi tiếp trong 1 bảng phải lớn hơn 0 và nhỏ hơn số đội tối đa';\r\n    }\r\n\r\n    return { amountOfTeamsGoOnInAGroupError, amountOfTeamsGoOnInAGroupErrorContent };\r\n  }\r\n\r\n  private validateAmountOfTeamsInAGroup = () => {\r\n    let amountOfTeamsInAGroupError = false;\r\n    let amountOfTeamsInAGroupErrorContent = '';\r\n    if (this.state.amountOfTeamsInAGroup < 2) {\r\n      amountOfTeamsInAGroupError = true;\r\n      amountOfTeamsInAGroupErrorContent = 'Số đội tối đa trong 1 bảng phải lớn hơn 1';\r\n    }\r\n\r\n    return { amountOfTeamsInAGroupError, amountOfTeamsInAGroupErrorContent };\r\n  }\r\n\r\n  render() {\r\n    if (this.props.allCompetitionByTournamentId != null) {\r\n      return (\r\n        <div className=\"CompetitionSetting-container\">\r\n          {this.props.allCompetitionByTournamentId.map((item, index) => {\r\n            return (<CompetitionSettingCompetitionsItem tournamentInfo={this.props.tournamentInfo} info={item} index={index} key={index} listCompetition={this.props.allCompetitionByTournamentId} tournamentId={this.props.tournamentId} />);\r\n          })}\r\n          <CompetitionSettingCompetitionsAddItem handleAddACompetition={this.handleOpenModal} />\r\n          <CustomModal\r\n            customStyles={customStyles}\r\n            handleCloseModal={this.handleCloseModal}\r\n            showModal={this.state.showModal}\r\n            handleConfirmModal={this.handleConfirmModal}\r\n          >\r\n            <div className=\"CompetitionSetting-header-name-container\">\r\n              <h2>Tạo một cuộc thi mới trong giải</h2>\r\n            </div>\r\n            <div className=\"CompetitionSetting-tournament-name-container\">\r\n              <TextInput label={'Nhập tên cuộc thi'} value={this.state.competitionName} error={this.state.competitionNameError} errorContent={this.state.competitionNameErrorContent} onChangeText={this.onChangeCompetitionName} />\r\n            </div>\r\n            <div className=\"TournamentInfo-info-item\">\r\n              <p className=\"TournamentInfo-text\">Bộ môn</p>\r\n              <Select\r\n                options={sportOptions}\r\n                className=\"Select\"\r\n                defaultValue={this.state.selectedSport}\r\n                value={this.state.selectedSport}\r\n                onChange={this.onChangeSport}\r\n                maxMenuHeight={140}\r\n              />\r\n            </div>\r\n            <div className=\"TournamentInfo-info-item\">\r\n              <p className=\"TournamentInfo-text\">Cách tổ chức giải:</p>\r\n              <input type=\"radio\" name=\"competitionType\" onClick={this.OnChoose1} checked={this.state.onePhase} readOnly />\r\n              <label onClick={this.OnChoose1}>1 giai đoạn</label>\r\n              <input type=\"radio\" name=\"competitionType\" onClick={this.OnChoose2} checked={this.state.twoPhase} readOnly />\r\n              <label onClick={this.OnChoose2}>2 giai đoạn</label>\r\n            </div>\r\n            <div className=\"TournamentInfo-info-item\">\r\n              <p className=\"TournamentInfo-text\">{`Thể thức${this.state.onePhase === true ? '' : ' vòng bảng'}`}</p>\r\n              <Select\r\n                options={competitionFormatOptions}\r\n                className=\"Select\"\r\n                defaultValue={this.state.selectedCompetitionFormatPhase1}\r\n                value={this.state.selectedCompetitionFormatPhase1}\r\n                onChange={this.onChangeCompetitionFormatPhase1}\r\n                menuPlacement={'top'}\r\n              />\r\n            </div>\r\n            {(this.state.selectedCompetitionFormatPhase1 != null &&\r\n              (this.state.selectedCompetitionFormatPhase1 as IParams).value !== 2 &&\r\n              <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <label className=\"Checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={this.state.homeWayPhase1}\r\n                      onChange={this.onChangeHomeWayPhase1}\r\n                    />\r\n                    {`${(this.state.selectedCompetitionFormatPhase1 as IParams).value === 3 ? `${this.state.twoPhase === true ? 'Chơi lượt đi lượt về vòng bảng' : 'Chơi lượt đi lượt về'}` : `${this.state.twoPhase === true ? 'Có trận tranh hạng 3 vòng bảng' : 'Có trận tranh hạng 3'}`}`}\r\n                  </label>\r\n                </div>\r\n              </div>)}\r\n            {(this.state.twoPhase === true &&\r\n              <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <TextInput\r\n                    style={{ width: 250 }}\r\n                    label={'Số đội trong 1 bảng (lớn hơn 1)'}\r\n                    value={this.state.amountOfTeamsInAGroup as unknown as string}\r\n                    onChangeText={this.onChangeAmountOfTeamsInAGroup}\r\n                    error={this.state.amountOfTeamsInAGroupError}\r\n                    errorContent={this.state.amountOfTeamsInAGroupErrorContent}\r\n                    onBlur={this.onBlurAmountOfTeamsInAGroup}\r\n                  />\r\n                </div>\r\n              </div>)}\r\n            {(this.state.twoPhase === true &&\r\n              <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <TextInput\r\n                    style={{ width: 300 }}\r\n                    label={'Số đội đi tiếp trong 1 bảng (lớn hơn 0)'}\r\n                    value={this.state.amountOfTeamsGoOnInAGroup as unknown as string}\r\n                    onChangeText={this.onChangeAmountOfTeamsGoOnInAGroup}\r\n                    error={this.state.amountOfTeamsGoOnInAGroupError}\r\n                    errorContent={this.state.amountOfTeamsGoOnInAGroupErrorContent}\r\n                    onBlur={this.onBlurAmountOfTeamsGoOnInAGroup}\r\n                  />\r\n                </div>\r\n              </div>)}\r\n            {this.state.twoPhase === true && <p className=\"TournamentInfo-text\">Thể thức vòng chung kết</p>}\r\n            {this.state.twoPhase === true && <Select\r\n              options={competitionFormatOptions}\r\n              className=\"Select\"\r\n              defaultValue={this.state.selectedCompetitionFormatPhase2}\r\n              value={this.state.selectedCompetitionFormatPhase2}\r\n              onChange={this.onChangeCompetitionFormatPhase2}\r\n              menuPlacement={'top'}\r\n            />}\r\n            {(this.state.twoPhase === true && (this.state.selectedCompetitionFormatPhase2 as IParams).value !== 2 && ((this.state.selectedCompetitionFormatPhase2 as IParams).value === 3 ?\r\n              <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <label className=\"Checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={this.state.homeWayPhase2}\r\n                      onChange={this.onChangeHomeWayPhase2}\r\n                    />\r\n                      Chơi lượt đi lượt về vòng chung kết\r\n                    </label>\r\n                </div>\r\n              </div> : <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <label className=\"Checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={this.state.homeWayPhase2}\r\n                      onChange={this.onChangeHomeWayPhase2}\r\n                    />\r\n                      Có trận tranh hạng 3 vòng chung kết\r\n                    </label>\r\n                </div>\r\n              </div>))}\r\n            {this.state.competitionFormatError === true && <div className=\"TournamentInfo-info-item\">\r\n              <p className={'TextInput-error-text'}>{this.state.competitionFormatErrorContent}</p>\r\n            </div>}\r\n            {/* {this.state.selectedCompetitionFormatPhase1 && (this.state.selectedCompetitionFormatPhase1 as IParams).value === 2 && <div className=\"TournamentInfo-info-item\">\r\n              <TextInput value={this.state.maxAmountTeamOfGroup as unknown as string} label={`Giới hạn số lượng đội trong 1 bảng${this.state.twoPhase ? ' của giai đoạn 1' : ''}`} onChangeText={this.onChangeMaxAmountTeamOfGroup} error={this.state.maxAmountTeamOfGroupError} errorContent={this.state.maxAmountTeamOfGroupErrorContent} />\r\n            </div>} */}\r\n            {/* <div className=\"TournamentInfo-info-item\">\r\n              <div className=\"CompetitionSettingCompetitionsItem-option-container-item\">\r\n                <label className=\"Checkbox-label\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={this.state.limitAmountOfTeamchecked}\r\n                    onChange={this.onChangeLimitAmountOfTeam}\r\n                  />\r\n            Giới hạn số đội tối đa\r\n          </label>\r\n              </div>\r\n            </div> */}\r\n            {/* {this.state.limitAmountOfTeamchecked === true && <TextInput value={this.state.maxAmountOfTeam as unknown as string} label={'Số lượng đội tối đa'} onChangeText={this.onChangeMaxAmountOfTeam} error={this.state.maxAmountOfTeamError} errorContent={this.state.maxAmountOfTeamErrorContent} />} */}\r\n          </CustomModal>\r\n        </div >\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"CompetitionSetting-container\">\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    allCompetitionByTournamentId: state.allCompetitionByTournamentId,\r\n    allFormats: state.allFormats,\r\n    allSports: state.allSports,\r\n    newCompetition: state.newCompetition,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    queryAllCompetitionsByTournamentId,\r\n    addACompetition,\r\n    queryAllFormats,\r\n    queryAllSports,\r\n    createAFinalStageSetting,\r\n    createAGroupStageSetting\r\n  }\r\n)(CompetitionSetting);"]},"metadata":{},"sourceType":"module"}