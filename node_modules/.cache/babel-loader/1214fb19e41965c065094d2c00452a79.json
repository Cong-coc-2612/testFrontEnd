{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doIsEmailExisted),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchIsEmailExisted);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{CHECK_EMAIL_EXISTED}from'redux-saga/actions';var isEmailExisted=function isEmailExisted(data,path,param){var uri='user/getByEmail';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.GET,datas,params,paths);};function doIsEmailExisted(request){var response,data;return _regeneratorRuntime.wrap(function doIsEmailExisted$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(isEmailExisted,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;data=response.data.result;if(!data.User){_context.next=10;break;}_context.next=8;return put({type:request.response.success,payload:true});case 8:_context.next=12;break;case 10:_context.next=12;return put({type:request.response.success,payload:false});case 12:_context.next=18;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](0);_context.next=18;return put({type:request.response.failed});case 18:case\"end\":return _context.stop();}}},_marked,null,[[0,14]]);}export default function watchIsEmailExisted(){return _regeneratorRuntime.wrap(function watchIsEmailExisted$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(CHECK_EMAIL_EXISTED,doIsEmailExisted);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/IsEmailExisted/isEmailExisted.ts"],"names":["doIsEmailExisted","watchIsEmailExisted","call","takeLatest","put","query","METHOD","CHECK_EMAIL_EXISTED","isEmailExisted","data","path","param","uri","datas","paths","params","GET","request","response","result","User","type","success","payload","failed"],"mappings":"wXAcUA,gB,iDAsBeC,mB,EApCzB,OAASC,IAAT,CAAeC,UAAf,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,iBAA9B,CAEA,OAASC,mBAAT,KAAoC,oBAApC,CAGA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,IAAD,CAAgBC,IAAhB,CAAuCC,KAAvC,CAA0D,CAC/E,GAAMC,CAAAA,GAAG,CAAG,iBAAZ,CACA,GAAMC,CAAAA,KAAK,kBAAQJ,IAAR,CAAX,CACA,GAAMK,CAAAA,KAAK,CAAGJ,IAAd,CACA,GAAMK,CAAAA,MAAM,kBAAQJ,KAAR,CAAZ,CACA,MAAON,CAAAA,KAAK,CAACO,GAAD,CAAMN,MAAM,CAACU,GAAb,CAAkBH,KAAlB,CAAyBE,MAAzB,CAAiCD,KAAjC,CAAZ,CACD,CAND,CAQA,QAAUd,CAAAA,gBAAV,CAA2BiB,OAA3B,6KAEqB,MAAMf,CAAAA,IAAI,CAACM,cAAD,CAAiBS,OAAO,CAACR,IAAR,CAAaA,IAA9B,CAAoCQ,OAAO,CAACR,IAAR,CAAaC,IAAjD,CAAuDO,OAAO,CAACR,IAAR,CAAaE,KAApE,CAAV,CAFrB,OAEUO,QAFV,eAGUT,IAHV,CAGiBS,QAAQ,CAACT,IAAT,CAAcU,MAH/B,KAIQV,IAAI,CAACW,IAJb,0CAKM,MAAMhB,CAAAA,GAAG,CAAC,CACRiB,IAAI,CAAEJ,OAAO,CAACC,QAAR,CAAiBI,OADf,CAERC,OAAO,CAAE,IAFD,CAAD,CAAT,CALN,uDAUM,MAAMnB,CAAAA,GAAG,CAAC,CACRiB,IAAI,CAAEJ,OAAO,CAACC,QAAR,CAAiBI,OADf,CAERC,OAAO,CAAE,KAFD,CAAD,CAAT,CAVN,0GAgBI,MAAMnB,CAAAA,GAAG,CAAC,CACRiB,IAAI,CAAEJ,OAAO,CAACC,QAAR,CAAiBM,MADf,CAAD,CAAT,CAhBJ,qEAsBA,cAAe,SAAUvB,CAAAA,mBAAV,mJACb,MAAME,CAAAA,UAAU,CAACI,mBAAD,CAAsBP,gBAAtB,CAAhB,CADa","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { CHECK_EMAIL_EXISTED } from 'redux-saga/actions';\r\n\r\n\r\nconst isEmailExisted = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'user/getByEmail';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doIsEmailExisted(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(isEmailExisted, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (data.User) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: true,\r\n      });\r\n    } else {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: false,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchIsEmailExisted() {\r\n  yield takeLatest(CHECK_EMAIL_EXISTED, doIsEmailExisted);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}