{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doQueryCompetitionInfo),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchQueryCompetitionInfo);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{COMMON_SHOW_NOTIFICATION,QUERY_COMPETITION_INFO}from'redux-saga/actions';var queryCompetitionInfo=function queryCompetitionInfo(data,path,param){var uri='competition';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.GET,datas,params,paths);};function doQueryCompetitionInfo(request){var response,data;return _regeneratorRuntime.wrap(function doQueryCompetitionInfo$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(queryCompetitionInfo,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;data=response.data.result;if(!(response.data.error.MessageCode===0)){_context.next=10;break;}_context.next=8;return put({type:request.response.success,payload:{Competition:data.competition,Config:response.data.config.Global}});case 8:_context.next=11;break;case 10:throw new Error(response.data.error.Message);case 11:_context.next=19;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);_context.next=17;return put({type:request.response.failed});case 17:_context.next=19;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'QueryCompetitionInfo',content:_context.t0,time:new Date()}});case 19:case\"end\":return _context.stop();}}},_marked,null,[[0,13]]);}export default function watchQueryCompetitionInfo(){return _regeneratorRuntime.wrap(function watchQueryCompetitionInfo$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(QUERY_COMPETITION_INFO,doQueryCompetitionInfo);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/QueryCompetitionInfo/queryCompetitionInfo.ts"],"names":["doQueryCompetitionInfo","watchQueryCompetitionInfo","call","takeLatest","put","query","METHOD","COMMON_SHOW_NOTIFICATION","QUERY_COMPETITION_INFO","queryCompetitionInfo","data","path","param","uri","datas","paths","params","GET","request","response","result","error","MessageCode","type","success","payload","Competition","competition","Config","config","Global","Error","Message","failed","title","content","time","Date"],"mappings":"wXAcUA,sB,iDA4BeC,yB,EA1CzB,OAASC,IAAT,CAAeC,UAAf,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,iBAA9B,CAEA,OAASC,wBAAT,CAAmCC,sBAAnC,KAAiE,oBAAjE,CAGA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,IAAD,CAAgBC,IAAhB,CAAuCC,KAAvC,CAA0D,CACrF,GAAMC,CAAAA,GAAG,CAAG,aAAZ,CACA,GAAMC,CAAAA,KAAK,kBAAQJ,IAAR,CAAX,CACA,GAAMK,CAAAA,KAAK,CAAGJ,IAAd,CACA,GAAMK,CAAAA,MAAM,kBAAQJ,KAAR,CAAZ,CACA,MAAOP,CAAAA,KAAK,CAACQ,GAAD,CAAMP,MAAM,CAACW,GAAb,CAAkBH,KAAlB,CAAyBE,MAAzB,CAAiCD,KAAjC,CAAZ,CACD,CAND,CAQA,QAAUf,CAAAA,sBAAV,CAAiCkB,OAAjC,mLAEqB,MAAMhB,CAAAA,IAAI,CAACO,oBAAD,CAAuBS,OAAO,CAACR,IAAR,CAAaA,IAApC,CAA0CQ,OAAO,CAACR,IAAR,CAAaC,IAAvD,CAA6DO,OAAO,CAACR,IAAR,CAAaE,KAA1E,CAAV,CAFrB,OAEUO,QAFV,eAGUT,IAHV,CAGiBS,QAAQ,CAACT,IAAT,CAAcU,MAH/B,MAIQD,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBC,WAApB,GAAoC,CAJ5C,2CAKM,MAAMlB,CAAAA,GAAG,CAAC,CACRmB,IAAI,CAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf,CAERC,OAAO,CAAE,CAAEC,WAAW,CAAEhB,IAAI,CAACiB,WAApB,CAAiCC,MAAM,CAAET,QAAQ,CAACT,IAAT,CAAcmB,MAAd,CAAqBC,MAA9D,CAFD,CAAD,CAAT,CALN,2CAUY,IAAIC,CAAAA,KAAJ,CAAUZ,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBW,OAA9B,CAVZ,2GAaI,MAAM5B,CAAAA,GAAG,CAAC,CACRmB,IAAI,CAAEL,OAAO,CAACC,QAAR,CAAiBc,MADf,CAAD,CAAT,CAbJ,yBAgBI,MAAM7B,CAAAA,GAAG,CAAC,CACRmB,IAAI,CAAEhB,wBADE,CAERG,IAAI,CAAE,CACJa,IAAI,CAAE,OADF,CAEJW,KAAK,CAAE,sBAFH,CAGJC,OAAO,YAHH,CAIJC,IAAI,CAAE,GAAIC,CAAAA,IAAJ,EAJF,CAFE,CAAD,CAAT,CAhBJ,qEA4BA,cAAe,SAAUpC,CAAAA,yBAAV,yJACb,MAAME,CAAAA,UAAU,CAACK,sBAAD,CAAyBR,sBAAzB,CAAhB,CADa","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_COMPETITION_INFO } from 'redux-saga/actions';\r\n\r\n\r\nconst queryCompetitionInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'competition';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryCompetitionInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryCompetitionInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: { Competition: data.competition, Config: response.data.config.Global},\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryCompetitionInfo',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryCompetitionInfo() {\r\n  yield takeLatest(QUERY_COMPETITION_INFO, doQueryCompetitionInfo);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}