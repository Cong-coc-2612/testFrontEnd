{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doSwapTwoTeamInBracket),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchSwapTwoTeamInBracket);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{QUERY_LIST_TEAM_SUCCESS,QUERY_LIST_TEAM_FAILED}from'components/Teams/reducers';import{SWAP_TWO_TEAM_IN_BRACKET,COMMON_SHOW_NOTIFICATION,DELETE_LIST_SELECTING_TEAM,QUERY_LIST_TEAM}from'redux-saga/actions';var swapTwoTeamInBracket=function swapTwoTeamInBracket(data,path,param){var uri='teams/swap';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.PUT,datas,params,paths);};function doSwapTwoTeamInBracket(request){var response;return _regeneratorRuntime.wrap(function doSwapTwoTeamInBracket$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(swapTwoTeamInBracket,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;_context.next=6;return put({type:DELETE_LIST_SELECTING_TEAM});case 6:if(!(response.data.error.MessageCode===0)){_context.next=13;break;}_context.next=9;return put({type:QUERY_LIST_TEAM,response:{success:QUERY_LIST_TEAM_SUCCESS,failed:QUERY_LIST_TEAM_FAILED},data:{path:'',param:{competitionId:request.data.data.competitionId,limit:999},data:{}}});case 9:_context.next=11;return put({type:request.response.success});case 11:_context.next=14;break;case 13:throw new Error(response.data.error.Message);case 14:_context.next=22;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](0);_context.next=20;return put({type:request.response.success});case 20:_context.next=22;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'SwapTwoTeamInBracket',content:_context.t0,time:new Date()}});case 22:case\"end\":return _context.stop();}}},_marked,null,[[0,16]]);}export default function watchSwapTwoTeamInBracket(){return _regeneratorRuntime.wrap(function watchSwapTwoTeamInBracket$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(SWAP_TWO_TEAM_IN_BRACKET,doSwapTwoTeamInBracket);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/SwapTwoTeamInBracket/swapTwoTeamInBracket.ts"],"names":["doSwapTwoTeamInBracket","watchSwapTwoTeamInBracket","call","takeLatest","put","query","METHOD","QUERY_LIST_TEAM_SUCCESS","QUERY_LIST_TEAM_FAILED","SWAP_TWO_TEAM_IN_BRACKET","COMMON_SHOW_NOTIFICATION","DELETE_LIST_SELECTING_TEAM","QUERY_LIST_TEAM","swapTwoTeamInBracket","data","path","param","uri","datas","paths","params","PUT","request","response","type","error","MessageCode","success","failed","competitionId","limit","Error","Message","title","content","time","Date"],"mappings":"wXAeUA,sB,iDA4CeC,yB,EA3DzB,OAASC,IAAT,CAAeC,UAAf,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,iBAA9B,CAEA,OAASC,uBAAT,CAAkCC,sBAAlC,KAAgE,2BAAhE,CACA,OAASC,wBAAT,CAAmCC,wBAAnC,CAA6DC,0BAA7D,CAAyFC,eAAzF,KAAgH,oBAAhH,CAGA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,IAAD,CAAgBC,IAAhB,CAAuCC,KAAvC,CAA0D,CACrF,GAAMC,CAAAA,GAAG,CAAG,YAAZ,CACA,GAAMC,CAAAA,KAAK,kBAAQJ,IAAR,CAAX,CACA,GAAMK,CAAAA,KAAK,CAAGJ,IAAd,CACA,GAAMK,CAAAA,MAAM,kBAAQJ,KAAR,CAAZ,CACA,MAAOX,CAAAA,KAAK,CAACY,GAAD,CAAMX,MAAM,CAACe,GAAb,CAAkBH,KAAlB,CAAyBE,MAAzB,CAAiCD,KAAjC,CAAZ,CACD,CAND,CAQA,QAAUnB,CAAAA,sBAAV,CAAiCsB,OAAjC,8KAEqB,MAAMpB,CAAAA,IAAI,CAACW,oBAAD,CAAuBS,OAAO,CAACR,IAAR,CAAaA,IAApC,CAA0CQ,OAAO,CAACR,IAAR,CAAaC,IAAvD,CAA6DO,OAAO,CAACR,IAAR,CAAaE,KAA1E,CAAV,CAFrB,OAEUO,QAFV,+BAGI,MAAMnB,CAAAA,GAAG,CAAC,CACRoB,IAAI,CAAEb,0BADE,CAAD,CAAT,CAHJ,YAMQY,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBC,WAApB,GAAoC,CAN5C,2CAOM,MAAMtB,CAAAA,GAAG,CAAC,CACRoB,IAAI,CAAEZ,eADE,CAERW,QAAQ,CAAE,CACRI,OAAO,CAAEpB,uBADD,CAERqB,MAAM,CAAEpB,sBAFA,CAFF,CAMRM,IAAI,CAAE,CACJC,IAAI,CAAE,EADF,CAEJC,KAAK,CAAE,CACLa,aAAa,CAAEP,OAAO,CAACR,IAAR,CAAaA,IAAb,CAAkBe,aAD5B,CAELC,KAAK,CAAE,GAFF,CAFH,CAMJhB,IAAI,CAAE,EANF,CANE,CAAD,CAAT,CAPN,wBAsBM,MAAMV,CAAAA,GAAG,CAAC,CACRoB,IAAI,CAAEF,OAAO,CAACC,QAAR,CAAiBI,OADf,CAAD,CAAT,CAtBN,4CA0BY,IAAII,CAAAA,KAAJ,CAAUR,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBO,OAA9B,CA1BZ,2GA6BI,MAAM5B,CAAAA,GAAG,CAAC,CACRoB,IAAI,CAAEF,OAAO,CAACC,QAAR,CAAiBI,OADf,CAAD,CAAT,CA7BJ,yBAgCI,MAAMvB,CAAAA,GAAG,CAAC,CACRoB,IAAI,CAAEd,wBADE,CAERI,IAAI,CAAE,CACJU,IAAI,CAAE,OADF,CAEJS,KAAK,CAAE,sBAFH,CAGJC,OAAO,YAHH,CAIJC,IAAI,CAAE,GAAIC,CAAAA,IAAJ,EAJF,CAFE,CAAD,CAAT,CAhCJ,qEA4CA,cAAe,SAAUnC,CAAAA,yBAAV,yJACb,MAAME,CAAAA,UAAU,CAACM,wBAAD,CAA2BT,sBAA3B,CAAhB,CADa","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_LIST_TEAM_SUCCESS, QUERY_LIST_TEAM_FAILED } from 'components/Teams/reducers';\r\nimport { SWAP_TWO_TEAM_IN_BRACKET, COMMON_SHOW_NOTIFICATION, DELETE_LIST_SELECTING_TEAM, QUERY_LIST_TEAM } from 'redux-saga/actions';\r\n\r\n\r\nconst swapTwoTeamInBracket = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'teams/swap';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doSwapTwoTeamInBracket(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(swapTwoTeamInBracket, request.data.data, request.data.path, request.data.param);\r\n    yield put({\r\n      type: DELETE_LIST_SELECTING_TEAM,\r\n    });\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: QUERY_LIST_TEAM,\r\n        response: {\r\n          success: QUERY_LIST_TEAM_SUCCESS,\r\n          failed: QUERY_LIST_TEAM_FAILED,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            competitionId: request.data.data.competitionId,\r\n            limit: 999,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n      yield put({\r\n        type: request.response.success,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.success,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'SwapTwoTeamInBracket',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchSwapTwoTeamInBracket() {\r\n  yield takeLatest(SWAP_TWO_TEAM_IN_BRACKET, doSwapTwoTeamInBracket);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}