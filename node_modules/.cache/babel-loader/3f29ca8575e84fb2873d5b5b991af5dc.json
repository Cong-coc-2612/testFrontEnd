{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doAddATeamToCompetition),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchAddATeamToCompetition);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{QUERY_LIST_TEAM_SUCCESS,QUERY_LIST_TEAM_FAILED}from'components/Teams/reducers';import{COMMON_SHOW_NOTIFICATION,ADD_A_TEAM_TO_COMPETITION,QUERY_LIST_TEAM}from'redux-saga/actions';var addATeamToCompetition=function addATeamToCompetition(data,path,param){var uri='team';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.POST,datas,params,paths);};function doAddATeamToCompetition(request){var response;return _regeneratorRuntime.wrap(function doAddATeamToCompetition$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(addATeamToCompetition,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;if(!(response.data.error.MessageCode===0)){_context.next=9;break;}_context.next=7;return put({type:QUERY_LIST_TEAM,response:{success:QUERY_LIST_TEAM_SUCCESS,failed:QUERY_LIST_TEAM_FAILED},data:{path:'',param:{competitionId:request.data.data.competitionId,limit:999},data:{}}});case 7:_context.next=10;break;case 9:throw new Error(response.data.error.Message);case 10:_context.next=16;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);_context.next=16;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'AddATeamToCompetition',content:_context.t0,time:new Date()}});case 16:case\"end\":return _context.stop();}}},_marked,null,[[0,12]]);}export default function watchAddATeamToCompetition(){return _regeneratorRuntime.wrap(function watchAddATeamToCompetition$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(ADD_A_TEAM_TO_COMPETITION,doAddATeamToCompetition);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/AddATeamToCompetition/addATeamToCompetition.ts"],"names":["doAddATeamToCompetition","watchAddATeamToCompetition","call","takeLatest","put","query","METHOD","QUERY_LIST_TEAM_SUCCESS","QUERY_LIST_TEAM_FAILED","COMMON_SHOW_NOTIFICATION","ADD_A_TEAM_TO_COMPETITION","QUERY_LIST_TEAM","addATeamToCompetition","data","path","param","uri","datas","paths","params","POST","request","response","error","MessageCode","type","success","failed","competitionId","limit","Error","Message","title","content","time","Date"],"mappings":"wXAcUA,uB,iDAmCeC,0B,EAjDzB,OAASC,IAAT,CAAeC,UAAf,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,iBAA9B,CAEA,OAASC,uBAAT,CAAkCC,sBAAlC,KAAgE,2BAAhE,CACA,OAASC,wBAAT,CAAmCC,yBAAnC,CAA8DC,eAA9D,KAAqF,oBAArF,CAEA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,IAAD,CAAgBC,IAAhB,CAAuCC,KAAvC,CAA0D,CACtF,GAAMC,CAAAA,GAAG,CAAG,MAAZ,CACA,GAAMC,CAAAA,KAAK,kBAAQJ,IAAR,CAAX,CACA,GAAMK,CAAAA,KAAK,CAAGJ,IAAd,CACA,GAAMK,CAAAA,MAAM,kBAAQJ,KAAR,CAAZ,CACA,MAAOV,CAAAA,KAAK,CAACW,GAAD,CAAMV,MAAM,CAACc,IAAb,CAAmBH,KAAnB,CAA0BE,MAA1B,CAAkCD,KAAlC,CAAZ,CACD,CAND,CAQA,QAAUlB,CAAAA,uBAAV,CAAkCqB,OAAlC,+KAEqB,MAAMnB,CAAAA,IAAI,CAACU,qBAAD,CAAwBS,OAAO,CAACR,IAAR,CAAaA,IAArC,CAA2CQ,OAAO,CAACR,IAAR,CAAaC,IAAxD,CAA8DO,OAAO,CAACR,IAAR,CAAaE,KAA3E,CAAV,CAFrB,OAEUO,QAFV,oBAGQA,QAAQ,CAACT,IAAT,CAAcU,KAAd,CAAoBC,WAApB,GAAoC,CAH5C,0CAIM,MAAMpB,CAAAA,GAAG,CAAC,CACRqB,IAAI,CAAEd,eADE,CAERW,QAAQ,CAAE,CACRI,OAAO,CAAEnB,uBADD,CAERoB,MAAM,CAAEnB,sBAFA,CAFF,CAMRK,IAAI,CAAE,CACJC,IAAI,CAAE,EADF,CAEJC,KAAK,CAAE,CACLa,aAAa,CAAEP,OAAO,CAACR,IAAR,CAAaA,IAAb,CAAkBe,aAD5B,CAELC,KAAK,CAAE,GAFF,CAFH,CAMJhB,IAAI,CAAE,EANF,CANE,CAAD,CAAT,CAJN,0CAoBY,IAAIiB,CAAAA,KAAJ,CAAUR,QAAQ,CAACT,IAAT,CAAcU,KAAd,CAAoBQ,OAA9B,CApBZ,2GAuBI,MAAM3B,CAAAA,GAAG,CAAC,CACRqB,IAAI,CAAEhB,wBADE,CAERI,IAAI,CAAE,CACJY,IAAI,CAAE,OADF,CAEJO,KAAK,CAAE,uBAFH,CAGJC,OAAO,YAHH,CAIJC,IAAI,CAAE,GAAIC,CAAAA,IAAJ,EAJF,CAFE,CAAD,CAAT,CAvBJ,qEAmCA,cAAe,SAAUlC,CAAAA,0BAAV,0JACb,MAAME,CAAAA,UAAU,CAACO,yBAAD,CAA4BV,uBAA5B,CAAhB,CADa","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_LIST_TEAM_SUCCESS, QUERY_LIST_TEAM_FAILED } from 'components/Teams/reducers';\r\nimport { COMMON_SHOW_NOTIFICATION, ADD_A_TEAM_TO_COMPETITION, QUERY_LIST_TEAM } from 'redux-saga/actions';\r\n\r\nconst addATeamToCompetition = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'team';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doAddATeamToCompetition(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(addATeamToCompetition, request.data.data, request.data.path, request.data.param);\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: QUERY_LIST_TEAM,\r\n        response: {\r\n          success: QUERY_LIST_TEAM_SUCCESS,\r\n          failed: QUERY_LIST_TEAM_FAILED,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            competitionId: request.data.data.competitionId,\r\n            limit: 999,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'AddATeamToCompetition',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchAddATeamToCompetition() {\r\n  yield takeLatest(ADD_A_TEAM_TO_COMPETITION, doAddATeamToCompetition);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}