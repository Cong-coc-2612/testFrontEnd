{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doSearchTournament),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchSearchTournament);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{SEARCH_TOURNAMENT,COMMON_SHOW_NOTIFICATION}from'redux-saga/actions';var searchTournament=function searchTournament(data,path,param){var uri='tournaments/getBySearchString';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.GET,datas,params,paths);};function doSearchTournament(request){var response,data;return _regeneratorRuntime.wrap(function doSearchTournament$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(searchTournament,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;data=response.data.result;if(!(response.data.error.MessageCode===0)){_context.next=8;break;}_context.next=8;return put({type:request.response.success,payload:{Tournaments:data.Tournaments,TotalPage:data.TotalPage}});case 8:_context.next=16;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);_context.next=14;return put({type:request.response.failed});case 14:_context.next=16;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'SearchTournament',content:_context.t0,time:new Date()}});case 16:case\"end\":return _context.stop();}}},_marked,null,[[0,10]]);}export default function watchSearchTournament(){return _regeneratorRuntime.wrap(function watchSearchTournament$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(SEARCH_TOURNAMENT,doSearchTournament);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/SearchTournaments/searchTournament.ts"],"names":["doSearchTournament","watchSearchTournament","call","takeLatest","put","query","METHOD","SEARCH_TOURNAMENT","COMMON_SHOW_NOTIFICATION","searchTournament","data","path","param","uri","datas","paths","params","GET","request","response","result","error","MessageCode","type","success","payload","Tournaments","TotalPage","failed","title","content","time","Date"],"mappings":"wXAcUA,kB,iDA0BeC,qB,EAxCzB,OAASC,IAAT,CAAeC,UAAf,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,iBAA9B,CAEA,OAASC,iBAAT,CAA4BC,wBAA5B,KAA4D,oBAA5D,CAGA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,IAAD,CAAgBC,IAAhB,CAAuCC,KAAvC,CAA0D,CACjF,GAAMC,CAAAA,GAAG,CAAG,+BAAZ,CACA,GAAMC,CAAAA,KAAK,kBAAQJ,IAAR,CAAX,CACA,GAAMK,CAAAA,KAAK,CAAGJ,IAAd,CACA,GAAMK,CAAAA,MAAM,kBAAQJ,KAAR,CAAZ,CACA,MAAOP,CAAAA,KAAK,CAACQ,GAAD,CAAMP,MAAM,CAACW,GAAb,CAAkBH,KAAlB,CAAyBE,MAAzB,CAAiCD,KAAjC,CAAZ,CACD,CAND,CAQA,QAAUf,CAAAA,kBAAV,CAA6BkB,OAA7B,+KAEqB,MAAMhB,CAAAA,IAAI,CAACO,gBAAD,CAAmBS,OAAO,CAACR,IAAR,CAAaA,IAAhC,CAAsCQ,OAAO,CAACR,IAAR,CAAaC,IAAnD,CAAyDO,OAAO,CAACR,IAAR,CAAaE,KAAtE,CAAV,CAFrB,OAEUO,QAFV,eAGUT,IAHV,CAGiBS,QAAQ,CAACT,IAAT,CAAcU,MAH/B,MAIQD,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBC,WAApB,GAAoC,CAJ5C,0CAKM,MAAMlB,CAAAA,GAAG,CAAC,CACRmB,IAAI,CAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf,CAERC,OAAO,CAAE,CAACC,WAAW,CAAEhB,IAAI,CAACgB,WAAnB,CAAgCC,SAAS,CAAEjB,IAAI,CAACiB,SAAhD,CAFD,CAAD,CAAT,CALN,yGAWI,MAAMvB,CAAAA,GAAG,CAAC,CACRmB,IAAI,CAAEL,OAAO,CAACC,QAAR,CAAiBS,MADf,CAAD,CAAT,CAXJ,yBAcI,MAAMxB,CAAAA,GAAG,CAAC,CACRmB,IAAI,CAAEf,wBADE,CAERE,IAAI,CAAE,CACJa,IAAI,CAAE,OADF,CAEJM,KAAK,CAAE,kBAFH,CAGJC,OAAO,YAHH,CAIJC,IAAI,CAAE,GAAIC,CAAAA,IAAJ,EAJF,CAFE,CAAD,CAAT,CAdJ,qEA0BA,cAAe,SAAU/B,CAAAA,qBAAV,qJACb,MAAME,CAAAA,UAAU,CAACI,iBAAD,CAAoBP,kBAApB,CAAhB,CADa","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { SEARCH_TOURNAMENT, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\n\r\n\r\nconst searchTournament = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'tournaments/getBySearchString';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doSearchTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(searchTournament, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: {Tournaments: data.Tournaments, TotalPage: data.TotalPage},\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'SearchTournament',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchSearchTournament() {\r\n  yield takeLatest(SEARCH_TOURNAMENT, doSearchTournament);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}