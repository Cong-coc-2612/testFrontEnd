{"ast":null,"code":"import _classCallCheck from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import{connect}from'react-redux';import ReduxBlockUi from'react-block-ui/redux';import TextInput from'components/TextInput';import{CHANGE_PASSWORD}from'redux-saga/actions';import{CHANGE_PASSWORD_SUCCESS,CHANGE_PASSWORD_FAILED}from'screens/ChangePassword/reducers';import{changePassword}from'./actions';import'./styles.css';var ChangePassword=/*#__PURE__*/function(_React$Component){_inherits(ChangePassword,_React$Component);var _super=_createSuper(ChangePassword);function ChangePassword(props){var _this;_classCallCheck(this,ChangePassword);_this=_super.call(this,props);_this.onChangeOldPassword=function(value){_this.setState({oldPassword:value});};_this.onChangeNewPassword=function(value){_this.setState({newPassword:value});};_this.onChangeReconfirmPassword=function(value){_this.setState({reconfirmPassword:value});};_this.validate=function(){var newPasswordError=false;var newPasswordErrorContent='';var oldPasswordErrorContent='';var oldPasswordError=false;var reconfirmPasswordErrorContent='';var reconfirmPasswordError=false;if(_this.state.newPassword.includes(' ')||_this.state.newPassword.trim()===''){newPasswordError=true;newPasswordErrorContent='Mật khẩu không được trống, và không chứa dấu cách';}if(_this.state.oldPassword.trim()===''||_this.state.oldPassword.includes(' ')){oldPasswordError=true;oldPasswordErrorContent='Mật khẩu không được trống, và không chứa dấu cách';}if(newPasswordError!==true&&oldPasswordError!==true&&_this.state.newPassword===_this.state.oldPassword){newPasswordError=true;newPasswordErrorContent='Mật khẩu mới không được giống mật khẩu cũ';}if(_this.state.reconfirmPassword.trim()===''||_this.state.reconfirmPassword.includes(' ')){reconfirmPasswordError=true;reconfirmPasswordErrorContent='Mật khẩu không được trống, và không chứa dấu cách';}else if(_this.state.reconfirmPassword!==_this.state.newPassword&&newPasswordError!==true){reconfirmPasswordError=true;reconfirmPasswordErrorContent='Xác nhận mật khẩu không hợp lệ';}return{newPasswordError:newPasswordError,newPasswordErrorContent:newPasswordErrorContent,oldPasswordErrorContent:oldPasswordErrorContent,oldPasswordError:oldPasswordError,reconfirmPasswordErrorContent:reconfirmPasswordErrorContent,reconfirmPasswordError:reconfirmPasswordError};};_this.handleChangePassword=function(){var _this$validate=_this.validate(),newPasswordError=_this$validate.newPasswordError,newPasswordErrorContent=_this$validate.newPasswordErrorContent,oldPasswordErrorContent=_this$validate.oldPasswordErrorContent,oldPasswordError=_this$validate.oldPasswordError,reconfirmPasswordErrorContent=_this$validate.reconfirmPasswordErrorContent,reconfirmPasswordError=_this$validate.reconfirmPasswordError;_this.setState({newPasswordError:newPasswordError,newPasswordErrorContent:newPasswordErrorContent,oldPasswordErrorContent:oldPasswordErrorContent,oldPasswordError:oldPasswordError,reconfirmPasswordErrorContent:reconfirmPasswordErrorContent,reconfirmPasswordError:reconfirmPasswordError});if(newPasswordError===true||oldPasswordError===true||reconfirmPasswordError===true){return;}var params={path:'',param:{},data:{oldPassword:_this.state.oldPassword,password:_this.state.newPassword}};_this.props.changePassword(params);};_this.state={oldPassword:'',newPassword:'',reconfirmPassword:'',oldPasswordError:false,oldPasswordErrorContent:'',newPasswordError:false,reconfirmPasswordError:false,newPasswordErrorContent:'',reconfirmPasswordErrorContent:''};return _this;}_createClass(ChangePassword,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(ReduxBlockUi,{tag:\"div\",block:CHANGE_PASSWORD,unblock:[CHANGE_PASSWORD_SUCCESS,CHANGE_PASSWORD_FAILED]},/*#__PURE__*/React.createElement(\"div\",{className:\"Container-changePassword\"},/*#__PURE__*/React.createElement(\"div\",{className:\"Container-changePassword-middle\"},/*#__PURE__*/React.createElement(\"h2\",null,\"\\u0110\\u1ED5i m\\u1EADt kh\\u1EA9u\"),/*#__PURE__*/React.createElement(TextInput,{label:'Mật khẩu cũ',type:'password',onChangeText:this.onChangeOldPassword,error:this.state.oldPasswordError,errorContent:this.state.oldPasswordErrorContent}),/*#__PURE__*/React.createElement(TextInput,{label:'Mật khẩu mới',type:'password',onChangeText:this.onChangeNewPassword,error:this.state.newPasswordError,errorContent:this.state.newPasswordErrorContent}),/*#__PURE__*/React.createElement(TextInput,{label:'Xác nhận mật khẩu',type:'password',onChangeText:this.onChangeReconfirmPassword,error:this.state.reconfirmPasswordError,errorContent:this.state.reconfirmPasswordErrorContent}),/*#__PURE__*/React.createElement(\"div\",{className:\"Button-changePassword-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"Button-changePassword\",onClick:this.handleChangePassword},/*#__PURE__*/React.createElement(\"h4\",{className:\"Button-changePassword-text\"},\"\\u0110\\u1ED5i m\\u1EADt kh\\u1EA9u\"))))));}}]);return ChangePassword;}(React.Component);var mapStateToProps=function mapStateToProps(state){return{};};export default connect(mapStateToProps,{changePassword:changePassword})(ChangePassword);","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/screens/ChangePassword/index.tsx"],"names":["React","connect","ReduxBlockUi","TextInput","CHANGE_PASSWORD","CHANGE_PASSWORD_SUCCESS","CHANGE_PASSWORD_FAILED","changePassword","ChangePassword","props","onChangeOldPassword","value","setState","oldPassword","onChangeNewPassword","newPassword","onChangeReconfirmPassword","reconfirmPassword","validate","newPasswordError","newPasswordErrorContent","oldPasswordErrorContent","oldPasswordError","reconfirmPasswordErrorContent","reconfirmPasswordError","state","includes","trim","handleChangePassword","params","path","param","data","password","Component","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReduxBlockUi from 'react-block-ui/redux';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { CHANGE_PASSWORD } from 'redux-saga/actions';\r\nimport { CHANGE_PASSWORD_SUCCESS, CHANGE_PASSWORD_FAILED } from 'screens/ChangePassword/reducers';\r\nimport { changePassword } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IChangePasswordProps extends React.ClassAttributes<ChangePassword> {\r\n  changePassword(params: IBigRequest): void;\r\n}\r\n\r\ninterface IChangePasswordState {\r\n  oldPassword: string;\r\n  newPassword: string;\r\n  reconfirmPassword: string;\r\n  oldPasswordError: boolean;\r\n  newPasswordError: boolean;\r\n  reconfirmPasswordError: boolean;\r\n  oldPasswordErrorContent: string;\r\n  newPasswordErrorContent: string;\r\n  reconfirmPasswordErrorContent: string;\r\n}\r\n\r\nclass ChangePassword extends React.Component<IChangePasswordProps, IChangePasswordState> {\r\n  constructor(props: IChangePasswordProps) {\r\n    super(props);\r\n    this.state = {\r\n      oldPassword: '',\r\n      newPassword: '',\r\n      reconfirmPassword: '',\r\n      oldPasswordError: false,\r\n      oldPasswordErrorContent: '',\r\n      newPasswordError: false,\r\n      reconfirmPasswordError: false,\r\n      newPasswordErrorContent: '',\r\n      reconfirmPasswordErrorContent: '',\r\n    };\r\n  }\r\n\r\n  private onChangeOldPassword = (value: string) => {\r\n    this.setState({ oldPassword: value, });\r\n  }\r\n\r\n  private onChangeNewPassword = (value: string) => {\r\n    this.setState({ newPassword: value, });\r\n  }\r\n\r\n  private onChangeReconfirmPassword = (value: string) => {\r\n    this.setState({ reconfirmPassword: value, });\r\n  }\r\n\r\n  private validate = () => {\r\n    let newPasswordError = false;\r\n    let newPasswordErrorContent = '';\r\n    let oldPasswordErrorContent = '';\r\n    let oldPasswordError = false;\r\n    let reconfirmPasswordErrorContent = '';\r\n    let reconfirmPasswordError = false;\r\n    if (this.state.newPassword.includes(' ') || this.state.newPassword.trim() === '') {\r\n      newPasswordError = true;\r\n      newPasswordErrorContent = 'Mật khẩu không được trống, và không chứa dấu cách';\r\n    }\r\n    if (this.state.oldPassword.trim() === '' || this.state.oldPassword.includes(' ')) {\r\n      oldPasswordError = true;\r\n      oldPasswordErrorContent = 'Mật khẩu không được trống, và không chứa dấu cách';\r\n    }\r\n    if (newPasswordError !== true && oldPasswordError !== true && this.state.newPassword === this.state.oldPassword) {\r\n      newPasswordError = true;\r\n      newPasswordErrorContent = 'Mật khẩu mới không được giống mật khẩu cũ';\r\n    }\r\n    if (this.state.reconfirmPassword.trim() === '' || this.state.reconfirmPassword.includes(' ')) {\r\n      reconfirmPasswordError = true;\r\n      reconfirmPasswordErrorContent = 'Mật khẩu không được trống, và không chứa dấu cách';\r\n    } else if (this.state.reconfirmPassword !== this.state.newPassword && newPasswordError !== true) {\r\n      reconfirmPasswordError = true;\r\n      reconfirmPasswordErrorContent = 'Xác nhận mật khẩu không hợp lệ';\r\n    }\r\n\r\n    return { newPasswordError, newPasswordErrorContent, oldPasswordErrorContent, oldPasswordError, reconfirmPasswordErrorContent, reconfirmPasswordError };\r\n  }\r\n\r\n  private handleChangePassword = () => {\r\n    const { newPasswordError, newPasswordErrorContent, oldPasswordErrorContent, oldPasswordError, reconfirmPasswordErrorContent, reconfirmPasswordError } = this.validate();\r\n    this.setState({\r\n      newPasswordError,\r\n      newPasswordErrorContent,\r\n      oldPasswordErrorContent,\r\n      oldPasswordError,\r\n      reconfirmPasswordErrorContent,\r\n      reconfirmPasswordError\r\n    });\r\n    if (newPasswordError === true || oldPasswordError === true || reconfirmPasswordError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        oldPassword: this.state.oldPassword,\r\n        password: this.state.newPassword,\r\n      },\r\n    };\r\n\r\n    this.props.changePassword(params);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReduxBlockUi\r\n        tag=\"div\"\r\n        block={CHANGE_PASSWORD}\r\n        unblock={[CHANGE_PASSWORD_SUCCESS, CHANGE_PASSWORD_FAILED]}\r\n      >\r\n        <div className=\"Container-changePassword\">\r\n          <div className=\"Container-changePassword-middle\">\r\n            <h2>Đổi mật khẩu</h2>\r\n            <TextInput label={'Mật khẩu cũ'} type={'password'} onChangeText={this.onChangeOldPassword} error={this.state.oldPasswordError} errorContent={this.state.oldPasswordErrorContent} />\r\n            <TextInput label={'Mật khẩu mới'} type={'password'} onChangeText={this.onChangeNewPassword} error={this.state.newPasswordError} errorContent={this.state.newPasswordErrorContent} />\r\n            <TextInput label={'Xác nhận mật khẩu'} type={'password'} onChangeText={this.onChangeReconfirmPassword} error={this.state.reconfirmPasswordError} errorContent={this.state.reconfirmPasswordErrorContent} />\r\n            <div className=\"Button-changePassword-container\">\r\n              <div className=\"Button-changePassword\" onClick={this.handleChangePassword}>\r\n                <h4 className=\"Button-changePassword-text\">Đổi mật khẩu</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ReduxBlockUi>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    changePassword,\r\n  }\r\n)(ChangePassword);"]},"metadata":{},"sourceType":"module"}