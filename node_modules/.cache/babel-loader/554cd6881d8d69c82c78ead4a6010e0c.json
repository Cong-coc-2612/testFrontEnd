{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doLogin),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchLogin);import{call,takeLatest,put}from'redux-saga/effects';import{cookies}from'utils/cookies';import{query,METHOD}from'utils/socketApi';import{LOGIN,COMMON_SHOW_NOTIFICATION}from'redux-saga/actions';import{LOGIN_FAILED}from'screens/Login/reducers';import{COOKIES_TYPE}from'global';import history from\"utils/history\";var login=function login(data,path,param){var uri='login';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.POST,datas,params,paths);};function doLogin(request){var response,data;return _regeneratorRuntime.wrap(function doLogin$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(login,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;data=response.data.result;if(!(cookies.get(COOKIES_TYPE.AUTH_TOKEN)==null)){_context.next=26;break;}if(!(response.data.error.MessageCode===0)){_context.next=15;break;}_context.next=9;return put({type:request.response.success,payload:data.User});case 9:_context.next=11;return cookies.set(COOKIES_TYPE.AUTH_TOKEN,data,{path:'/'});case 11:_context.next=13;return history.push(\"/\");case 13:_context.next=24;break;case 15:if(!(response.data.error.Message==='User is not active')){_context.next=19;break;}throw new Error('Tài khoản này chưa được kích hoạt, xin hãy vào email của bạn để kích hoạt tài khoản. Nếu không thể kích hoạt, bấm VÀO ĐÂY để gửi lại mã');case 19:_context.next=21;return cookies.remove(COOKIES_TYPE.AUTH_TOKEN);case 21:_context.next=23;return put({type:LOGIN_FAILED});case 23:throw new Error(response.data.error.Message);case 24:_context.next=28;break;case 26:_context.next=28;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'Login',content:'Đã xảy ra lỗi, vui lòng tải lại trang',time:new Date()}});case 28:_context.next=36;break;case 30:_context.prev=30;_context.t0=_context[\"catch\"](0);_context.next=34;return put({type:request.response.failed});case 34:_context.next=36;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'Login',content:_context.t0,time:new Date()}});case 36:case\"end\":return _context.stop();}}},_marked,null,[[0,30]]);}export default function watchLogin(){return _regeneratorRuntime.wrap(function watchLogin$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(LOGIN,doLogin);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/Login/login.ts"],"names":["doLogin","watchLogin","call","takeLatest","put","cookies","query","METHOD","LOGIN","COMMON_SHOW_NOTIFICATION","LOGIN_FAILED","COOKIES_TYPE","history","login","data","path","param","uri","datas","paths","params","POST","request","response","result","get","AUTH_TOKEN","error","MessageCode","type","success","payload","User","set","push","Message","Error","remove","title","content","time","Date","failed"],"mappings":"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","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { cookies } from 'utils/cookies';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { LOGIN, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\nimport { LOGIN_FAILED } from 'screens/Login/reducers';\r\nimport { COOKIES_TYPE } from 'global';\r\nimport history from \"utils/history\";\r\n\r\n\r\nconst login = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'login';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doLogin(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(login, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (cookies.get(COOKIES_TYPE.AUTH_TOKEN) == null) {\r\n      if (response.data.error.MessageCode === 0) {\r\n        yield put({\r\n          type: request.response.success,\r\n          payload: data.User,\r\n        });\r\n        yield cookies.set(COOKIES_TYPE.AUTH_TOKEN, data, { path: '/' });\r\n        yield history.push(\"/\");\r\n      } else if (response.data.error.Message === 'User is not active') {\r\n        throw new Error('Tài khoản này chưa được kích hoạt, xin hãy vào email của bạn để kích hoạt tài khoản. Nếu không thể kích hoạt, bấm VÀO ĐÂY để gửi lại mã');\r\n      } else {\r\n        yield cookies.remove(COOKIES_TYPE.AUTH_TOKEN);\r\n        yield put({\r\n          type: LOGIN_FAILED,\r\n        });\r\n        throw new Error(response.data.error.Message);\r\n      }\r\n    } else {\r\n      yield put({\r\n        type: COMMON_SHOW_NOTIFICATION,\r\n        data: {\r\n          type: 'error',\r\n          title: 'Login',\r\n          content: 'Đã xảy ra lỗi, vui lòng tải lại trang',\r\n          time: new Date(),\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'Login',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchLogin() {\r\n  yield takeLatest(LOGIN, doLogin);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}