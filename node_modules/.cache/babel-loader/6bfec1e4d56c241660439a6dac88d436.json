{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doEditTeam),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchEditTeam);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{COMMON_SHOW_NOTIFICATION,EDIT_TEAM,QUERY_LIST_TEAM}from'redux-saga/actions';import{QUERY_LIST_TEAM_SUCCESS,QUERY_LIST_TEAM_FAILED}from'components/Teams/reducers';var editTeam=function editTeam(data,path,param){var uri='team';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.PUT,datas,params,paths);};function doEditTeam(request){var response,data;return _regeneratorRuntime.wrap(function doEditTeam$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(editTeam,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;data=response.data.result;if(!(response.data.error.MessageCode===0)){_context.next=12;break;}_context.next=8;return put({type:request.response.success,payload:data});case 8:_context.next=10;return put({type:QUERY_LIST_TEAM,response:{success:QUERY_LIST_TEAM_SUCCESS,failed:QUERY_LIST_TEAM_FAILED},data:{path:'',param:{competitionId:request.data.data.competitionId,limit:999},data:{}}});case 10:_context.next=13;break;case 12:throw new Error(response.data.error.Message);case 13:_context.next=21;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](0);_context.next=19;return put({type:request.response.failed});case 19:_context.next=21;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'EditTeam',content:_context.t0,time:new Date()}});case 21:case\"end\":return _context.stop();}}},_marked,null,[[0,15]]);}export default function watchEditTeam(){return _regeneratorRuntime.wrap(function watchEditTeam$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(EDIT_TEAM,doEditTeam);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/EditTeam/editTeam.ts"],"names":["doEditTeam","watchEditTeam","call","takeLatest","put","query","METHOD","COMMON_SHOW_NOTIFICATION","EDIT_TEAM","QUERY_LIST_TEAM","QUERY_LIST_TEAM_SUCCESS","QUERY_LIST_TEAM_FAILED","editTeam","data","path","param","uri","datas","paths","params","PUT","request","response","result","error","MessageCode","type","success","payload","failed","competitionId","limit","Error","Message","title","content","time","Date"],"mappings":"wXAeUA,U,iDA2CeC,a,EA1DzB,OAASC,IAAT,CAAeC,UAAf,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,iBAA9B,CAEA,OAASC,wBAAT,CAAmCC,SAAnC,CAA8CC,eAA9C,KAAqE,oBAArE,CACA,OAASC,uBAAT,CAAkCC,sBAAlC,KAAgE,2BAAhE,CAGA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,IAAD,CAAgBC,IAAhB,CAAuCC,KAAvC,CAA0D,CACzE,GAAMC,CAAAA,GAAG,CAAG,MAAZ,CACA,GAAMC,CAAAA,KAAK,kBAAQJ,IAAR,CAAX,CACA,GAAMK,CAAAA,KAAK,CAAGJ,IAAd,CACA,GAAMK,CAAAA,MAAM,kBAAQJ,KAAR,CAAZ,CACA,MAAOV,CAAAA,KAAK,CAACW,GAAD,CAAMV,MAAM,CAACc,GAAb,CAAkBH,KAAlB,CAAyBE,MAAzB,CAAiCD,KAAjC,CAAZ,CACD,CAND,CAQA,QAAUlB,CAAAA,UAAV,CAAqBqB,OAArB,uKAEqB,MAAMnB,CAAAA,IAAI,CAACU,QAAD,CAAWS,OAAO,CAACR,IAAR,CAAaA,IAAxB,CAA8BQ,OAAO,CAACR,IAAR,CAAaC,IAA3C,CAAiDO,OAAO,CAACR,IAAR,CAAaE,KAA9D,CAAV,CAFrB,OAEUO,QAFV,eAGUT,IAHV,CAGiBS,QAAQ,CAACT,IAAT,CAAcU,MAH/B,MAIQD,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBC,WAApB,GAAoC,CAJ5C,2CAKM,MAAMrB,CAAAA,GAAG,CAAC,CACRsB,IAAI,CAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf,CAERC,OAAO,CAAEf,IAFD,CAAD,CAAT,CALN,wBASM,MAAMT,CAAAA,GAAG,CAAC,CACRsB,IAAI,CAAEjB,eADE,CAERa,QAAQ,CAAE,CACRK,OAAO,CAAEjB,uBADD,CAERmB,MAAM,CAAElB,sBAFA,CAFF,CAMRE,IAAI,CAAE,CACJC,IAAI,CAAE,EADF,CAEJC,KAAK,CAAE,CACLe,aAAa,CAAET,OAAO,CAACR,IAAR,CAAaA,IAAb,CAAkBiB,aAD5B,CAELC,KAAK,CAAE,GAFF,CAFH,CAMJlB,IAAI,CAAE,EANF,CANE,CAAD,CAAT,CATN,4CAyBY,IAAImB,CAAAA,KAAJ,CAAUV,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBS,OAA9B,CAzBZ,2GA4BI,MAAM7B,CAAAA,GAAG,CAAC,CACRsB,IAAI,CAAEL,OAAO,CAACC,QAAR,CAAiBO,MADf,CAAD,CAAT,CA5BJ,yBA+BI,MAAMzB,CAAAA,GAAG,CAAC,CACRsB,IAAI,CAAEnB,wBADE,CAERM,IAAI,CAAE,CACJa,IAAI,CAAE,OADF,CAEJQ,KAAK,CAAE,UAFH,CAGJC,OAAO,YAHH,CAIJC,IAAI,CAAE,GAAIC,CAAAA,IAAJ,EAJF,CAFE,CAAD,CAAT,CA/BJ,qEA2CA,cAAe,SAAUpC,CAAAA,aAAV,6IACb,MAAME,CAAAA,UAAU,CAACK,SAAD,CAAYR,UAAZ,CAAhB,CADa","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, EDIT_TEAM, QUERY_LIST_TEAM } from 'redux-saga/actions';\r\nimport { QUERY_LIST_TEAM_SUCCESS, QUERY_LIST_TEAM_FAILED } from 'components/Teams/reducers';\r\n\r\n\r\nconst editTeam = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'team';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doEditTeam(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(editTeam, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: QUERY_LIST_TEAM,\r\n        response: {\r\n          success: QUERY_LIST_TEAM_SUCCESS,\r\n          failed: QUERY_LIST_TEAM_FAILED,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            competitionId: request.data.data.competitionId,\r\n            limit: 999,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'EditTeam',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchEditTeam() {\r\n  yield takeLatest(EDIT_TEAM, doEditTeam);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}