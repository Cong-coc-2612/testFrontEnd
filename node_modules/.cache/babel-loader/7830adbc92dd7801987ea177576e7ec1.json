{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doAddListTeamSelecting),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchQueryBracketBoardInfo);import{put,takeEvery}from'redux-saga/effects';import{SWAP_TWO_TEAM_IN_BRACKET_SUCCESS,SWAP_TWO_TEAM_IN_BRACKET_FAILED}from'components/BracketTeam/reducers';import{ADD_LIST_TEAM_SELECTING,SWAP_TWO_TEAM_IN_BRACKET,COMMON_SHOW_NOTIFICATION}from'redux-saga/actions';function doAddListTeamSelecting(request){return _regeneratorRuntime.wrap(function doAddListTeamSelecting$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return put({type:request.response.success,payload:request.data.listTeamId});case 3:if(!(request.data.listTeamId.length===2)){_context.next=6;break;}_context.next=6;return put({type:SWAP_TWO_TEAM_IN_BRACKET,response:{success:SWAP_TWO_TEAM_IN_BRACKET_SUCCESS,failed:SWAP_TWO_TEAM_IN_BRACKET_FAILED},data:{path:'',param:{team1Id:request.data.listTeamId[0],team2Id:request.data.listTeamId[1]},data:{competitionId:request.data.competitionId}}});case 6:_context.next=14;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);_context.next=12;return put({type:request.response.failed});case 12:_context.next=14;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'EditTournamentInfo',content:_context.t0,time:new Date()}});case 14:case\"end\":return _context.stop();}}},_marked,null,[[0,8]]);}export default function watchQueryBracketBoardInfo(){return _regeneratorRuntime.wrap(function watchQueryBracketBoardInfo$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(ADD_LIST_TEAM_SELECTING,doAddListTeamSelecting);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/AddListTeamSelecting/addListTeamSelecting.ts"],"names":["doAddListTeamSelecting","watchQueryBracketBoardInfo","put","takeEvery","SWAP_TWO_TEAM_IN_BRACKET_SUCCESS","SWAP_TWO_TEAM_IN_BRACKET_FAILED","ADD_LIST_TEAM_SELECTING","SWAP_TWO_TEAM_IN_BRACKET","COMMON_SHOW_NOTIFICATION","request","type","response","success","payload","data","listTeamId","length","failed","path","param","team1Id","team2Id","competitionId","title","content","time","Date"],"mappings":"iNAKUA,sB,iDAyCeC,0B,EA9CzB,OAASC,GAAT,CAAcC,SAAd,KAA+B,oBAA/B,CAEA,OAASC,gCAAT,CAA2CC,+BAA3C,KAAkF,iCAAlF,CACA,OAASC,uBAAT,CAAkCC,wBAAlC,CAA4DC,wBAA5D,KAA4F,oBAA5F,CAEA,QAAUR,CAAAA,sBAAV,CAAiCS,OAAjC,iKAEI,MAAMP,CAAAA,GAAG,CAAC,CACRQ,IAAI,CAAED,OAAO,CAACE,QAAR,CAAiBC,OADf,CAERC,OAAO,CAAEJ,OAAO,CAACK,IAAR,CAAaC,UAFd,CAAD,CAAT,CAFJ,YAMSN,OAAO,CAACK,IAAR,CAAaC,UAAd,CAAsCC,MAAtC,GAAiD,CANzD,0CAOM,MAAMd,CAAAA,GAAG,CAAC,CACRQ,IAAI,CAAEH,wBADE,CAERI,QAAQ,CAAE,CACRC,OAAO,CAAER,gCADD,CAERa,MAAM,CAAEZ,+BAFA,CAFF,CAMRS,IAAI,CAAE,CACJI,IAAI,CAAE,EADF,CAEJC,KAAK,CAAE,CACLC,OAAO,CAAGX,OAAO,CAACK,IAAR,CAAaC,UAAd,CAAsC,CAAtC,CADJ,CAELM,OAAO,CAAGZ,OAAO,CAACK,IAAR,CAAaC,UAAd,CAAsC,CAAtC,CAFJ,CAFH,CAMJD,IAAI,CAAE,CACJQ,aAAa,CAAEb,OAAO,CAACK,IAAR,CAAaQ,aADxB,CANF,CANE,CAAD,CAAT,CAPN,uGA0BI,MAAMpB,CAAAA,GAAG,CAAC,CACRQ,IAAI,CAAED,OAAO,CAACE,QAAR,CAAiBM,MADf,CAAD,CAAT,CA1BJ,yBA6BI,MAAMf,CAAAA,GAAG,CAAC,CACRQ,IAAI,CAAEF,wBADE,CAERM,IAAI,CAAE,CACJJ,IAAI,CAAE,OADF,CAEJa,KAAK,CAAE,oBAFH,CAGJC,OAAO,YAHH,CAIJC,IAAI,CAAE,GAAIC,CAAAA,IAAJ,EAJF,CAFE,CAAD,CAAT,CA7BJ,oEAyCA,cAAe,SAAUzB,CAAAA,0BAAV,0JACb,MAAME,CAAAA,SAAS,CAACG,uBAAD,CAA0BN,sBAA1B,CAAf,CADa","sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\r\nimport { IRequest, IParams } from 'interfaces/common';\r\nimport { SWAP_TWO_TEAM_IN_BRACKET_SUCCESS, SWAP_TWO_TEAM_IN_BRACKET_FAILED } from 'components/BracketTeam/reducers';\r\nimport { ADD_LIST_TEAM_SELECTING, SWAP_TWO_TEAM_IN_BRACKET, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\n\r\nfunction* doAddListTeamSelecting(request: IRequest<IParams>) {\r\n  try {\r\n    yield put({\r\n      type: request.response.success,\r\n      payload: request.data.listTeamId,\r\n    });\r\n    if ((request.data.listTeamId as number[]).length === 2) {\r\n      yield put({\r\n        type: SWAP_TWO_TEAM_IN_BRACKET,\r\n        response: {\r\n          success: SWAP_TWO_TEAM_IN_BRACKET_SUCCESS,\r\n          failed: SWAP_TWO_TEAM_IN_BRACKET_FAILED,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            team1Id: (request.data.listTeamId as number[])[0],\r\n            team2Id: (request.data.listTeamId as number[])[1],\r\n          },\r\n          data: {\r\n            competitionId: request.data.competitionId,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'EditTournamentInfo',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryBracketBoardInfo() {\r\n  yield takeEvery(ADD_LIST_TEAM_SELECTING, doAddListTeamSelecting);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}