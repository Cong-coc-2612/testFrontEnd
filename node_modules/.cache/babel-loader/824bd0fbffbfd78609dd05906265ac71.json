{"ast":null,"code":"import _classCallCheck from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import{connect}from'react-redux';import{MdDelete}from'react-icons/md';import'./styles.css';import{deleteCompetition}from'./actions';import{Link}from'react-router-dom';var CompetitionSettingCompetitionsItem=/*#__PURE__*/function(_React$Component){_inherits(CompetitionSettingCompetitionsItem,_React$Component);var _super=_createSuper(CompetitionSettingCompetitionsItem);function CompetitionSettingCompetitionsItem(props){var _this;_classCallCheck(this,CompetitionSettingCompetitionsItem);_this=_super.call(this,props);_this.onDeleteCompetition=function(event){event.stopPropagation();var confirm=window.confirm('Bạn có chắc chắn muốn xóa cuộc thi này?');if(confirm===true){var _params={path:'',param:{id:_this.props.info.id},data:{tournamentId:_this.props.tournamentId}};_this.props.deleteCompetition(_params);}};_this.state={// competitionFormatError: false,\n// competitionFormatErrorContent: '',\n// competitionSportError: false,\n// competitionSportErrorContent: '',\n// competitionName: this.props.info.name as string,\n// competitionNameError: false,\n// competitionNameErrorContent: '',\n// maxAmountTeamOfGroup: 0,\n// maxAmountTeamOfGroupError: false,\n// maxAmountTeamOfGroupErrorContent: '',\n// seeMoreInfo: false,\n// maxAmountOfTeamError: false,\n// maxAmountOfTeamErrorContent: '',\n// maxAmountMemberOfTeamError: false,\n// maxAmountMemberOfTeamErrorContent: '',\n// minAmountMemberOfTeamError: false,\n// minAmountMemberOfTeamErrorContent: '',\n// maxAmountOfTeam: 0,\n// maxAmountMemberOfTeam: 0,\n// minAmountMemberOfTeam: 0,\n// limitAmountOfTeamchecked: false,\n// onePhase: this.props.info.groupStage === false,\n// twoPhase: this.props.info.groupStage === true,\n};return _this;}_createClass(CompetitionSettingCompetitionsItem,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(nextProps,nextState){// if (this.props.info !== nextProps.info) {\n//   this.setState({\n//     onEditMode: false,\n//   });\n// }\nreturn true;}// private handleSeeMore = () => {\n//   if (this.state.onEditMode === true) {\n//     return;\n//   }\n//   this.setState({\n//     seeMoreInfo: !this.state.seeMoreInfo,\n//   });\n// }\n// private onChangeLimitAmountOfTeam = () => {\n//   this.setState({\n//     limitAmountOfTeamchecked: !this.state.limitAmountOfTeamchecked,\n//   });\n// };\n// private onChangeSport = (value: ValueType<OptionTypeBase>) => {\n//   this.setState({\n//     selectedSport: value,\n//   });\n// }\n// private onChangeCompetitionName = (value: string) => {\n//   this.setState({\n//     competitionName: value,\n//   });\n// }\n// private startEditMode = () => {\n//   this.setState({\n//     onEditMode: true,\n//   });\n// }\n// private handleConfirmModal = () => {\n// }\n// private validate = () => {\n//   let competitionNameError = false;\n//   let competitionNameErrorContent = '';\n//   let competitionFormatError = false;\n//   let competitionFormatErrorContent = '';\n//   let competitionSportError = false;\n//   let competitionSportErrorContent = '';\n//   if (this.state.competitionName.trim() === '') {\n//     competitionNameError = true;\n//     competitionNameErrorContent = 'Tên cuộc thi không được trống';\n//   }\n//   if (this.props.listCompetition!.filter((item) => item !== this.props.info).find(element => element.name === this.state.competitionName)) {\n//     competitionNameError = true;\n//     competitionNameErrorContent = 'Tên cuộc thi này đã tồn tại';\n//   }\n//   if (this.state.selectedCompetitionFormatPhase1 == null || (this.state.twoPhase && this.state.selectedCompetitionFormatPhase2 == null)) {\n//     competitionFormatError = true;\n//     competitionFormatErrorContent = 'Thể thức không được trống';\n//   }\n//   if (this.state.selectedSport == null) {\n//     competitionSportError = true;\n//     competitionSportErrorContent = 'Thể thức không được trống';\n//   }\n//   return { competitionNameError, competitionNameErrorContent, competitionFormatError, competitionFormatErrorContent, competitionSportError, competitionSportErrorContent };\n// }\n// private handleCloseModal = () => {\n//   this.setState({\n//     showModal: false,\n//   });\n// }\n},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionSettingCompetitionsItem-info-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionSettingCompetitionsItem-info-container-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionSettingCompetitionsItem-container\"},/*#__PURE__*/React.createElement(Link,{to:\"/competition/\".concat(this.props.info.id),style:{textDecoration:'none',color:'white'},target:'_blank'},/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionSettingCompetitionsItem-container-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionSettingCompetitionsItem-order-number-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionSettingCompetitionsItem-order-number-box\"},/*#__PURE__*/React.createElement(\"p\",null,this.props.index+1))),/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionSettingCompetitionsItem-team-name-container\"},/*#__PURE__*/React.createElement(\"p\",null,this.props.info.name))))),/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionSettingCompetitionsItem-team-setting-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"CompetitionSettingCompetitionsItem-team-setting-container-container\",onClick:this.onDeleteCompetition},/*#__PURE__*/React.createElement(MdDelete,{className:\"CompetitionSettingCompetitionsItem-team-setting-icon\"})))));}}]);return CompetitionSettingCompetitionsItem;}(React.Component);export default connect(null,{deleteCompetition:deleteCompetition})(CompetitionSettingCompetitionsItem);","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/components/CompetitionSettingCompetitionsItem/index.tsx"],"names":["React","connect","MdDelete","deleteCompetition","Link","CompetitionSettingCompetitionsItem","props","onDeleteCompetition","event","stopPropagation","confirm","window","params","path","param","id","info","data","tournamentId","state","nextProps","nextState","textDecoration","color","index","name","Component"],"mappings":"gpBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,QAAT,KAAyB,gBAAzB,CAEA,MAAO,cAAP,CACA,OAASC,iBAAT,KAAkC,WAAlC,CACA,OAASC,IAAT,KAAqB,kBAArB,C,GAsCMC,CAAAA,kC,oKACJ,4CAAYC,KAAZ,CAA6D,oEAC3D,uBAAMA,KAAN,EAD2D,MA2GrDC,mBA3GqD,CA2G/B,SAACC,KAAD,CAAyD,CACrFA,KAAK,CAACC,eAAN,GACA,GAAMC,CAAAA,OAAO,CAAGC,MAAM,CAACD,OAAP,CAAe,yCAAf,CAAhB,CACA,GAAIA,OAAO,GAAK,IAAhB,CAAsB,CACpB,GAAME,CAAAA,OAAM,CAAG,CACbC,IAAI,CAAE,EADO,CAEbC,KAAK,CAAE,CACLC,EAAE,CAAE,MAAKT,KAAL,CAAWU,IAAX,CAAgBD,EADf,CAFM,CAKbE,IAAI,CAAE,CACJC,YAAY,CAAE,MAAKZ,KAAL,CAAWY,YADrB,CALO,CAAf,CASA,MAAKZ,KAAL,CAAWH,iBAAX,CAA6BS,OAA7B,EACD,CACF,CA1H4D,CAE3D,MAAKO,KAAL,CAAa,CACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBW,CAAb,CAF2D,aA2B5D,C,mHAEqBC,S,CAAqDC,S,CAAqD,CAC9H;AACA;AACA;AACA;AACA;AACA,MAAO,KAAP,CACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;uCAmBS,CACP,mBACE,2BAAK,SAAS,CAAC,mDAAf,eACE,2BAAK,SAAS,CAAC,6DAAf,eACE,2BAAK,SAAS,CAAC,8CAAf,eACE,oBAAC,IAAD,EAAM,EAAE,wBAAkB,KAAKf,KAAL,CAAWU,IAAX,CAAgBD,EAAlC,CAAR,CAAgD,KAAK,CAAE,CAAEO,cAAc,CAAE,MAAlB,CAA0BC,KAAK,CAAE,OAAjC,CAAvD,CAAmG,MAAM,CAAE,QAA3G,eACE,2BAAK,SAAS,CAAC,wDAAf,eACE,2BAAK,SAAS,CAAC,2DAAf,eACE,2BAAK,SAAS,CAAC,qDAAf,eACE,6BAAI,KAAKjB,KAAL,CAAWkB,KAAX,CAAmB,CAAvB,CADF,CADF,CADF,cAME,2BAAK,SAAS,yDAAd,eACE,6BAAI,KAAKlB,KAAL,CAAWU,IAAX,CAAgBS,IAApB,CADF,CANF,CADF,CADF,CADF,cAeE,2BAAK,SAAS,CAAC,2DAAf,eACE,2BAAK,SAAS,CAAC,qEAAf,CAAqF,OAAO,CAAE,KAAKlB,mBAAnG,eACE,oBAAC,QAAD,EAAU,SAAS,CAAC,sDAApB,EADF,CADF,CAfF,CADF,CADF,CAkCD,C,gDAhK8CP,KAAK,CAAC0B,S,EAmKvD,cAAezB,CAAAA,OAAO,CACpB,IADoB,CAEpB,CAAEE,iBAAiB,CAAjBA,iBAAF,CAFoB,CAAP,CAGbE,kCAHa,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { MdDelete } from 'react-icons/md';\r\nimport { IParams, IBigRequest } from 'interfaces/common';\r\nimport './styles.css';\r\nimport { deleteCompetition } from './actions';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface ICompetitionSettingCompetitionsItemProps extends React.ClassAttributes<CompetitionSettingCompetitionsItem> {\r\n  info: IParams;\r\n  index: number;\r\n  listCompetition: IParams[] | null;\r\n  tournamentId: number;\r\n  tournamentInfo: IParams | null;\r\n\r\n  deleteCompetition(params: IBigRequest): void;\r\n}\r\n\r\ninterface ICompetitionSettingCompetitionsItemState {\r\n  // seeMoreInfo: boolean;\r\n  // maxAmountOfTeam: number;\r\n  // maxAmountOfTeamError: boolean;\r\n  // maxAmountOfTeamErrorContent: string;\r\n  // competitionName: string;\r\n  // competitionNameError: boolean;\r\n  // competitionNameErrorContent: string;\r\n  // maxAmountMemberOfTeam: number;\r\n  // minAmountMemberOfTeam: number;\r\n  // minAmountMemberOfTeamError: boolean;\r\n  // maxAmountMemberOfTeamError: boolean;\r\n  // maxAmountMemberOfTeamErrorContent: string;\r\n  // minAmountMemberOfTeamErrorContent: string;\r\n  // maxAmountTeamOfGroup: number;\r\n  // maxAmountTeamOfGroupError: boolean;\r\n  // maxAmountTeamOfGroupErrorContent: string;\r\n  // limitAmountOfTeamchecked: boolean;\r\n  // onePhase: boolean;\r\n  // twoPhase: boolean;\r\n  // competitionFormatError: boolean;\r\n  // competitionFormatErrorContent: string;\r\n  // competitionSportError: boolean;\r\n  // competitionSportErrorContent: string;\r\n}\r\n\r\nclass CompetitionSettingCompetitionsItem extends React.Component<ICompetitionSettingCompetitionsItemProps, ICompetitionSettingCompetitionsItemState> {\r\n  constructor(props: ICompetitionSettingCompetitionsItemProps) {\r\n    super(props);\r\n    this.state = {\r\n      // competitionFormatError: false,\r\n      // competitionFormatErrorContent: '',\r\n      // competitionSportError: false,\r\n      // competitionSportErrorContent: '',\r\n      // competitionName: this.props.info.name as string,\r\n      // competitionNameError: false,\r\n      // competitionNameErrorContent: '',\r\n      // maxAmountTeamOfGroup: 0,\r\n      // maxAmountTeamOfGroupError: false,\r\n      // maxAmountTeamOfGroupErrorContent: '',\r\n      // seeMoreInfo: false,\r\n      // maxAmountOfTeamError: false,\r\n      // maxAmountOfTeamErrorContent: '',\r\n      // maxAmountMemberOfTeamError: false,\r\n      // maxAmountMemberOfTeamErrorContent: '',\r\n      // minAmountMemberOfTeamError: false,\r\n      // minAmountMemberOfTeamErrorContent: '',\r\n      // maxAmountOfTeam: 0,\r\n      // maxAmountMemberOfTeam: 0,\r\n      // minAmountMemberOfTeam: 0,\r\n      // limitAmountOfTeamchecked: false,\r\n      // onePhase: this.props.info.groupStage === false,\r\n      // twoPhase: this.props.info.groupStage === true,\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: ICompetitionSettingCompetitionsItemProps, nextState: ICompetitionSettingCompetitionsItemState) {\r\n    // if (this.props.info !== nextProps.info) {\r\n    //   this.setState({\r\n    //     onEditMode: false,\r\n    //   });\r\n    // }\r\n    return true;\r\n  }\r\n\r\n  // private handleSeeMore = () => {\r\n  //   if (this.state.onEditMode === true) {\r\n  //     return;\r\n  //   }\r\n  //   this.setState({\r\n  //     seeMoreInfo: !this.state.seeMoreInfo,\r\n  //   });\r\n  // }\r\n\r\n  // private onChangeLimitAmountOfTeam = () => {\r\n  //   this.setState({\r\n  //     limitAmountOfTeamchecked: !this.state.limitAmountOfTeamchecked,\r\n  //   });\r\n  // };\r\n\r\n  // private onChangeSport = (value: ValueType<OptionTypeBase>) => {\r\n  //   this.setState({\r\n  //     selectedSport: value,\r\n  //   });\r\n  // }\r\n\r\n  // private onChangeCompetitionName = (value: string) => {\r\n  //   this.setState({\r\n  //     competitionName: value,\r\n  //   });\r\n  // }\r\n\r\n  // private startEditMode = () => {\r\n  //   this.setState({\r\n  //     onEditMode: true,\r\n  //   });\r\n  // }\r\n\r\n  // private handleConfirmModal = () => {\r\n  // }\r\n\r\n  // private validate = () => {\r\n  //   let competitionNameError = false;\r\n  //   let competitionNameErrorContent = '';\r\n  //   let competitionFormatError = false;\r\n  //   let competitionFormatErrorContent = '';\r\n  //   let competitionSportError = false;\r\n  //   let competitionSportErrorContent = '';\r\n  //   if (this.state.competitionName.trim() === '') {\r\n  //     competitionNameError = true;\r\n  //     competitionNameErrorContent = 'Tên cuộc thi không được trống';\r\n  //   }\r\n  //   if (this.props.listCompetition!.filter((item) => item !== this.props.info).find(element => element.name === this.state.competitionName)) {\r\n  //     competitionNameError = true;\r\n  //     competitionNameErrorContent = 'Tên cuộc thi này đã tồn tại';\r\n  //   }\r\n  //   if (this.state.selectedCompetitionFormatPhase1 == null || (this.state.twoPhase && this.state.selectedCompetitionFormatPhase2 == null)) {\r\n  //     competitionFormatError = true;\r\n  //     competitionFormatErrorContent = 'Thể thức không được trống';\r\n  //   }\r\n  //   if (this.state.selectedSport == null) {\r\n  //     competitionSportError = true;\r\n  //     competitionSportErrorContent = 'Thể thức không được trống';\r\n  //   }\r\n\r\n  //   return { competitionNameError, competitionNameErrorContent, competitionFormatError, competitionFormatErrorContent, competitionSportError, competitionSportErrorContent };\r\n  // }\r\n\r\n  // private handleCloseModal = () => {\r\n  //   this.setState({\r\n  //     showModal: false,\r\n  //   });\r\n  // }\r\n\r\n  private onDeleteCompetition = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    event.stopPropagation();\r\n    const confirm = window.confirm('Bạn có chắc chắn muốn xóa cuộc thi này?');\r\n    if (confirm === true) {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          id: this.props.info.id,\r\n        },\r\n        data: {\r\n          tournamentId: this.props.tournamentId,\r\n        },\r\n      }\r\n      this.props.deleteCompetition(params);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CompetitionSettingCompetitionsItem-info-container\">\r\n        <div className=\"CompetitionSettingCompetitionsItem-info-container-container\">\r\n          <div className=\"CompetitionSettingCompetitionsItem-container\">\r\n            <Link to={`/competition/${this.props.info.id}`} style={{ textDecoration: 'none', color: 'white' }} target={'_blank'} >\r\n              <div className=\"CompetitionSettingCompetitionsItem-container-container\">\r\n                <div className=\"CompetitionSettingCompetitionsItem-order-number-container\">\r\n                  <div className=\"CompetitionSettingCompetitionsItem-order-number-box\">\r\n                    <p>{this.props.index + 1}</p>\r\n                  </div>\r\n                </div>\r\n                <div className={`CompetitionSettingCompetitionsItem-team-name-container`}>\r\n                  <p>{this.props.info.name}</p>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n          <div className=\"CompetitionSettingCompetitionsItem-team-setting-container\">\r\n            <div className=\"CompetitionSettingCompetitionsItem-team-setting-container-container\" onClick={this.onDeleteCompetition}>\r\n              <MdDelete className=\"CompetitionSettingCompetitionsItem-team-setting-icon\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* <CustomModal\r\n          customStyles={customStyles}\r\n          handleCloseModal={this.handleCloseModal}\r\n          showModal={this.state.showModal}\r\n          handleConfirmModal={this.handleConfirmModal}\r\n          confirmButtonVisible={false}\r\n        >\r\n          <Teams competitionInfo={this.props.info} tournamentInfo={this.props.tournamentInfo} id={this.props.info.id as number} type={'competition'} />\r\n        </CustomModal> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { deleteCompetition, }\r\n)(CompetitionSettingCompetitionsItem);"]},"metadata":{},"sourceType":"module"}