{"ast":null,"code":"import _classCallCheck from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import{connect}from'react-redux';import{IoMdAddCircleOutline}from'react-icons/io';import ReduxBlockUi from'react-block-ui/redux';import Select from'react-select';import Skeleton from'react-loading-skeleton';import{AiFillCamera}from'react-icons/ai';import CustomTab from'components/CustomTab';import CustomModal from'components/CustomModal';import TournamentListTeam from'components/TournamentListTeam';import TournamentSetting from'components/TournamentSetting';import CompetitionsSetting from'components/CompetitionsSetting';import Player from'components/Player';import TextInput from'components/TextInput';import{COOKIES_TYPE}from'global';import{cookies}from'utils/cookies';import{formatDateToDisplay}from'utils/datetime';import config from'config';import{onEditBracketMode,deleteListSelectingTeam}from'components/BracketTeam/actions';import{queryAllCompetitionsByTournamentId}from'components/CompetitionsSetting/actions';import{updateBackgroundTournament,updateAvatarTournament,queryTournamentInfo,querySportsByTournament,finishTournament,queryCompetitionsBySportAndTournament,startTournament}from'./actions';import{START_TOURNAMENT,FINISH_TOURNAMENT}from'redux-saga/actions';import{START_TOURNAMENT_SUCCESS,START_TOURNAMENT_FAILED,FINISH_TOURNAMENT_SUCCESS,FINISH_TOURNAMENT_FAILED}from'./reducers';import'./styles.css';var allCompetitionOptions=[];var customStyles={content:{top:'5%',left:'15%',right:'15%',bottom:'5%',backgroundColor:'#2b303d',display:'flex',flexDirection:'column'},overlay:{zIndex:100001}};var genderOptions=[{value:true,label:'Nam'},{value:false,label:'Nữ'}];var TournamentInfo=/*#__PURE__*/function(_React$Component){_inherits(TournamentInfo,_React$Component);var _super=_createSuper(TournamentInfo);function TournamentInfo(props){var _this;_classCallCheck(this,TournamentInfo);_this=_super.call(this,props);_this.tabList=[];_this.componentList=[];_this.requestData=function(){var params={path:'',param:{id:Number(_this.props.routerInfo.match.params.tournamentId)},data:{}};_this.props.queryTournamentInfo(params);params={path:'',param:{tournamentId:Number(_this.props.routerInfo.match.params.tournamentId),limit:99},data:{}};_this.props.queryAllCompetitionsByTournamentId(params);};_this.onChangeCompetitionSetting=function(){_this.setState({selectedCompetitionInForm:null});};_this.onChangeSelectedCompetitionInForm=function(value){_this.setState({selectedCompetitionInForm:value});};_this.updateBackground=function(selectorFiles){if(selectorFiles!==null&&selectorFiles.length>0){var params={path:'',param:{id:Number(_this.props.routerInfo.match.params.tournamentId),file:selectorFiles},data:{}};_this.props.updateBackgroundTournament(params);}};_this.updateAvatar=function(selectorFiles){if(selectorFiles!==null&&selectorFiles.length>0){var params={path:'',param:{id:Number(_this.props.routerInfo.match.params.tournamentId),file:selectorFiles},data:{}};_this.props.updateAvatarTournament(params);}};_this.handleStartTournament=function(){var confirm=window.confirm('Khi bắt đầu giải bạn sẽ không thể thay đổi thông tin các cuộc thi và các đội nữa, bạn có chắc chắn?');if(confirm===true){var params={path:'',param:{id:Number(_this.props.routerInfo.match.params.tournamentId)},data:{}};_this.props.startTournament(params);}};_this.handleJoinTournament=function(){_this.setState({showJoinModal:true});};_this.handleCloseModal=function(){var confirm=window.confirm('Bạn có chắc chắn muốn hủy form đăng ký?');if(confirm===true){_this.setState({showJoinModal:false});}};_this.validateForm=function(){var selectedCompetitionInFormError=false;var selectedCompetitionInFormErrorContent='';var teamNameInFormError=false;var teamNameInFormErrorContent='';var teamShortNameInFormErrorContent='';var teamShortNameInFormError=false;if(_this.state.selectedCompetitionInForm==null){selectedCompetitionInFormError=true;selectedCompetitionInFormErrorContent='Bạn phải chọn giải đấu muốn tham gia';}if(_this.state.teamNameInForm.trim()===''){teamNameInFormError=true;teamNameInFormErrorContent='Tên đội không được trống';}if(_this.state.teamShortNameInForm.trim()===''){teamShortNameInFormError=true;teamShortNameInFormErrorContent='Tên ngắn đội không được trống';}return{selectedCompetitionInFormError:selectedCompetitionInFormError,selectedCompetitionInFormErrorContent:selectedCompetitionInFormErrorContent,teamNameInFormError:teamNameInFormError,teamNameInFormErrorContent:teamNameInFormErrorContent,teamShortNameInFormError:teamShortNameInFormError,teamShortNameInFormErrorContent:teamShortNameInFormErrorContent};};_this.validateAddPlayer=function(){var playerEmailInFormErrorContent='';var playerEmailInFormError=false;var playerNameInFormErrorContent='';var playerNameInFormError=false;if(_this.state.playerNameInForm.trim()===''){playerNameInFormError=true;playerNameInFormErrorContent='Tên người chơi không được trống';}if(!config.regex.email.test(_this.state.playerEmailInForm)){playerEmailInFormError=true;playerEmailInFormErrorContent='Email không hợp lệ';}return{playerEmailInFormError:playerEmailInFormError,playerEmailInFormErrorContent:playerEmailInFormErrorContent,playerNameInFormErrorContent:playerNameInFormErrorContent,playerNameInFormError:playerNameInFormError};};_this.handleConfirmModal=function(){var _this$validateForm=_this.validateForm(),selectedCompetitionInFormError=_this$validateForm.selectedCompetitionInFormError,selectedCompetitionInFormErrorContent=_this$validateForm.selectedCompetitionInFormErrorContent,teamNameInFormError=_this$validateForm.teamNameInFormError,teamNameInFormErrorContent=_this$validateForm.teamNameInFormErrorContent,teamShortNameInFormError=_this$validateForm.teamShortNameInFormError,teamShortNameInFormErrorContent=_this$validateForm.teamShortNameInFormErrorContent;_this.setState({selectedCompetitionInFormError:selectedCompetitionInFormError,selectedCompetitionInFormErrorContent:selectedCompetitionInFormErrorContent,teamNameInFormError:teamNameInFormError,teamNameInFormErrorContent:teamNameInFormErrorContent,teamShortNameInFormError:teamShortNameInFormError,teamShortNameInFormErrorContent:teamShortNameInFormErrorContent});if(teamNameInFormError===true||selectedCompetitionInFormError===true||teamShortNameInFormError===true){return;}var params={path:'',param:{},data:{competitionId:_this.state.selectedCompetitionInForm.value,TeamDTO:{fullName:_this.state.teamNameInForm,shortName:_this.state.teamShortNameInForm},ListPlayer:_this.state.listPlayerInForm}};// this.props.registTeam(params);\n};_this.handleFinishTournament=function(){var confirm=window.confirm('Khi Kết thúc giải đồng nghĩa với việc tất cả các cuộc thi cũng sẽ kết thúc, bạn có chắc chắn?');if(confirm===true){var params={path:'',param:{id:Number(_this.props.routerInfo.match.params.tournamentId)},data:{}};_this.props.finishTournament(params);}};_this.onChangeTeamNameInForm=function(value){_this.setState({teamNameInForm:value});};_this.onChangeTeamShortNameInForm=function(value){_this.setState({teamShortNameInForm:value});};_this.onDeletePlayer=function(indexx){_this.setState({listPlayerInForm:_this.state.listPlayerInForm.filter(function(item,index){return index!==indexx;})});};_this.onChangePlayerNameInForm=function(value){_this.setState({playerNameInForm:value.target.value});};_this.onChangePlayerEmailInForm=function(value){_this.setState({playerEmailInForm:value.target.value});};_this.onChangePlayerGenderInForm=function(value){_this.setState({playerGenderInForm:value});};_this.addPlayer=function(){var _this$validateAddPlay=_this.validateAddPlayer(),playerEmailInFormError=_this$validateAddPlay.playerEmailInFormError,playerEmailInFormErrorContent=_this$validateAddPlay.playerEmailInFormErrorContent,playerNameInFormErrorContent=_this$validateAddPlay.playerNameInFormErrorContent,playerNameInFormError=_this$validateAddPlay.playerNameInFormError;_this.setState({playerEmailInFormError:playerEmailInFormError,playerEmailInFormErrorContent:playerEmailInFormErrorContent,playerNameInFormErrorContent:playerNameInFormErrorContent,playerNameInFormError:playerNameInFormError});if(playerNameInFormError===true||playerEmailInFormError===true){return;}var listTemp=_this.state.listPlayerInForm;listTemp.push({name:_this.state.playerNameInForm,age:_this.state.playerAgeInForm,email:_this.state.playerEmailInForm,gender:_this.state.playerGenderInForm.label});_this.setState({listPlayerInForm:listTemp,playerNameInForm:'',playerAgeInForm:0,playerEmailInForm:'',playerGenderInForm:{value:true,label:'Nam'}});};_this.onChangePlayerAgeInForm=function(value){var tempValue=0;if(!isNaN(value.target.value)){tempValue=Number(value.target.value);}else{tempValue=0;}_this.setState({playerAgeInForm:tempValue});};_this.state={selectedCompetitionInForm:null,showJoinModal:false,teamNameInForm:'',playerEmailInForm:'',teamNameInFormError:false,teamNameInFormErrorContent:'',playerNameInForm:'',playerAgeInForm:0,playerGenderInForm:{value:true,label:'Nam'},selectedCompetitionInFormError:false,selectedCompetitionInFormErrorContent:'',playerEmailInFormError:false,playerEmailInFormErrorContent:'',playerNameInFormError:false,playerNameInFormErrorContent:'',teamShortNameInForm:'',teamShortNameInFormError:false,teamShortNameInFormErrorContent:'',listPlayerInForm:[{name:'Phan Trọng Nhân',gender:'Nam',age:23,email:'caulamgithelol.lmht@gmail.com'}]};return _this;}_createClass(TournamentInfo,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(nextProps,nextState){if(this.props.tournamentInfo!==nextProps.tournamentInfo){// if (nextProps.tournamentInfo == null || nextProps.tournamentInfo.Tournament == null) {\n//   this.tabList = [];\n//   this.componentList = [];\n// } else if (nextState.selectedCompetition != null) {\n//   if (nextProps.tournamentInfo != null && (nextProps.tournamentInfo as IParams).Config != null && ((nextProps.tournamentInfo as IParams).Config as IParams).canEdit === true) {\n//     this.tabList = ['Nhánh thi đấu', 'Lịch thi đấu', 'Bảng xếp hạng', 'Thông tin', 'Danh sách các đội', 'Cài đặt', 'Các cuộc thi trong giải'];\n//     this.componentList = [<BracketBoard competitionId={(nextState.selectedCompetition as IParams).value as number} />, <BracketSchedule competitionId={(nextState.selectedCompetition as IParams).value as number} />, <BracketRank />, <div />, <TournamentListTeam id={Number(this.props.routerInfo.match.params.tournamentId)} />, <TournamentSetting tournamentInfo={nextProps.tournamentInfo.Tournament as IParams} tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} />, <CompetitionsSetting tournamentInfo={nextProps.tournamentInfo as IParams} tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} onChangeCompetitionSetting={this.onChangeCompetitionSetting} />];\n//   } else {\n//     this.tabList = ['Nhánh thi đấu', 'Lịch thi đấu', 'Bảng xếp hạng', 'Thông tin', 'Danh sách các đội'];\n//     this.componentList = [<BracketBoard competitionId={(nextState.selectedCompetition as IParams).value as number} />, <BracketSchedule competitionId={(nextState.selectedCompetition as IParams).value as number} />, <BracketRank />, <div />, <TournamentListTeam id={Number(this.props.routerInfo.match.params.tournamentId)} />];\n//   }\n// } else {\n//   if (nextProps.tournamentInfo != null && (nextProps.tournamentInfo as IParams).Config != null && ((nextProps.tournamentInfo as IParams).Config as IParams).canEdit === true) {\n//     this.tabList = ['Cài đặt', 'Các cuộc thi trong giải'];\n//     this.componentList = [<TournamentSetting tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} tournamentInfo={nextProps.tournamentInfo.Tournament as IParams} />, <CompetitionsSetting tournamentInfo={nextProps.tournamentInfo.Tournament as IParams} tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} onChangeCompetitionSetting={this.onChangeCompetitionSetting} />];\n//   } else {\n//     this.tabList = [];\n//     this.componentList = [];\n//   }\n// }\nthis.tabList=[];this.componentList=[];if(nextProps.tournamentInfo!=null){if(nextProps.tournamentInfo.Config!=null&&nextProps.tournamentInfo.Config.canEdit===true){this.tabList=['Các cuộc thi trong giải','Các đội tham gia giải','Cài đặt'];this.componentList=[/*#__PURE__*/React.createElement(CompetitionsSetting,{tournamentInfo:nextProps.tournamentInfo.Tournament,tournamentId:Number(this.props.routerInfo.match.params.tournamentId),onChangeCompetitionSetting:this.onChangeCompetitionSetting}),/*#__PURE__*/React.createElement(TournamentListTeam,{id:Number(this.props.routerInfo.match.params.tournamentId)}),/*#__PURE__*/React.createElement(TournamentSetting,{tournamentId:Number(this.props.routerInfo.match.params.tournamentId),tournamentInfo:nextProps.tournamentInfo.Tournament})];}else{this.tabList=['Các cuộc thi trong giải','Các đội tham gia giải'];this.componentList=[/*#__PURE__*/React.createElement(CompetitionsSetting,{tournamentInfo:nextProps.tournamentInfo.Tournament,tournamentId:Number(this.props.routerInfo.match.params.tournamentId),onChangeCompetitionSetting:this.onChangeCompetitionSetting}),/*#__PURE__*/React.createElement(TournamentListTeam,{id:Number(this.props.routerInfo.match.params.tournamentId)})];}}}// if (this.state.selectedSport !== nextState.selectedSport || this.state.selectedCompetition !== nextState.selectedCompetition) {\n//   this.props.onEditBracketMode(false);\n//   this.props.deleteListSelectingTeam();\n// }\n// if (this.props.listSportsByTournament !== nextProps.listSportsByTournament) {\n//   sportOptions = [];\n//   if (nextProps.listSportsByTournament != null) {\n//     nextProps.listSportsByTournament.map((item, index) => sportOptions.push({ value: item.id, label: item.fullName }));\n//   }\n//   sportOptions.unshift({\n//     value: null, label: '(Tất cả)',\n//   });\n// }\n// if (this.props.listCompetitionsBySportAndTournament !== nextProps.listCompetitionsBySportAndTournament) {\n//   competitionOptions = [];\n//   if (nextProps.listCompetitionsBySportAndTournament != null) {\n//     nextProps.listCompetitionsBySportAndTournament.map((item, index) => competitionOptions.push({ value: item.id, label: item.name }));\n//   }\n// }\nif(this.props.allCompetitionByTournamentId!==nextProps.allCompetitionByTournamentId){allCompetitionOptions=[];if(nextProps.allCompetitionByTournamentId!=null){nextProps.allCompetitionByTournamentId.map(function(item,index){return allCompetitionOptions.push({value:item.id,label:item.name});});}}// if (this.state.selectedSport !== nextState.selectedSport && nextState.selectedSport != null) {\n//   competitionOptions = [];\n//   this.setState({\n//     selectedCompetition: null,\n//   });\n//   const params = {\n//     path: '',\n//     param: {\n//       tournamentId: Number(this.props.routerInfo.match.params.tournamentId),\n//       sportId: (nextState.selectedSport as IParams).value,\n//     },\n//     data: {},\n//   };\n//   this.props.queryCompetitionsBySportAndTournament(params);\n// }\nreturn true;}},{key:\"componentDidMount\",value:function componentDidMount(){this.requestData();}},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(ReduxBlockUi,{tag:\"div\",block:START_TOURNAMENT,unblock:[START_TOURNAMENT_SUCCESS,START_TOURNAMENT_FAILED]},/*#__PURE__*/React.createElement(ReduxBlockUi,{tag:\"div\",block:FINISH_TOURNAMENT,unblock:[FINISH_TOURNAMENT_SUCCESS,FINISH_TOURNAMENT_FAILED]},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-Container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-background-image-container\"},/*#__PURE__*/React.createElement(\"img\",{className:'TournamentInfo-background-image',src:require('../../assets/38155584462_74d5f1cc1d_b.jpg'),alt:'logo'}),this.props.tournamentInfo!=null&&this.props.tournamentInfo.Config!=null&&this.props.tournamentInfo.Config.canEdit===true&&/*#__PURE__*/React.createElement(AiFillCamera,{className:'TournamentInfo-change-image-icon'}),this.props.tournamentInfo!=null&&this.props.tournamentInfo.Config!=null&&this.props.tournamentInfo.Config.canEdit===true&&/*#__PURE__*/React.createElement(\"div\",{className:'TournamentInfo-Overlay'},/*#__PURE__*/React.createElement(\"input\",{type:\"file\",onChange:function onChange(e){return _this2.updateBackground(e.target.files);}}))),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-content-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-content-info-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-content-info-basic-info-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-content-info-basic-info-container-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-content-info-basic-info-container-singleRow\"},/*#__PURE__*/React.createElement(\"p\",{className:\"TournamentInfo-name-text\"},this.props.tournamentInfo!=null&&this.props.tournamentInfo.Tournament?this.props.tournamentInfo.Tournament.fullName:/*#__PURE__*/React.createElement(Skeleton,{width:400,height:30}))),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-content-info-basic-info-container-singleRow\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-info-item\"},/*#__PURE__*/React.createElement(\"p\",null,this.props.tournamentInfo!=null&&this.props.tournamentInfo.Tournament?\"T\\xEAn ng\\u1EAFn: \".concat(this.props.tournamentInfo.Tournament.shortName):/*#__PURE__*/React.createElement(Skeleton,{width:200,height:20})))),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-content-info-basic-info-container-singleRow\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-info-item\"},/*#__PURE__*/React.createElement(\"p\",null,this.props.tournamentInfo!=null&&this.props.tournamentInfo.Tournament?\"Nh\\xE0 t\\xE0i tr\\u1EE3: \".concat(this.props.tournamentInfo.Tournament.donor):/*#__PURE__*/React.createElement(Skeleton,{width:250,height:20}))),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-info-item\"},/*#__PURE__*/React.createElement(\"p\",null,this.props.tournamentInfo!=null&&this.props.tournamentInfo.Tournament?\"Tr\\u1EA1ng th\\xE1i: \".concat(this.props.tournamentInfo.Tournament.status==='processing'?'Đang diễn ra':this.props.tournamentInfo.status==null?'Chưa diễn ra':'Đã kết thúc'):/*#__PURE__*/React.createElement(Skeleton,{width:225,height:20})))),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-content-info-basic-info-container-singleRow\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-info-item\"},/*#__PURE__*/React.createElement(\"p\",null,this.props.tournamentInfo!=null&&this.props.tournamentInfo.Tournament?\"Ng\\xE0y b\\u1EAFt \\u0111\\u1EA7u: \".concat(formatDateToDisplay(this.props.tournamentInfo.Tournament.openingTime,'dd/MM/yyyy','yyyy-MM-dd')):/*#__PURE__*/React.createElement(Skeleton,{width:250,height:20}))),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-info-item\"},/*#__PURE__*/React.createElement(\"p\",null,this.props.tournamentInfo!=null&&this.props.tournamentInfo.Tournament?\"\\u0110\\u1ECBa \\u0111i\\u1EC3m khai m\\u1EA1c: \".concat(this.props.tournamentInfo.Tournament.openingLocation):/*#__PURE__*/React.createElement(Skeleton,{width:275,height:20})))),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-content-info-basic-info-container-singleRow\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-info-item\"},/*#__PURE__*/React.createElement(\"p\",null,this.props.tournamentInfo!=null&&this.props.tournamentInfo.Tournament?\"Ng\\xE0y k\\u1EBFt th\\xFAc: \".concat(formatDateToDisplay(this.props.tournamentInfo.Tournament.closingTime,'dd/MM/yyyy','yyyy-MM-dd')):/*#__PURE__*/React.createElement(Skeleton,{width:250,height:20}))),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-info-item\"},/*#__PURE__*/React.createElement(\"p\",null,this.props.tournamentInfo!=null&&this.props.tournamentInfo.Tournament?\"\\u0110\\u1ECBa \\u0111i\\u1EC3m b\\u1EBF m\\u1EA1c: \".concat(this.props.tournamentInfo.Tournament.closingLocation):/*#__PURE__*/React.createElement(Skeleton,{width:275,height:20})))),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-content-info-basic-info-container-singleRow\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-info-item\"},/*#__PURE__*/React.createElement(\"p\",null,this.props.tournamentInfo!=null&&this.props.tournamentInfo.Tournament?\"M\\xF4 t\\u1EA3: \".concat(this.props.tournamentInfo.Tournament.description):/*#__PURE__*/React.createElement(Skeleton,{width:300,height:20}))))),/*#__PURE__*/React.createElement(\"img\",{className:'TournamentInfo-avatar-image',src:require('../../assets/7ab1b0125d485c8dd6a4e78832b0a4b2fbed3cf8.png'),alt:'logo'}),this.props.tournamentInfo!=null&&this.props.tournamentInfo.Config!=null&&this.props.tournamentInfo.Config.canEdit===true&&/*#__PURE__*/React.createElement(AiFillCamera,{className:'TournamentInfo-change-avatar-icon'}),this.props.tournamentInfo!=null&&this.props.tournamentInfo.Config!=null&&this.props.tournamentInfo.Config.canEdit===true&&/*#__PURE__*/React.createElement(\"div\",{className:'TournamentInfo-Overlay2'},/*#__PURE__*/React.createElement(\"input\",{type:\"file\",onChange:function onChange(e){return _this2.updateAvatar(e.target.files);}}))),this.props.tournamentInfo!=null&&this.props.tournamentInfo.Config!=null&&this.props.tournamentInfo.Tournament!=null&&(this.props.tournamentInfo.Config.canEdit===true?this.props.tournamentInfo.Tournament.status==='initializing'?/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-login-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-login\",onClick:this.handleStartTournament},/*#__PURE__*/React.createElement(\"h4\",{className:\"TournamentInfo-login-text\"},\"B\\u1EAFt \\u0111\\u1EA7u gi\\u1EA3i\"))):this.props.tournamentInfo.Tournament.status==='processing'?/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-login-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-login\",onClick:this.handleFinishTournament},/*#__PURE__*/React.createElement(\"h4\",{className:\"TournamentInfo-login-text\"},\"K\\u1EBFt th\\xFAc gi\\u1EA3i\"))):null:cookies.get(COOKIES_TYPE.AUTH_TOKEN)!=null&&this.props.tournamentInfo.Tournament.status==='opening'&&/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-login-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-login\",onClick:this.handleJoinTournament},/*#__PURE__*/React.createElement(\"h4\",{className:\"TournamentInfo-login-text\"},\"Tham gia gi\\u1EA3i\")))),this.props.tournamentInfo!=null&&/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-content-info-advanced-info-container\"},/*#__PURE__*/React.createElement(CustomTab,{tabList:this.tabList,componentList:this.componentList,selectedIndex:0})))),/*#__PURE__*/React.createElement(CustomModal,{customStyles:customStyles,handleCloseModal:this.handleCloseModal,showModal:this.state.showJoinModal,handleConfirmModal:this.handleConfirmModal},/*#__PURE__*/React.createElement(\"div\",{className:'TournamentInfo-join-tournament-form-competition-header'},/*#__PURE__*/React.createElement(\"h3\",null,\"Form \\u0111\\u0103ng k\\xFD d\\u1EF1 thi\")),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentInfo-join-tournament-form-competition-option'},/*#__PURE__*/React.createElement(\"p\",null,\"Ch\\u1ECDn cu\\u1ED9c thi\"),/*#__PURE__*/React.createElement(Select,{options:allCompetitionOptions,className:\"Select\",defaultValue:this.state.selectedCompetitionInForm,value:this.state.selectedCompetitionInForm,onChange:this.onChangeSelectedCompetitionInForm,maxMenuHeight:140}),this.state.selectedCompetitionInFormError===true&&/*#__PURE__*/React.createElement(\"p\",{style:{color:'red'}},this.state.selectedCompetitionInFormErrorContent)),/*#__PURE__*/React.createElement(TextInput,{label:'Tên đội',value:this.state.teamNameInForm,onChangeText:this.onChangeTeamNameInForm,error:this.state.teamNameInFormError,errorContent:this.state.teamNameInFormErrorContent}),/*#__PURE__*/React.createElement(TextInput,{label:'Tên ngắn đội',value:this.state.teamShortNameInForm,onChangeText:this.onChangeTeamShortNameInForm,error:this.state.teamShortNameInFormError,errorContent:this.state.teamShortNameInFormErrorContent}),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-join-tournament-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-join-tournament-item1\"},/*#__PURE__*/React.createElement(\"p\",null,\"T\\xEAn\")),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-join-tournament-item2\"},/*#__PURE__*/React.createElement(\"p\",null,\"Gi\\u1EDBi t\\xEDnh\")),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-join-tournament-item2\"},/*#__PURE__*/React.createElement(\"p\",null,\"Tu\\u1ED5i\")),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-join-tournament-item1\"},/*#__PURE__*/React.createElement(\"p\",null,\"Email\")),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-join-tournament-setting\"})),this.state.listPlayerInForm.map(function(item,index){return/*#__PURE__*/React.createElement(Player,{onDelete:_this2.onDeletePlayer,info:item,freeToEdit:true,key:index,index:index});}),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-join-tournament-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-join-tournament-item1\"},/*#__PURE__*/React.createElement(\"input\",{type:'text',onChange:this.onChangePlayerNameInForm,value:this.state.playerNameInForm})),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-join-tournament-item2\"},/*#__PURE__*/React.createElement(Select,{options:genderOptions,className:\"Select\",defaultValue:this.state.playerGenderInForm,value:this.state.playerGenderInForm,onChange:this.onChangePlayerGenderInForm})),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-join-tournament-item2\"},/*#__PURE__*/React.createElement(\"input\",{style:{width:'70px'},type:'text',onChange:this.onChangePlayerAgeInForm,value:this.state.playerAgeInForm})),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-join-tournament-item1\"},/*#__PURE__*/React.createElement(\"input\",{type:'text',onChange:this.onChangePlayerEmailInForm,value:this.state.playerEmailInForm})),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentInfo-join-tournament-setting\"},/*#__PURE__*/React.createElement(IoMdAddCircleOutline,{color:'white',size:25,style:{marginLeft:'3px',marginRight:'3px'},onClick:this.addPlayer}))),this.state.playerNameInFormError===true&&/*#__PURE__*/React.createElement(\"p\",{style:{color:'red'}},this.state.playerNameInFormErrorContent),this.state.playerEmailInFormError===true&&/*#__PURE__*/React.createElement(\"p\",{style:{color:'red'}},this.state.playerEmailInFormErrorContent)))));}}]);return TournamentInfo;}(React.Component);var mapStateToProps=function mapStateToProps(state){return{tournamentInfo:state.tournamentInfo,listSportsByTournament:state.listSportsByTournament,listCompetitionsBySportAndTournament:state.listCompetitionsBySportAndTournament,allCompetitionByTournamentId:state.allCompetitionByTournamentId};};export default connect(mapStateToProps,{queryAllCompetitionsByTournamentId:queryAllCompetitionsByTournamentId,deleteListSelectingTeam:deleteListSelectingTeam,onEditBracketMode:onEditBracketMode,updateBackgroundTournament:updateBackgroundTournament,updateAvatarTournament:updateAvatarTournament,queryTournamentInfo:queryTournamentInfo,querySportsByTournament:querySportsByTournament,queryCompetitionsBySportAndTournament:queryCompetitionsBySportAndTournament,startTournament:startTournament,finishTournament:finishTournament})(TournamentInfo);","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/screens/TournamentInfo/index.tsx"],"names":["React","connect","IoMdAddCircleOutline","ReduxBlockUi","Select","Skeleton","AiFillCamera","CustomTab","CustomModal","TournamentListTeam","TournamentSetting","CompetitionsSetting","Player","TextInput","COOKIES_TYPE","cookies","formatDateToDisplay","config","onEditBracketMode","deleteListSelectingTeam","queryAllCompetitionsByTournamentId","updateBackgroundTournament","updateAvatarTournament","queryTournamentInfo","querySportsByTournament","finishTournament","queryCompetitionsBySportAndTournament","startTournament","START_TOURNAMENT","FINISH_TOURNAMENT","START_TOURNAMENT_SUCCESS","START_TOURNAMENT_FAILED","FINISH_TOURNAMENT_SUCCESS","FINISH_TOURNAMENT_FAILED","allCompetitionOptions","customStyles","content","top","left","right","bottom","backgroundColor","display","flexDirection","overlay","zIndex","genderOptions","value","label","TournamentInfo","props","tabList","componentList","requestData","params","path","param","id","Number","routerInfo","match","tournamentId","data","limit","onChangeCompetitionSetting","setState","selectedCompetitionInForm","onChangeSelectedCompetitionInForm","updateBackground","selectorFiles","length","file","updateAvatar","handleStartTournament","confirm","window","handleJoinTournament","showJoinModal","handleCloseModal","validateForm","selectedCompetitionInFormError","selectedCompetitionInFormErrorContent","teamNameInFormError","teamNameInFormErrorContent","teamShortNameInFormErrorContent","teamShortNameInFormError","state","teamNameInForm","trim","teamShortNameInForm","validateAddPlayer","playerEmailInFormErrorContent","playerEmailInFormError","playerNameInFormErrorContent","playerNameInFormError","playerNameInForm","regex","email","test","playerEmailInForm","handleConfirmModal","competitionId","TeamDTO","fullName","shortName","ListPlayer","listPlayerInForm","handleFinishTournament","onChangeTeamNameInForm","onChangeTeamShortNameInForm","onDeletePlayer","indexx","filter","item","index","onChangePlayerNameInForm","target","onChangePlayerEmailInForm","onChangePlayerGenderInForm","playerGenderInForm","addPlayer","listTemp","push","name","age","playerAgeInForm","gender","onChangePlayerAgeInForm","tempValue","isNaN","nextProps","nextState","tournamentInfo","Config","canEdit","Tournament","allCompetitionByTournamentId","map","require","e","files","donor","status","openingTime","openingLocation","closingTime","closingLocation","description","get","AUTH_TOKEN","color","width","marginLeft","marginRight","Component","mapStateToProps","listSportsByTournament","listCompetitionsBySportAndTournament"],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { IoMdAddCircleOutline } from 'react-icons/io';\r\nimport ReduxBlockUi from 'react-block-ui/redux';\r\nimport Select, { ValueType, OptionTypeBase } from 'react-select';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport * as H from 'history';\r\nimport { StaticContext } from 'react-router';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport { Styles } from 'react-modal';\r\nimport { AiFillCamera } from 'react-icons/ai';\r\nimport BracketBoard from 'components/BracketBoard';\r\nimport CustomTab from 'components/CustomTab';\r\nimport CustomModal from 'components/CustomModal';\r\nimport BracketSchedule from 'components/BracketSchedule';\r\nimport BracketRank from 'components/BracketRank';\r\nimport TournamentListTeam from 'components/TournamentListTeam';\r\nimport TournamentSetting from 'components/TournamentSetting';\r\nimport CompetitionsSetting from 'components/CompetitionsSetting';\r\nimport Player from 'components/Player';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport { COOKIES_TYPE } from 'global';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { cookies } from 'utils/cookies';\r\nimport { formatDateToDisplay } from 'utils/datetime';\r\nimport config from 'config';\r\nimport { onEditBracketMode, deleteListSelectingTeam } from 'components/BracketTeam/actions';\r\nimport { queryAllCompetitionsByTournamentId } from 'components/CompetitionsSetting/actions';\r\nimport { updateBackgroundTournament, updateAvatarTournament, queryTournamentInfo, querySportsByTournament, finishTournament, queryCompetitionsBySportAndTournament, startTournament } from './actions';\r\nimport { START_TOURNAMENT, FINISH_TOURNAMENT } from 'redux-saga/actions';\r\nimport { START_TOURNAMENT_SUCCESS, START_TOURNAMENT_FAILED, FINISH_TOURNAMENT_SUCCESS, FINISH_TOURNAMENT_FAILED } from './reducers';\r\nimport './styles.css';\r\n\r\ninterface ITournamentInfoProps extends React.ClassAttributes<TournamentInfo> {\r\n  routerInfo: RouteComponentProps<any, StaticContext, H.LocationState>;\r\n  tournamentInfo: IParams | null;\r\n  listSportsByTournament: IParams[] | null;\r\n  listCompetitionsBySportAndTournament: IParams[] | null;\r\n  allCompetitionByTournamentId: IParams[] | null;\r\n\r\n  queryTournamentInfo(param: IBigRequest): void;\r\n  querySportsByTournament(param: IBigRequest): void;\r\n  queryCompetitionsBySportAndTournament(param: IBigRequest): void;\r\n  startTournament(param: IBigRequest): void;\r\n  finishTournament(param: IBigRequest): void;\r\n  updateAvatarTournament(param: IBigRequest): void;\r\n  updateBackgroundTournament(param: IBigRequest): void;\r\n  onEditBracketMode(status: boolean): void;\r\n  deleteListSelectingTeam(): void;\r\n  queryAllCompetitionsByTournamentId(param: IBigRequest): void;\r\n}\r\n\r\ninterface ITournamentInfoState {\r\n  selectedCompetitionInForm: ValueType<OptionTypeBase>;\r\n  selectedCompetitionInFormError: boolean;\r\n  selectedCompetitionInFormErrorContent: string;\r\n  showJoinModal: boolean;\r\n  teamNameInForm: string;\r\n  teamNameInFormError: boolean;\r\n  teamNameInFormErrorContent: string;\r\n  playerNameInForm: string;\r\n  playerNameInFormError: boolean;\r\n  playerNameInFormErrorContent: string;\r\n  playerEmailInForm: string;\r\n  playerEmailInFormError: boolean;\r\n  playerEmailInFormErrorContent: string;\r\n  playerAgeInForm: number;\r\n  teamShortNameInForm: string;\r\n  teamShortNameInFormError: boolean;\r\n  teamShortNameInFormErrorContent: string;\r\n  listPlayerInForm: IParams[];\r\n  playerGenderInForm: ValueType<OptionTypeBase>;\r\n}\r\n\r\nlet allCompetitionOptions: IParams[] = [\r\n];\r\n\r\nconst customStyles: Styles = {\r\n  content: {\r\n    top: '5%',\r\n    left: '15%',\r\n    right: '15%',\r\n    bottom: '5%',\r\n    backgroundColor: '#2b303d',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  overlay: {\r\n    zIndex: 100001,\r\n  },\r\n};\r\n\r\nconst genderOptions = [\r\n  { value: true, label: 'Nam' },\r\n  { value: false, label: 'Nữ' },\r\n];\r\n\r\nclass TournamentInfo extends React.Component<ITournamentInfoProps, ITournamentInfoState> {\r\n  private tabList: string[] = [];\r\n  private componentList: ReactNode[] = [];\r\n\r\n  constructor(props: ITournamentInfoProps) {\r\n    super(props);\r\n    this.state = {\r\n      selectedCompetitionInForm: null,\r\n      showJoinModal: false,\r\n      teamNameInForm: '',\r\n      playerEmailInForm: '',\r\n      teamNameInFormError: false,\r\n      teamNameInFormErrorContent: '',\r\n      playerNameInForm: '',\r\n      playerAgeInForm: 0,\r\n      playerGenderInForm: { value: true, label: 'Nam' },\r\n      selectedCompetitionInFormError: false,\r\n      selectedCompetitionInFormErrorContent: '',\r\n      playerEmailInFormError: false,\r\n      playerEmailInFormErrorContent: '',\r\n      playerNameInFormError: false,\r\n      playerNameInFormErrorContent: '',\r\n      teamShortNameInForm: '',\r\n      teamShortNameInFormError: false,\r\n      teamShortNameInFormErrorContent: '',\r\n      listPlayerInForm: [\r\n        {\r\n          name: 'Phan Trọng Nhân',\r\n          gender: 'Nam',\r\n          age: 23,\r\n          email: 'caulamgithelol.lmht@gmail.com',\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: ITournamentInfoProps, nextState: ITournamentInfoState) {\r\n    if (this.props.tournamentInfo !== nextProps.tournamentInfo) {\r\n      // if (nextProps.tournamentInfo == null || nextProps.tournamentInfo.Tournament == null) {\r\n      //   this.tabList = [];\r\n      //   this.componentList = [];\r\n      // } else if (nextState.selectedCompetition != null) {\r\n      //   if (nextProps.tournamentInfo != null && (nextProps.tournamentInfo as IParams).Config != null && ((nextProps.tournamentInfo as IParams).Config as IParams).canEdit === true) {\r\n      //     this.tabList = ['Nhánh thi đấu', 'Lịch thi đấu', 'Bảng xếp hạng', 'Thông tin', 'Danh sách các đội', 'Cài đặt', 'Các cuộc thi trong giải'];\r\n      //     this.componentList = [<BracketBoard competitionId={(nextState.selectedCompetition as IParams).value as number} />, <BracketSchedule competitionId={(nextState.selectedCompetition as IParams).value as number} />, <BracketRank />, <div />, <TournamentListTeam id={Number(this.props.routerInfo.match.params.tournamentId)} />, <TournamentSetting tournamentInfo={nextProps.tournamentInfo.Tournament as IParams} tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} />, <CompetitionsSetting tournamentInfo={nextProps.tournamentInfo as IParams} tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} onChangeCompetitionSetting={this.onChangeCompetitionSetting} />];\r\n      //   } else {\r\n      //     this.tabList = ['Nhánh thi đấu', 'Lịch thi đấu', 'Bảng xếp hạng', 'Thông tin', 'Danh sách các đội'];\r\n      //     this.componentList = [<BracketBoard competitionId={(nextState.selectedCompetition as IParams).value as number} />, <BracketSchedule competitionId={(nextState.selectedCompetition as IParams).value as number} />, <BracketRank />, <div />, <TournamentListTeam id={Number(this.props.routerInfo.match.params.tournamentId)} />];\r\n      //   }\r\n      // } else {\r\n      //   if (nextProps.tournamentInfo != null && (nextProps.tournamentInfo as IParams).Config != null && ((nextProps.tournamentInfo as IParams).Config as IParams).canEdit === true) {\r\n      //     this.tabList = ['Cài đặt', 'Các cuộc thi trong giải'];\r\n      //     this.componentList = [<TournamentSetting tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} tournamentInfo={nextProps.tournamentInfo.Tournament as IParams} />, <CompetitionsSetting tournamentInfo={nextProps.tournamentInfo.Tournament as IParams} tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} onChangeCompetitionSetting={this.onChangeCompetitionSetting} />];\r\n      //   } else {\r\n      //     this.tabList = [];\r\n      //     this.componentList = [];\r\n      //   }\r\n      // }\r\n      this.tabList = [];\r\n      this.componentList = [];\r\n      if (nextProps.tournamentInfo != null) {\r\n        if ((nextProps.tournamentInfo as IParams).Config != null && ((nextProps.tournamentInfo as unknown as IParams).Config as unknown as IParams).canEdit === true) {\r\n          this.tabList = [\r\n            'Các cuộc thi trong giải',\r\n            'Các đội tham gia giải',\r\n            'Cài đặt'\r\n          ];\r\n          this.componentList = [\r\n            <CompetitionsSetting tournamentInfo={nextProps.tournamentInfo.Tournament as unknown as IParams} tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} onChangeCompetitionSetting={this.onChangeCompetitionSetting} />,\r\n            <TournamentListTeam id={Number(this.props.routerInfo.match.params.tournamentId)} />,\r\n            <TournamentSetting tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} tournamentInfo={nextProps.tournamentInfo.Tournament as unknown as IParams} />\r\n          ];\r\n        } else {\r\n          this.tabList = [\r\n            'Các cuộc thi trong giải',\r\n            'Các đội tham gia giải',\r\n          ];\r\n          this.componentList = [\r\n            <CompetitionsSetting tournamentInfo={nextProps.tournamentInfo.Tournament as unknown as IParams} tournamentId={Number(this.props.routerInfo.match.params.tournamentId)} onChangeCompetitionSetting={this.onChangeCompetitionSetting} />,\r\n            <TournamentListTeam id={Number(this.props.routerInfo.match.params.tournamentId)} />,\r\n          ];\r\n        }\r\n      }\r\n    }\r\n    // if (this.state.selectedSport !== nextState.selectedSport || this.state.selectedCompetition !== nextState.selectedCompetition) {\r\n    //   this.props.onEditBracketMode(false);\r\n    //   this.props.deleteListSelectingTeam();\r\n    // }\r\n    // if (this.props.listSportsByTournament !== nextProps.listSportsByTournament) {\r\n    //   sportOptions = [];\r\n    //   if (nextProps.listSportsByTournament != null) {\r\n    //     nextProps.listSportsByTournament.map((item, index) => sportOptions.push({ value: item.id, label: item.fullName }));\r\n    //   }\r\n    //   sportOptions.unshift({\r\n    //     value: null, label: '(Tất cả)',\r\n    //   });\r\n    // }\r\n    // if (this.props.listCompetitionsBySportAndTournament !== nextProps.listCompetitionsBySportAndTournament) {\r\n    //   competitionOptions = [];\r\n    //   if (nextProps.listCompetitionsBySportAndTournament != null) {\r\n    //     nextProps.listCompetitionsBySportAndTournament.map((item, index) => competitionOptions.push({ value: item.id, label: item.name }));\r\n    //   }\r\n    // }\r\n    if (this.props.allCompetitionByTournamentId !== nextProps.allCompetitionByTournamentId) {\r\n      allCompetitionOptions = [];\r\n      if (nextProps.allCompetitionByTournamentId != null) {\r\n        nextProps.allCompetitionByTournamentId.map((item, index) => allCompetitionOptions.push({ value: item.id, label: item.name }));\r\n      }\r\n    }\r\n    // if (this.state.selectedSport !== nextState.selectedSport && nextState.selectedSport != null) {\r\n    //   competitionOptions = [];\r\n    //   this.setState({\r\n    //     selectedCompetition: null,\r\n    //   });\r\n    //   const params = {\r\n    //     path: '',\r\n    //     param: {\r\n    //       tournamentId: Number(this.props.routerInfo.match.params.tournamentId),\r\n    //       sportId: (nextState.selectedSport as IParams).value,\r\n    //     },\r\n    //     data: {},\r\n    //   };\r\n    //   this.props.queryCompetitionsBySportAndTournament(params);\r\n    // }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    let params: IBigRequest = {\r\n      path: '',\r\n      param: {\r\n        id: Number(this.props.routerInfo.match.params.tournamentId),\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryTournamentInfo(params);\r\n    params = {\r\n      path: '',\r\n      param: {\r\n        tournamentId: Number(this.props.routerInfo.match.params.tournamentId),\r\n        limit: 99,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryAllCompetitionsByTournamentId(params);\r\n  }\r\n\r\n  private onChangeCompetitionSetting = () => {\r\n    this.setState({\r\n      selectedCompetitionInForm: null,\r\n    });\r\n  }\r\n\r\n  private onChangeSelectedCompetitionInForm = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedCompetitionInForm: value,\r\n    });\r\n  }\r\n\r\n  private updateBackground = (selectorFiles: FileList | null) => {\r\n    if (selectorFiles !== null && selectorFiles.length > 0) {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          id: Number(this.props.routerInfo.match.params.tournamentId),\r\n          file: selectorFiles,\r\n        },\r\n        data: {\r\n        },\r\n      };\r\n\r\n      this.props.updateBackgroundTournament(params);\r\n    }\r\n  };\r\n\r\n  private updateAvatar = (selectorFiles: FileList | null) => {\r\n    if (selectorFiles !== null && selectorFiles.length > 0) {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          id: Number(this.props.routerInfo.match.params.tournamentId),\r\n          file: selectorFiles,\r\n        },\r\n        data: {\r\n        },\r\n      };\r\n\r\n      this.props.updateAvatarTournament(params);\r\n    }\r\n  };\r\n\r\n  private handleStartTournament = () => {\r\n    const confirm = window.confirm('Khi bắt đầu giải bạn sẽ không thể thay đổi thông tin các cuộc thi và các đội nữa, bạn có chắc chắn?')\r\n    if (confirm === true) {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          id: Number(this.props.routerInfo.match.params.tournamentId),\r\n        },\r\n        data: {\r\n        },\r\n      };\r\n\r\n      this.props.startTournament(params);\r\n    }\r\n  };\r\n\r\n  private handleJoinTournament = () => {\r\n    this.setState({\r\n      showJoinModal: true,\r\n    });\r\n  };\r\n\r\n  private handleCloseModal = () => {\r\n    const confirm = window.confirm('Bạn có chắc chắn muốn hủy form đăng ký?');\r\n    if (confirm === true) {\r\n      this.setState({\r\n        showJoinModal: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  private validateForm = () => {\r\n    let selectedCompetitionInFormError = false;\r\n    let selectedCompetitionInFormErrorContent = '';\r\n    let teamNameInFormError = false;\r\n    let teamNameInFormErrorContent = '';\r\n    let teamShortNameInFormErrorContent = '';\r\n    let teamShortNameInFormError = false;\r\n    if (this.state.selectedCompetitionInForm == null) {\r\n      selectedCompetitionInFormError = true;\r\n      selectedCompetitionInFormErrorContent = 'Bạn phải chọn giải đấu muốn tham gia';\r\n    }\r\n    if (this.state.teamNameInForm.trim() === '') {\r\n      teamNameInFormError = true;\r\n      teamNameInFormErrorContent = 'Tên đội không được trống';\r\n    }\r\n    if (this.state.teamShortNameInForm.trim() === '') {\r\n      teamShortNameInFormError = true;\r\n      teamShortNameInFormErrorContent = 'Tên ngắn đội không được trống';\r\n    }\r\n\r\n    return {\r\n      selectedCompetitionInFormError,\r\n      selectedCompetitionInFormErrorContent,\r\n      teamNameInFormError,\r\n      teamNameInFormErrorContent,\r\n      teamShortNameInFormError,\r\n      teamShortNameInFormErrorContent\r\n    };\r\n  }\r\n\r\n  private validateAddPlayer = () => {\r\n    let playerEmailInFormErrorContent = '';\r\n    let playerEmailInFormError = false;\r\n    let playerNameInFormErrorContent = '';\r\n    let playerNameInFormError = false;\r\n    if (this.state.playerNameInForm.trim() === '') {\r\n      playerNameInFormError = true;\r\n      playerNameInFormErrorContent = 'Tên người chơi không được trống';\r\n    }\r\n    if (!config.regex.email.test(this.state.playerEmailInForm)) {\r\n      playerEmailInFormError = true;\r\n      playerEmailInFormErrorContent = 'Email không hợp lệ';\r\n    }\r\n\r\n    return {\r\n      playerEmailInFormError,\r\n      playerEmailInFormErrorContent,\r\n      playerNameInFormErrorContent,\r\n      playerNameInFormError,\r\n    };\r\n  }\r\n\r\n  private handleConfirmModal = () => {\r\n    const {\r\n      selectedCompetitionInFormError,\r\n      selectedCompetitionInFormErrorContent,\r\n      teamNameInFormError,\r\n      teamNameInFormErrorContent,\r\n      teamShortNameInFormError,\r\n      teamShortNameInFormErrorContent\r\n    } = this.validateForm();\r\n    this.setState({\r\n      selectedCompetitionInFormError,\r\n      selectedCompetitionInFormErrorContent,\r\n      teamNameInFormError,\r\n      teamNameInFormErrorContent,\r\n      teamShortNameInFormError,\r\n      teamShortNameInFormErrorContent\r\n    });\r\n    if (teamNameInFormError === true || selectedCompetitionInFormError === true || teamShortNameInFormError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        competitionId: (this.state.selectedCompetitionInForm as IParams).value,\r\n        TeamDTO: {\r\n          fullName: this.state.teamNameInForm,\r\n          shortName: this.state.teamShortNameInForm,\r\n        },\r\n        ListPlayer: this.state.listPlayerInForm,\r\n      },\r\n    }\r\n    // this.props.registTeam(params);\r\n  };\r\n\r\n  private handleFinishTournament = () => {\r\n    const confirm = window.confirm('Khi Kết thúc giải đồng nghĩa với việc tất cả các cuộc thi cũng sẽ kết thúc, bạn có chắc chắn?')\r\n    if (confirm === true) {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          id: Number(this.props.routerInfo.match.params.tournamentId),\r\n        },\r\n        data: {\r\n        },\r\n      };\r\n\r\n      this.props.finishTournament(params);\r\n    }\r\n  };\r\n\r\n  private onChangeTeamNameInForm = (value: string) => {\r\n    this.setState({\r\n      teamNameInForm: value,\r\n    });\r\n  }\r\n\r\n  private onChangeTeamShortNameInForm = (value: string) => {\r\n    this.setState({\r\n      teamShortNameInForm: value,\r\n    });\r\n  }\r\n\r\n  private onDeletePlayer = (indexx: number) => {\r\n    this.setState({\r\n      listPlayerInForm: this.state.listPlayerInForm.filter((item, index) => index !== indexx),\r\n    });\r\n  }\r\n\r\n  private onChangePlayerNameInForm = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      playerNameInForm: value.target.value,\r\n    });\r\n  }\r\n\r\n  private onChangePlayerEmailInForm = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      playerEmailInForm: value.target.value,\r\n    });\r\n  }\r\n\r\n  private onChangePlayerGenderInForm = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({ playerGenderInForm: value, });\r\n  }\r\n\r\n  private addPlayer = () => {\r\n    const {\r\n      playerEmailInFormError,\r\n      playerEmailInFormErrorContent,\r\n      playerNameInFormErrorContent,\r\n      playerNameInFormError,\r\n    } = this.validateAddPlayer();\r\n    this.setState({\r\n      playerEmailInFormError,\r\n      playerEmailInFormErrorContent,\r\n      playerNameInFormErrorContent,\r\n      playerNameInFormError,\r\n    });\r\n    if (playerNameInFormError === true || playerEmailInFormError === true) {\r\n      return;\r\n    }\r\n    const listTemp = this.state.listPlayerInForm;\r\n    listTemp.push({\r\n      name: this.state.playerNameInForm,\r\n      age: this.state.playerAgeInForm,\r\n      email: this.state.playerEmailInForm,\r\n      gender: (this.state.playerGenderInForm as IParams).label,\r\n    });\r\n    this.setState({\r\n      listPlayerInForm: listTemp,\r\n      playerNameInForm: '',\r\n      playerAgeInForm: 0,\r\n      playerEmailInForm: '',\r\n      playerGenderInForm: { value: true, label: 'Nam' },\r\n    });\r\n  }\r\n\r\n  private onChangePlayerAgeInForm = (value: React.ChangeEvent<HTMLInputElement>) => {\r\n    let tempValue = 0;\r\n    if (!isNaN(value.target.value as unknown as number)) {\r\n      tempValue = Number(value.target.value);\r\n    } else {\r\n      tempValue = 0;\r\n    }\r\n    this.setState({\r\n      playerAgeInForm: tempValue,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReduxBlockUi\r\n        tag=\"div\"\r\n        block={START_TOURNAMENT}\r\n        unblock={[START_TOURNAMENT_SUCCESS, START_TOURNAMENT_FAILED]}\r\n      >\r\n        <ReduxBlockUi\r\n          tag=\"div\"\r\n          block={FINISH_TOURNAMENT}\r\n          unblock={[FINISH_TOURNAMENT_SUCCESS, FINISH_TOURNAMENT_FAILED]}\r\n        >\r\n          <div className=\"TournamentInfo-Container\">\r\n            <div className=\"TournamentInfo-background-image-container\">\r\n              <img className={'TournamentInfo-background-image'} src={require('../../assets/38155584462_74d5f1cc1d_b.jpg')} alt={'logo'} />\r\n              {this.props.tournamentInfo != null && (this.props.tournamentInfo as IParams).Config != null && ((this.props.tournamentInfo as unknown as IParams).Config as unknown as IParams).canEdit === true && <AiFillCamera className={'TournamentInfo-change-image-icon'} />}\r\n              {this.props.tournamentInfo != null && (this.props.tournamentInfo as IParams).Config != null && ((this.props.tournamentInfo as unknown as IParams).Config as unknown as IParams).canEdit === true && <div className={'TournamentInfo-Overlay'}>\r\n                <input type=\"file\" onChange={(e) => this.updateBackground(e.target.files)} />\r\n              </div>}\r\n            </div>\r\n            <div className=\"TournamentInfo-content-container\">\r\n              <div className=\"TournamentInfo-content-info-container\">\r\n                <div className=\"TournamentInfo-content-info-basic-info-container\">\r\n                  <div className=\"TournamentInfo-content-info-basic-info-container-container\">\r\n                    <div className=\"TournamentInfo-content-info-basic-info-container-singleRow\">\r\n                      <p className=\"TournamentInfo-name-text\">{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? (this.props.tournamentInfo.Tournament as unknown as IParams).fullName : <Skeleton width={400} height={30} />}</p>\r\n                    </div>\r\n                    <div className=\"TournamentInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Tên ngắn: ${(this.props.tournamentInfo.Tournament as unknown as IParams).shortName}` : <Skeleton width={200} height={20} />}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"TournamentInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Nhà tài trợ: ${(this.props.tournamentInfo.Tournament as unknown as IParams).donor}` : <Skeleton width={250} height={20} />}</p>\r\n                      </div>\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Trạng thái: ${((this.props.tournamentInfo.Tournament as unknown as IParams).status === 'processing' ? 'Đang diễn ra' : (this.props.tournamentInfo.status == null ? 'Chưa diễn ra' : 'Đã kết thúc'))}` : <Skeleton width={225} height={20} />}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"TournamentInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Ngày bắt đầu: ${formatDateToDisplay((this.props.tournamentInfo.Tournament as unknown as IParams).openingTime as string | undefined, 'dd/MM/yyyy', 'yyyy-MM-dd')}` : <Skeleton width={250} height={20} />}</p>\r\n                      </div>\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Địa điểm khai mạc: ${(this.props.tournamentInfo.Tournament as unknown as IParams).openingLocation}` : <Skeleton width={275} height={20} />}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"TournamentInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Ngày kết thúc: ${formatDateToDisplay((this.props.tournamentInfo.Tournament as unknown as IParams).closingTime as string | undefined, 'dd/MM/yyyy', 'yyyy-MM-dd')}` : <Skeleton width={250} height={20} />}</p>\r\n                      </div>\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Địa điểm bế mạc: ${(this.props.tournamentInfo.Tournament as unknown as IParams).closingLocation}` : <Skeleton width={275} height={20} />}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"TournamentInfo-content-info-basic-info-container-singleRow\">\r\n                      <div className=\"TournamentInfo-info-item\">\r\n                        <p>{this.props.tournamentInfo != null && this.props.tournamentInfo.Tournament ? `Mô tả: ${(this.props.tournamentInfo.Tournament as unknown as IParams).description}` : <Skeleton width={300} height={20} />}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <img className={'TournamentInfo-avatar-image'} src={require('../../assets/7ab1b0125d485c8dd6a4e78832b0a4b2fbed3cf8.png')} alt={'logo'} />\r\n                  {this.props.tournamentInfo != null && (this.props.tournamentInfo as IParams).Config != null && ((this.props.tournamentInfo as unknown as IParams).Config as unknown as IParams).canEdit === true && <AiFillCamera className={'TournamentInfo-change-avatar-icon'} />}\r\n                  {this.props.tournamentInfo != null && (this.props.tournamentInfo as IParams).Config != null && ((this.props.tournamentInfo as unknown as IParams).Config as unknown as IParams).canEdit === true && <div className={'TournamentInfo-Overlay2'}>\r\n                    <input type=\"file\" onChange={(e) => this.updateAvatar(e.target.files)} />\r\n                  </div>}\r\n                </div>\r\n                {this.props.tournamentInfo != null && this.props.tournamentInfo.Config != null && this.props.tournamentInfo.Tournament != null &&\r\n                  ((this.props.tournamentInfo.Config as IParams).canEdit === true ?\r\n                    ((this.props.tournamentInfo.Tournament as IParams).status === 'initializing' ?\r\n                      <div className=\"TournamentInfo-login-container\">\r\n                        <div\r\n                          className=\"TournamentInfo-login\"\r\n                          onClick={this.handleStartTournament}\r\n                        >\r\n                          <h4 className=\"TournamentInfo-login-text\">Bắt đầu giải</h4>\r\n                        </div>\r\n                      </div> : ((this.props.tournamentInfo.Tournament as IParams).status === 'processing' ?\r\n                        <div className=\"TournamentInfo-login-container\">\r\n                          <div\r\n                            className=\"TournamentInfo-login\"\r\n                            onClick={this.handleFinishTournament}\r\n                          >\r\n                            <h4 className=\"TournamentInfo-login-text\">Kết thúc giải</h4>\r\n                          </div>\r\n                        </div> : null)) : (cookies.get(COOKIES_TYPE.AUTH_TOKEN) != null && (this.props.tournamentInfo.Tournament as IParams).status === 'opening' && <div className=\"TournamentInfo-login-container\">\r\n                          <div\r\n                            className=\"TournamentInfo-login\"\r\n                            onClick={this.handleJoinTournament}\r\n                          >\r\n                            <h4 className=\"TournamentInfo-login-text\">Tham gia giải</h4>\r\n                          </div>\r\n                        </div>))\r\n                }\r\n                {/* {this.props.tournamentInfo != null && (this.props.tournamentInfo as IParams).Config != null &&\r\n              (((this.props.tournamentInfo as unknown as IParams).Config as unknown as IParams).canEdit === true ?\r\n                (this.props.tournamentInfo.Tournament != null && (\r\n                  (this.props.tournamentInfo.Tournament as unknown as IParams).status === 'initializing' ?\r\n                    <div className=\"TournamentInfo-login-container\">\r\n                      <div\r\n                        className=\"TournamentInfo-login\"\r\n                        onClick={this.handleStartTournament}\r\n                      >\r\n                        <h4 className=\"TournamentInfo-login-text\">Bắt đầu giải</h4>\r\n                      </div>\r\n                    </div> : ((this.props.tournamentInfo.Tournament as unknown as IParams).status === 'processing' ?\r\n                      <div className=\"TournamentInfo-login-container\">\r\n                        <div\r\n                          className=\"TournamentInfo-login\"\r\n                          onClick={this.handleFinishTournament}\r\n                        >\r\n                          <h4 className=\"TournamentInfo-login-text\">Kết thúc giải</h4>\r\n                        </div>\r\n                      </div> : null))) :\r\n                (cookies.get(COOKIES_TYPE.AUTH_TOKEN) != null && (this.props.tournamentInfo.Tournament as unknown as IParams).status === 'opening' &&\r\n                (<div className=\"TournamentInfo-login-container\">\r\n                  <div\r\n                    className=\"TournamentInfo-login\"\r\n                    onClick={this.handleJoinTournament}\r\n                  >\r\n                    <h4 className=\"TournamentInfo-login-text\">Tham gia giải</h4>\r\n                  </div>\r\n                </div>)\r\n              ))\r\n            } */}\r\n                {this.props.tournamentInfo != null &&\r\n                  <div className=\"TournamentInfo-content-info-advanced-info-container\">\r\n                    <CustomTab tabList={this.tabList} componentList={this.componentList} selectedIndex={0}></CustomTab>\r\n                  </div>\r\n                }\r\n              </div>\r\n            </div>\r\n            <CustomModal\r\n              customStyles={customStyles}\r\n              handleCloseModal={this.handleCloseModal}\r\n              showModal={this.state.showJoinModal}\r\n              handleConfirmModal={this.handleConfirmModal}\r\n            >\r\n              <div className={'TournamentInfo-join-tournament-form-competition-header'}>\r\n                <h3>Form đăng ký dự thi</h3>\r\n              </div>\r\n              <div className={'TournamentInfo-join-tournament-form-competition-option'}>\r\n                <p>Chọn cuộc thi</p>\r\n                <Select\r\n                  options={allCompetitionOptions}\r\n                  className=\"Select\"\r\n                  defaultValue={this.state.selectedCompetitionInForm}\r\n                  value={this.state.selectedCompetitionInForm}\r\n                  onChange={this.onChangeSelectedCompetitionInForm}\r\n                  maxMenuHeight={140}\r\n                />\r\n                {this.state.selectedCompetitionInFormError === true && <p style={{ color: 'red' }}>{this.state.selectedCompetitionInFormErrorContent}</p>}\r\n              </div>\r\n              <TextInput label={'Tên đội'} value={this.state.teamNameInForm} onChangeText={this.onChangeTeamNameInForm} error={this.state.teamNameInFormError} errorContent={this.state.teamNameInFormErrorContent} />\r\n              <TextInput label={'Tên ngắn đội'} value={this.state.teamShortNameInForm} onChangeText={this.onChangeTeamShortNameInForm} error={this.state.teamShortNameInFormError} errorContent={this.state.teamShortNameInFormErrorContent} />\r\n              <div className=\"TournamentInfo-join-tournament-container\">\r\n                <div className=\"TournamentInfo-join-tournament-item1\">\r\n                  <p>Tên</p>\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-item2\">\r\n                  <p>Giới tính</p>\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-item2\">\r\n                  <p>Tuổi</p>\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-item1\">\r\n                  <p>Email</p>\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-setting\">\r\n                </div>\r\n              </div>\r\n              {this.state.listPlayerInForm.map((item, index) => <Player onDelete={this.onDeletePlayer} info={item} freeToEdit={true} key={index} index={index} />)}\r\n              <div className=\"TournamentInfo-join-tournament-container\">\r\n                <div className=\"TournamentInfo-join-tournament-item1\">\r\n                  <input type={'text'} onChange={this.onChangePlayerNameInForm} value={this.state.playerNameInForm} />\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-item2\">\r\n                  <Select\r\n                    options={genderOptions}\r\n                    className=\"Select\"\r\n                    defaultValue={this.state.playerGenderInForm}\r\n                    value={this.state.playerGenderInForm}\r\n                    onChange={this.onChangePlayerGenderInForm}\r\n                  />\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-item2\">\r\n                  <input style={{ width: '70px' }} type={'text'} onChange={this.onChangePlayerAgeInForm} value={this.state.playerAgeInForm} />\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-item1\">\r\n                  <input type={'text'} onChange={this.onChangePlayerEmailInForm} value={this.state.playerEmailInForm} />\r\n                </div>\r\n                <div className=\"TournamentInfo-join-tournament-setting\">\r\n                  <IoMdAddCircleOutline color={'white'} size={25} style={{ marginLeft: '3px', marginRight: '3px' }} onClick={this.addPlayer} />\r\n                </div>\r\n              </div>\r\n              {this.state.playerNameInFormError === true && <p style={{ color: 'red' }}>{this.state.playerNameInFormErrorContent}</p>}\r\n              {this.state.playerEmailInFormError === true && <p style={{ color: 'red' }}>{this.state.playerEmailInFormErrorContent}</p>}\r\n            </CustomModal>\r\n          </div>\r\n        </ReduxBlockUi>\r\n      </ReduxBlockUi>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    tournamentInfo: state.tournamentInfo,\r\n    listSportsByTournament: state.listSportsByTournament,\r\n    listCompetitionsBySportAndTournament: state.listCompetitionsBySportAndTournament,\r\n    allCompetitionByTournamentId: state.allCompetitionByTournamentId,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { queryAllCompetitionsByTournamentId, deleteListSelectingTeam, onEditBracketMode, updateBackgroundTournament, updateAvatarTournament, queryTournamentInfo, querySportsByTournament, queryCompetitionsBySportAndTournament, startTournament, finishTournament }\r\n)(TournamentInfo);"]},"metadata":{},"sourceType":"module"}