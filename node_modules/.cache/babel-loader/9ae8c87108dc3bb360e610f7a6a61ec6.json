{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doQueryBracketBoardInfo),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchQueryBracketBoardInfo);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{GET_BRACKET_BOARD_INFO}from'redux-saga/actions';var queryBracketBoardInfo=function queryBracketBoardInfo(data,path,param){var uri='schedule';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.GET,datas,params,paths);};var listMatchesFull=[];var listWinMatchesFull=[];var listLoseMatchesFull=[];var listRound=[];var listRRRound=[];var listTableRR=[];var listTableSE=[];var listTableDE=[];var listWinRound=[];var listLoseRound=[];var DFS=function DFS(node,number,maxRound,fakeId){if(node.left!=null){if(number===3){if(node.degree%2===0){DFS(node.left,number,maxRound,fakeId);}else{DFS(node.left,number,maxRound,fakeId*2);}}else{DFS(node.left,number,maxRound);}}else if(node.left==null&&node.data.roundNo>=2&&node.data.roundNo<=maxRound&&number!==3){node.left={id:-1,data:{loser:null,matchNo:-1,name:'',roundNo:node.data.roundNo-1,status:null,team1:null,team1Description:null,team2:null,team2Description:null,winner:null},degree:null,left:null,right:null};DFS(node.left,number,maxRound);}if(node.right!=null){if(number===3){if(node.degree%2===0){DFS(node.right,number,maxRound,fakeId);}else{DFS(node.right,number,maxRound,fakeId*2+1);}}else{DFS(node.right,number,maxRound);}}else if(node.right==null&&node.data.roundNo>=2&&node.data.roundNo<=maxRound&&number!==3){node.right={id:-1,data:{loser:null,matchNo:-1,name:'',roundNo:node.data.roundNo-1,status:null,team1:null,team1Description:null,team2:null,team2Description:null,winner:null},degree:null,left:null,right:null};DFS(node.right,number,maxRound);}if(number===1){listMatchesFull.push(node);}else if(number===2){listWinMatchesFull.push(node);}else if(number===3){if(node.data.name.includes('L')){listLoseMatchesFull.push(_objectSpread({},node,{fakeId:fakeId}));}}};function doQueryBracketBoardInfo(request){var response,data,tempVar,tempVar2,listMatches,i,j,_listMatches,_i,_j,listWinMatches,_i2,_j2,listLoseMatches,_i3,_j3,_i4,_listMatches2,_j4,k,_k,_listMatches3,_i5,_j5,_k2,_listWinMatches,_i6,_j6,_listLoseMatches,_i7,_j7;return _regeneratorRuntime.wrap(function doQueryBracketBoardInfo$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(queryBracketBoardInfo,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;data=response.data.result;tempVar={};tempVar2={};if(!(response.data.error.MessageCode===0)){_context.next=91;break;}if(!(data.Schedule!=null&&data.Schedule.finalStageSchedule!=null)){_context.next=40;break;}if(!(data.Schedule.finalStageSchedule.formatName==='Round Robin')){_context.next=16;break;}listMatches=[];for(i=1;i<=data.Schedule.finalStageSchedule.totalRound;i++){for(j=0;j<data.Schedule.finalStageSchedule.matches.length;j++){if(data.Schedule.finalStageSchedule.matches[j].roundNo===i){listMatches.push(data.Schedule.finalStageSchedule.matches[j]);}}listRRRound.push({listMatches:listMatches,roundName:data.Schedule.finalStageSchedule.roundsNaming[i-1]});listMatches=[];}tempVar={finalStage:{listRRRound:listRRRound}};listRRRound=[];_context.next=40;break;case 16:if(!(data.Schedule.finalStageSchedule.winBranch==null)){_context.next=26;break;}_context.next=19;return call(DFS,data.Schedule.finalStageSchedule.bracket.root,1,data.Schedule.finalStageSchedule.bracket.root.data.roundNo);case 19:_listMatches=[];for(_i=1;_i<=data.Schedule.finalStageSchedule.bracket.root.data.roundNo;_i++){for(_j=0;_j<listMatchesFull.length;_j++){if(listMatchesFull[_j].data.roundNo===_i){_listMatches.push(listMatchesFull[_j]);}}listRound.push({listMatches:_listMatches,roundName:data.Schedule.finalStageSchedule.roundsNaming[_i-1]});_listMatches=[];}tempVar={finalStage:{listRound:listRound}};listRound=[];listMatchesFull=[];_context.next=40;break;case 26:_context.next=28;return call(DFS,data.Schedule.finalStageSchedule.winBranch.root,2,data.Schedule.finalStageSchedule.winBranch.root.data.roundNo);case 28:listWinMatches=[];for(_i2=1;_i2<=data.Schedule.finalStageSchedule.winBranch.root.data.roundNo;_i2++){for(_j2=0;_j2<listWinMatchesFull.length;_j2++){if(listWinMatchesFull[_j2].data.roundNo===_i2){listWinMatches.push(listWinMatchesFull[_j2]);}}listWinRound.push({listWinMatches:listWinMatches,roundName:data.Schedule.finalStageSchedule.winRoundsNaming[_i2-1]});listWinMatches=[];}if(!(data.Schedule.finalStageSchedule.loseBranch.root!=null)){_context.next=35;break;}_context.next=33;return call(DFS,data.Schedule.finalStageSchedule.loseBranch.root,3,data.Schedule.finalStageSchedule.loseBranch.root.data.roundNo,1);case 33:listLoseMatches=[];for(_i3=1;_i3<=data.Schedule.finalStageSchedule.loseBranch.root.data.roundNo;_i3++){for(_j3=0;_j3<listLoseMatchesFull.length;_j3++){if(listLoseMatchesFull[_j3].data.roundNo===_i3){listLoseMatches.push(listLoseMatchesFull[_j3]);}}listLoseRound.push({listLoseMatches:listLoseMatches,roundName:data.Schedule.finalStageSchedule.loseRoundsNaming[_i3-1]});listLoseMatches=[];}case 35:tempVar={finalStage:{listWinRound:listWinRound,listLoseRound:listLoseRound}};listWinRound=[];listWinMatchesFull=[];listLoseRound=[];listLoseMatchesFull=[];case 40:if(!(data.Schedule!=null&&data.Schedule.hasGroupStage===true)){_context.next=87;break;}if(!(data.Schedule.groupStageSchedule!=null&&Object.keys(data.Schedule.groupStageSchedule).length>0)){_context.next=87;break;}if(!(data.Schedule.groupStageSchedule.formatName==='Round Robin')){_context.next=48;break;}for(_i4=0;_i4<data.Schedule.groupStageSchedule.tables.length;_i4++){_listMatches2=[];if(data.Schedule.groupStageSchedule.tables[_i4].totalRound!=null){for(_j4=1;_j4<=data.Schedule.groupStageSchedule.tables[_i4].totalRound;_j4++){if(data.Schedule.groupStageSchedule.tables[_i4].matches!=null){for(k=0;k<data.Schedule.groupStageSchedule.tables[_i4].matches.length;k++){if(data.Schedule.groupStageSchedule.tables[_i4].matches[k].roundNo===_j4){_listMatches2.push(data.Schedule.groupStageSchedule.tables[_i4].matches[k]);}}listRRRound.push({listMatches:_listMatches2,roundName:data.Schedule.groupStageSchedule.tables[_i4].roundsNaming[_j4-1]});_listMatches2=[];}}}listTableRR.push({listRRRound:listRRRound,tableName:data.Schedule.groupStageSchedule.tables[_i4].tableName});listRRRound=[];}tempVar2={groupStage:{listTableRR:listTableRR}};listTableRR=[];_context.next=87;break;case 48:if(!(data.Schedule.groupStageSchedule.formatName!=='Double Elimination')){_context.next=66;break;}_k=0;case 50:if(!(_k<data.Schedule.groupStageSchedule.tables.length)){_context.next=62;break;}if(!(data.Schedule.groupStageSchedule.tables[_k].bracket!=null)){_context.next=56;break;}_context.next=54;return call(DFS,data.Schedule.groupStageSchedule.tables[_k].bracket.root,1,data.Schedule.groupStageSchedule.tables[_k].bracket.root.data.roundNo);case 54:_listMatches3=[];for(_i5=1;_i5<=data.Schedule.groupStageSchedule.tables[_k].bracket.root.data.roundNo;_i5++){for(_j5=0;_j5<listMatchesFull.length;_j5++){if(listMatchesFull[_j5].data.roundNo===_i5){_listMatches3.push(listMatchesFull[_j5]);}}listRound.push({listMatches:_listMatches3,roundName:data.Schedule.groupStageSchedule.tables[_k].roundsNaming[_i5-1]});_listMatches3=[];}case 56:listTableSE.push({listRound:listRound,tableName:data.Schedule.groupStageSchedule.tables[_k].tableName});listRound=[];listMatchesFull=[];case 59:_k++;_context.next=50;break;case 62:tempVar2={groupStage:{listTableSE:listTableSE}};listTableSE=[];_context.next=87;break;case 66:_k2=0;case 67:if(!(_k2<data.Schedule.groupStageSchedule.tables.length)){_context.next=85;break;}_context.next=70;return call(DFS,data.Schedule.groupStageSchedule.tables[_k2].winBranch.root,2,data.Schedule.groupStageSchedule.tables[_k2].winBranch.root.data.roundNo);case 70:_listWinMatches=[];for(_i6=1;_i6<=data.Schedule.groupStageSchedule.tables[_k2].winBranch.root.data.roundNo;_i6++){for(_j6=0;_j6<listWinMatchesFull.length;_j6++){if(listWinMatchesFull[_j6].data.roundNo===_i6){_listWinMatches.push(listWinMatchesFull[_j6]);}}listWinRound.push({listWinMatches:_listWinMatches,roundName:data.Schedule.groupStageSchedule.tables[_k2].winRoundsNaming[_i6-1]});_listWinMatches=[];}if(!(data.Schedule.groupStageSchedule.tables[_k2].loseBranch!=null&&data.Schedule.groupStageSchedule.tables[_k2].loseBranch.root!=null)){_context.next=77;break;}_context.next=75;return call(DFS,data.Schedule.groupStageSchedule.tables[_k2].loseBranch.root,3,data.Schedule.groupStageSchedule.tables[_k2].loseBranch.root.data.roundNo,1);case 75:_listLoseMatches=[];for(_i7=1;_i7<=data.Schedule.groupStageSchedule.tables[_k2].loseBranch.root.data.roundNo;_i7++){for(_j7=0;_j7<listLoseMatchesFull.length;_j7++){if(listLoseMatchesFull[_j7].data.roundNo===_i7){_listLoseMatches.push(listLoseMatchesFull[_j7]);}}listLoseRound.push({listLoseMatches:_listLoseMatches,roundName:data.Schedule.groupStageSchedule.tables[_k2].loseRoundsNaming[_i7-1]});_listLoseMatches=[];}case 77:listTableDE.push({listWinRound:listWinRound,listLoseRound:listLoseRound,tableName:data.Schedule.groupStageSchedule.tables[_k2].tableName});listWinRound=[];listWinMatchesFull=[];listLoseRound=[];listLoseMatchesFull=[];case 82:_k2++;_context.next=67;break;case 85:tempVar2={groupStage:{listTableDE:listTableDE}};listTableDE=[];case 87:_context.next=89;return put({type:request.response.success,payload:_objectSpread({},tempVar,{},tempVar2)});case 89:_context.next=92;break;case 91:throw new Error(response.data.error.Message);case 92:_context.next=98;break;case 94:_context.prev=94;_context.t0=_context[\"catch\"](0);_context.next=98;return put({type:request.response.failed});case 98:case\"end\":return _context.stop();}}},_marked,null,[[0,94]]);}export default function watchQueryBracketBoardInfo(){return _regeneratorRuntime.wrap(function watchQueryBracketBoardInfo$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(GET_BRACKET_BOARD_INFO,doQueryBracketBoardInfo);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/BracketBoard/queryBracketBoardInfo.ts"],"names":["doQueryBracketBoardInfo","watchQueryBracketBoardInfo","call","takeLatest","put","query","METHOD","GET_BRACKET_BOARD_INFO","queryBracketBoardInfo","data","path","param","uri","datas","paths","params","GET","listMatchesFull","listWinMatchesFull","listLoseMatchesFull","listRound","listRRRound","listTableRR","listTableSE","listTableDE","listWinRound","listLoseRound","DFS","node","number","maxRound","fakeId","left","degree","roundNo","id","loser","matchNo","name","status","team1","team1Description","team2","team2Description","winner","right","push","includes","request","response","result","tempVar","tempVar2","error","MessageCode","Schedule","finalStageSchedule","formatName","listMatches","i","totalRound","j","matches","length","roundName","roundsNaming","finalStage","winBranch","bracket","root","listWinMatches","winRoundsNaming","loseBranch","listLoseMatches","loseRoundsNaming","hasGroupStage","groupStageSchedule","Object","keys","tables","k","tableName","groupStage","type","success","payload","Error","Message","failed"],"mappings":"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","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest, TypeAny } from 'interfaces/common';\r\nimport { GET_BRACKET_BOARD_INFO } from 'redux-saga/actions';\r\n\r\nconst queryBracketBoardInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'schedule';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nlet listMatchesFull: IParams[] = [];\r\nlet listWinMatchesFull: IParams[] = [];\r\nlet listLoseMatchesFull: IParams[] = [];\r\nlet listRound: IParams[] = [];\r\nlet listRRRound: IParams[] = [];\r\nlet listTableRR: IParams[] = [];\r\nlet listTableSE: IParams[] = [];\r\nlet listTableDE: IParams[] = [];\r\nlet listWinRound: IParams[] = [];\r\nlet listLoseRound: IParams[] = [];\r\n\r\nconst DFS = (node: IParams, number: number, maxRound: number, fakeId?: number) => {\r\n  if (node.left != null) {\r\n    if (number === 3) {\r\n      if ((node.degree as number) % 2 === 0) {\r\n        DFS(node.left as unknown as IParams, number, maxRound, fakeId);\r\n      } else {\r\n        DFS(node.left as unknown as IParams, number, maxRound, fakeId! * 2);\r\n      }\r\n    } else {\r\n      DFS(node.left as unknown as IParams, number, maxRound);\r\n    }\r\n  } else if (node.left == null && (((node.data as unknown as IParams).roundNo as number) >= 2 && ((node.data as unknown as IParams).roundNo as number) <= maxRound) && number !== 3) {\r\n    node.left = {\r\n      id: -1,\r\n      data: {\r\n        loser: null,\r\n        matchNo: -1,\r\n        name: '',\r\n        roundNo: ((node.data as unknown as IParams).roundNo as number) - 1,\r\n        status: null,\r\n        team1: null,\r\n        team1Description: null,\r\n        team2: null,\r\n        team2Description: null,\r\n        winner: null,\r\n      },\r\n      degree: null,\r\n      left: null,\r\n      right: null,\r\n    } as unknown as TypeAny;\r\n    DFS(node.left as unknown as IParams, number, maxRound);\r\n  }\r\n  if (node.right != null) {\r\n    if (number === 3) {\r\n      if ((node.degree as number) % 2 === 0) {\r\n        DFS(node.right as unknown as IParams, number, maxRound, fakeId);\r\n      } else {\r\n        DFS(node.right as unknown as IParams, number, maxRound, (fakeId! * 2) + 1);\r\n      }\r\n    } else {\r\n      DFS(node.right as unknown as IParams, number, maxRound);\r\n    }\r\n  } else if (node.right == null && (((node.data as unknown as IParams).roundNo as number) >= 2 && ((node.data as unknown as IParams).roundNo as number) <= maxRound) && number !== 3) {\r\n    node.right = {\r\n      id: -1,\r\n      data: {\r\n        loser: null,\r\n        matchNo: -1,\r\n        name: '',\r\n        roundNo: ((node.data as unknown as IParams).roundNo as number) - 1,\r\n        status: null,\r\n        team1: null,\r\n        team1Description: null,\r\n        team2: null,\r\n        team2Description: null,\r\n        winner: null,\r\n      },\r\n      degree: null,\r\n      left: null,\r\n      right: null,\r\n    } as unknown as TypeAny;\r\n    DFS(node.right as unknown as IParams, number, maxRound);\r\n  }\r\n  if (number === 1) {\r\n    listMatchesFull.push(node);\r\n  } else if (number === 2) {\r\n    listWinMatchesFull.push(node);\r\n  } else if (number === 3) {\r\n    if (((node.data as unknown as IParams).name as string).includes('L')) {\r\n      listLoseMatchesFull.push({ ...node, fakeId });\r\n    }\r\n  }\r\n}\r\n\r\nfunction* doQueryBracketBoardInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryBracketBoardInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    let tempVar: IParams = {};\r\n    let tempVar2: IParams = {};\r\n    if (response.data.error.MessageCode === 0) {\r\n      if (data.Schedule != null && data.Schedule.finalStageSchedule != null) {\r\n        if (data.Schedule.finalStageSchedule.formatName === 'Round Robin') {\r\n          let listMatches: IParams[] = [];\r\n          for (let i = 1; i <= data.Schedule.finalStageSchedule.totalRound; i++) {\r\n            for (let j = 0; j < data.Schedule.finalStageSchedule.matches.length; j++) {\r\n              if (data.Schedule.finalStageSchedule.matches[j].roundNo === i) {\r\n                listMatches.push(data.Schedule.finalStageSchedule.matches[j] as IParams);\r\n              }\r\n            }\r\n            listRRRound.push({ listMatches, roundName: data.Schedule.finalStageSchedule.roundsNaming[i - 1] } as unknown as IParams);\r\n            listMatches = [];\r\n          }\r\n          tempVar = { finalStage: { listRRRound } };\r\n          listRRRound = [];\r\n        } else {\r\n          if (data.Schedule.finalStageSchedule.winBranch == null) {\r\n            yield call(DFS, data.Schedule.finalStageSchedule.bracket.root, 1, data.Schedule.finalStageSchedule.bracket.root.data.roundNo);\r\n            let listMatches: IParams[] = [];\r\n            for (let i = 1; i <= data.Schedule.finalStageSchedule.bracket.root.data.roundNo; i++) {\r\n              for (let j = 0; j < listMatchesFull.length; j++) {\r\n                if ((listMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                  listMatches.push(listMatchesFull[j] as IParams);\r\n                }\r\n              }\r\n              listRound.push({ listMatches, roundName: data.Schedule.finalStageSchedule.roundsNaming[i - 1] } as unknown as IParams);\r\n              listMatches = [];\r\n            }\r\n            tempVar = { finalStage: { listRound } };\r\n            listRound = [];\r\n            listMatchesFull = [];\r\n          } else {\r\n            yield call(DFS, data.Schedule.finalStageSchedule.winBranch.root, 2, data.Schedule.finalStageSchedule.winBranch.root.data.roundNo);\r\n            let listWinMatches = [];\r\n            for (let i = 1; i <= data.Schedule.finalStageSchedule.winBranch.root.data.roundNo; i++) {\r\n              for (let j = 0; j < listWinMatchesFull.length; j++) {\r\n                if ((listWinMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                  listWinMatches.push(listWinMatchesFull[j]);\r\n                }\r\n              }\r\n              listWinRound.push({ listWinMatches, roundName: data.Schedule.finalStageSchedule.winRoundsNaming[i - 1] } as unknown as IParams);\r\n              listWinMatches = [];\r\n            }\r\n            if (data.Schedule.finalStageSchedule.loseBranch.root != null) {\r\n              yield call(DFS, data.Schedule.finalStageSchedule.loseBranch.root, 3, data.Schedule.finalStageSchedule.loseBranch.root.data.roundNo, 1);\r\n              let listLoseMatches = [];\r\n              for (let i = 1; i <= data.Schedule.finalStageSchedule.loseBranch.root.data.roundNo; i++) {\r\n                for (let j = 0; j < listLoseMatchesFull.length; j++) {\r\n                  if ((listLoseMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                    listLoseMatches.push(listLoseMatchesFull[j]);\r\n                  }\r\n                }\r\n                listLoseRound.push({ listLoseMatches, roundName: data.Schedule.finalStageSchedule.loseRoundsNaming[i - 1] } as unknown as IParams);\r\n                listLoseMatches = [];\r\n              }\r\n            }\r\n            tempVar = { finalStage: { listWinRound, listLoseRound } };\r\n            listWinRound = [];\r\n            listWinMatchesFull = [];\r\n            listLoseRound = [];\r\n            listLoseMatchesFull = [];\r\n          }\r\n        }\r\n\r\n      }\r\n      if (data.Schedule != null && data.Schedule.hasGroupStage === true) {\r\n        if (data.Schedule.groupStageSchedule != null && Object.keys(data.Schedule.groupStageSchedule).length > 0) {\r\n          if (data.Schedule.groupStageSchedule.formatName === 'Round Robin') {\r\n            for (let i = 0; i < data.Schedule.groupStageSchedule.tables.length; i++) {\r\n              let listMatches: IParams[] = [];\r\n              if (data.Schedule.groupStageSchedule.tables[i].totalRound != null) {\r\n                for (let j = 1; j <= data.Schedule.groupStageSchedule.tables[i].totalRound; j++) {\r\n                  if (data.Schedule.groupStageSchedule.tables[i].matches != null) {\r\n                    for (let k = 0; k < data.Schedule.groupStageSchedule.tables[i].matches.length; k++) {\r\n                      if (data.Schedule.groupStageSchedule.tables[i].matches[k].roundNo === j) {\r\n                        listMatches.push(data.Schedule.groupStageSchedule.tables[i].matches[k] as IParams);\r\n                      }\r\n                    }\r\n                    listRRRound.push({ listMatches, roundName: data.Schedule.groupStageSchedule.tables[i].roundsNaming[j - 1] } as IParams);\r\n                    listMatches = [];\r\n                  }\r\n                }\r\n              }\r\n              listTableRR.push({ listRRRound, tableName: data.Schedule.groupStageSchedule.tables[i].tableName } as IParams);\r\n              listRRRound = [];\r\n            }\r\n            tempVar2 = { groupStage: { listTableRR } };\r\n            listTableRR = [];\r\n          } else {\r\n            if (data.Schedule.groupStageSchedule.formatName !== 'Double Elimination') {\r\n              for (let k = 0; k < data.Schedule.groupStageSchedule.tables.length; k++) {\r\n                if (data.Schedule.groupStageSchedule.tables[k].bracket != null) {\r\n                  yield call(DFS, data.Schedule.groupStageSchedule.tables[k].bracket.root, 1, data.Schedule.groupStageSchedule.tables[k].bracket.root.data.roundNo);\r\n                  let listMatches: IParams[] = [];\r\n                  for (let i = 1; i <= data.Schedule.groupStageSchedule.tables[k].bracket.root.data.roundNo; i++) {\r\n                    for (let j = 0; j < listMatchesFull.length; j++) {\r\n                      if ((listMatchesFull[j].data as IParams).roundNo === i) {\r\n                        listMatches.push(listMatchesFull[j] as IParams);\r\n                      }\r\n                    }\r\n                    listRound.push({ listMatches, roundName: data.Schedule.groupStageSchedule.tables[k].roundsNaming[i - 1] } as IParams);\r\n                    listMatches = [];\r\n                  }\r\n                }\r\n                listTableSE.push({ listRound, tableName: data.Schedule.groupStageSchedule.tables[k].tableName } as IParams);\r\n                listRound = [];\r\n                listMatchesFull = [];\r\n              }\r\n              tempVar2 = { groupStage: { listTableSE } };\r\n              listTableSE = [];\r\n            } else {\r\n              for (let k = 0; k < data.Schedule.groupStageSchedule.tables.length; k++) {\r\n                yield call(DFS, data.Schedule.groupStageSchedule.tables[k].winBranch.root, 2, data.Schedule.groupStageSchedule.tables[k].winBranch.root.data.roundNo);\r\n                let listWinMatches = [];\r\n                for (let i = 1; i <= data.Schedule.groupStageSchedule.tables[k].winBranch.root.data.roundNo; i++) {\r\n                  for (let j = 0; j < listWinMatchesFull.length; j++) {\r\n                    if ((listWinMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                      listWinMatches.push(listWinMatchesFull[j]);\r\n                    }\r\n                  }\r\n                  listWinRound.push({ listWinMatches, roundName: data.Schedule.groupStageSchedule.tables[k].winRoundsNaming[i - 1] } as IParams);\r\n                  listWinMatches = [];\r\n                }\r\n                if (data.Schedule.groupStageSchedule.tables[k].loseBranch != null && data.Schedule.groupStageSchedule.tables[k].loseBranch.root != null) {\r\n                  yield call(DFS, data.Schedule.groupStageSchedule.tables[k].loseBranch.root, 3, data.Schedule.groupStageSchedule.tables[k].loseBranch.root.data.roundNo, 1);\r\n                  let listLoseMatches = [];\r\n                  for (let i = 1; i <= data.Schedule.groupStageSchedule.tables[k].loseBranch.root.data.roundNo; i++) {\r\n                    for (let j = 0; j < listLoseMatchesFull.length; j++) {\r\n                      if ((listLoseMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                        listLoseMatches.push(listLoseMatchesFull[j]);\r\n                      }\r\n                    }\r\n                    listLoseRound.push({ listLoseMatches, roundName: data.Schedule.groupStageSchedule.tables[k].loseRoundsNaming[i - 1] } as IParams);\r\n                    listLoseMatches = [];\r\n                  }\r\n                }\r\n                listTableDE.push({ listWinRound, listLoseRound, tableName: data.Schedule.groupStageSchedule.tables[k].tableName });\r\n                listWinRound = [];\r\n                listWinMatchesFull = [];\r\n                listLoseRound = [];\r\n                listLoseMatchesFull = [];\r\n              }\r\n              tempVar2 = { groupStage: { listTableDE } };\r\n              listTableDE = [];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: {\r\n          ...tempVar,\r\n          ...tempVar2\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryBracketBoardInfo() {\r\n  yield takeLatest(GET_BRACKET_BOARD_INFO, doQueryBracketBoardInfo);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}