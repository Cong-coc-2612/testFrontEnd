{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doCreateNewTournament),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchCreateNewTournament);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{CREATE_NEW_TOURNAMENT,COMMON_SHOW_NOTIFICATION}from'redux-saga/actions';import history from\"utils/history\";var createNewTournament=function createNewTournament(data,path,param){var uri='tournament';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.POST,datas,params,paths);};function doCreateNewTournament(request){var response,data;return _regeneratorRuntime.wrap(function doCreateNewTournament$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(createNewTournament,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;data=response.data.result;if(!(response.data.error.MessageCode===0)){_context.next=10;break;}_context.next=8;return history.push(\"/tournament/\".concat(data.Tournament.id));case 8:_context.next=11;break;case 10:throw new Error(response.data.error.Message);case 11:_context.next=17;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);_context.next=17;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'CreateNewTournament',content:_context.t0,time:new Date()}});case 17:case\"end\":return _context.stop();}}},_marked,null,[[0,13]]);}export default function watchCreateNewTournament(){return _regeneratorRuntime.wrap(function watchCreateNewTournament$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(CREATE_NEW_TOURNAMENT,doCreateNewTournament);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/CreateNewTournament/createNewTournament.ts"],"names":["doCreateNewTournament","watchCreateNewTournament","call","takeLatest","put","query","METHOD","CREATE_NEW_TOURNAMENT","COMMON_SHOW_NOTIFICATION","history","createNewTournament","data","path","param","uri","datas","paths","params","POST","request","response","result","error","MessageCode","push","Tournament","id","Error","Message","type","title","content","time","Date"],"mappings":"wXAeUA,qB,iDAsBeC,wB,EArCzB,OAASC,IAAT,CAAeC,UAAf,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,iBAA9B,CAEA,OAASC,qBAAT,CAAgCC,wBAAhC,KAAgE,oBAAhE,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CAGA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,IAAD,CAAgBC,IAAhB,CAAuCC,KAAvC,CAA0D,CACpF,GAAMC,CAAAA,GAAG,CAAG,YAAZ,CACA,GAAMC,CAAAA,KAAK,kBAAQJ,IAAR,CAAX,CACA,GAAMK,CAAAA,KAAK,CAAGJ,IAAd,CACA,GAAMK,CAAAA,MAAM,kBAAQJ,KAAR,CAAZ,CACA,MAAOR,CAAAA,KAAK,CAACS,GAAD,CAAMR,MAAM,CAACY,IAAb,CAAmBH,KAAnB,CAA0BE,MAA1B,CAAkCD,KAAlC,CAAZ,CACD,CAND,CAQA,QAAUhB,CAAAA,qBAAV,CAAgCmB,OAAhC,kLAEqB,MAAMjB,CAAAA,IAAI,CAACQ,mBAAD,CAAsBS,OAAO,CAACR,IAAR,CAAaA,IAAnC,CAAyCQ,OAAO,CAACR,IAAR,CAAaC,IAAtD,CAA4DO,OAAO,CAACR,IAAR,CAAaE,KAAzE,CAAV,CAFrB,OAEUO,QAFV,eAGUT,IAHV,CAGiBS,QAAQ,CAACT,IAAT,CAAcU,MAH/B,MAIQD,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBC,WAApB,GAAoC,CAJ5C,2CAKM,MAAMd,CAAAA,OAAO,CAACe,IAAR,uBAA4Bb,IAAI,CAACc,UAAL,CAAgBC,EAA5C,EAAN,CALN,2CAOY,IAAIC,CAAAA,KAAJ,CAAUP,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBM,OAA9B,CAPZ,2GAUI,MAAMxB,CAAAA,GAAG,CAAC,CACRyB,IAAI,CAAErB,wBADE,CAERG,IAAI,CAAE,CACJkB,IAAI,CAAE,OADF,CAEJC,KAAK,CAAE,qBAFH,CAGJC,OAAO,YAHH,CAIJC,IAAI,CAAE,GAAIC,CAAAA,IAAJ,EAJF,CAFE,CAAD,CAAT,CAVJ,qEAsBA,cAAe,SAAUhC,CAAAA,wBAAV,wJACb,MAAME,CAAAA,UAAU,CAACI,qBAAD,CAAwBP,qBAAxB,CAAhB,CADa","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { CREATE_NEW_TOURNAMENT, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\nimport history from \"utils/history\";\r\n\r\n\r\nconst createNewTournament = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'tournament';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doCreateNewTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(createNewTournament, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield history.push(`/tournament/${data.Tournament.id}`);\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'CreateNewTournament',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchCreateNewTournament() {\r\n  yield takeLatest(CREATE_NEW_TOURNAMENT, doCreateNewTournament);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}