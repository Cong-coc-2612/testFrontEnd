{"ast":null,"code":"import*as dateFns from'date-fns';export function formatDateToString(date){var formatOutput=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'yyyyMMdd';if(date==null){return null;}return dateFns.format(date,formatOutput);}export function formatTimeToDisplay(stringInput){var formatOutput=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'HH:mm:ss';var formatInput=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'yyyyMMddHHmmss';var ignoreTimeZone=arguments.length>3?arguments[3]:undefined;try{if(!stringInput){return null;}var time=dateFns.parse(stringInput,formatInput,new Date());if(ignoreTimeZone!==true){time=dateFns.addHours(time,7);}return dateFns.format(time,formatOutput);}catch(error){return null;}}export function formatDateToDisplay(stringInput){var formatOutput=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'dd/MM/yyyy';var formatInput=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'yyyyMMdd';try{if(!stringInput){return'';}var time=dateFns.parse(stringInput,formatInput,new Date());// time = dateFns.addHours(time, 7);\nreturn dateFns.format(time,formatOutput);}catch(error){return null;}}export function formatStringToDate(stringInput){var formatInput=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'yyyyMMdd';if(stringInput==null){return new Date();}return dateFns.parse(stringInput,formatInput,new Date());}export function addDays(date,day){return dateFns.addDays(date,day);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/utils/datetime.ts"],"names":["dateFns","formatDateToString","date","formatOutput","format","formatTimeToDisplay","stringInput","formatInput","ignoreTimeZone","time","parse","Date","addHours","error","formatDateToDisplay","formatStringToDate","addDays","day"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,OAAZ,KAAyB,UAAzB,CAEA,MAAO,SAASC,CAAAA,kBAAT,CAA4BC,IAA5B,CAA0E,IAA3BC,CAAAA,YAA2B,2DAAZ,UAAY,CAC/E,GAAID,IAAI,EAAI,IAAZ,CAAkB,CAChB,MAAO,KAAP,CACD,CACD,MAAOF,CAAAA,OAAO,CAACI,MAAR,CAAeF,IAAf,CAAqBC,YAArB,CAAP,CACD,CAED,MAAO,SAASE,CAAAA,mBAAT,CACLC,WADK,CAKL,IAHAH,CAAAA,YAGA,2DAHe,UAGf,IAFAI,CAAAA,WAEA,2DAFc,gBAEd,IADAC,CAAAA,cACA,2CACA,GAAI,CACF,GAAI,CAACF,WAAL,CAAkB,CAChB,MAAO,KAAP,CACD,CACD,GAAIG,CAAAA,IAAI,CAAGT,OAAO,CAACU,KAAR,CAAcJ,WAAd,CAA2BC,WAA3B,CAAwC,GAAII,CAAAA,IAAJ,EAAxC,CAAX,CACA,GAAIH,cAAc,GAAK,IAAvB,CAA6B,CAC3BC,IAAI,CAAGT,OAAO,CAACY,QAAR,CAAiBH,IAAjB,CAAuB,CAAvB,CAAP,CACD,CACD,MAAOT,CAAAA,OAAO,CAACI,MAAR,CAAeK,IAAf,CAAqBN,YAArB,CAAP,CACD,CAAC,MAAOU,KAAP,CAAc,CACd,MAAO,KAAP,CACD,CACF,CAED,MAAO,SAASC,CAAAA,mBAAT,CAA6BR,WAA7B,CAA0G,IAAvDH,CAAAA,YAAuD,2DAAxC,YAAwC,IAA1BI,CAAAA,WAA0B,2DAAZ,UAAY,CAC/G,GAAI,CACF,GAAI,CAACD,WAAL,CAAkB,CAChB,MAAO,EAAP,CACD,CACD,GAAIG,CAAAA,IAAI,CAAGT,OAAO,CAACU,KAAR,CAAcJ,WAAd,CAA2BC,WAA3B,CAAwC,GAAII,CAAAA,IAAJ,EAAxC,CAAX,CACA;AACA,MAAOX,CAAAA,OAAO,CAACI,MAAR,CAAeK,IAAf,CAAqBN,YAArB,CAAP,CACD,CAAC,MAAOU,KAAP,CAAc,CACd,MAAO,KAAP,CACD,CACF,CAED,MAAO,SAASE,CAAAA,kBAAT,CAA4BT,WAA5B,CAAuF,IAA1BC,CAAAA,WAA0B,2DAAZ,UAAY,CAC5F,GAAID,WAAW,EAAI,IAAnB,CAAyB,CACvB,MAAO,IAAIK,CAAAA,IAAJ,EAAP,CACD,CAED,MAAOX,CAAAA,OAAO,CAACU,KAAR,CAAcJ,WAAd,CAA2BC,WAA3B,CAAwC,GAAII,CAAAA,IAAJ,EAAxC,CAAP,CACD,CAED,MAAO,SAASK,CAAAA,OAAT,CAAiBd,IAAjB,CAA6Be,GAA7B,CAA0C,CAC/C,MAAOjB,CAAAA,OAAO,CAACgB,OAAR,CAAgBd,IAAhB,CAAsBe,GAAtB,CAAP,CACD","sourcesContent":["import * as dateFns from 'date-fns';\r\n\r\nexport function formatDateToString(date: Date | null, formatOutput = 'yyyyMMdd') {\r\n  if (date == null) {\r\n    return null;\r\n  }\r\n  return dateFns.format(date, formatOutput);\r\n}\r\n\r\nexport function formatTimeToDisplay(\r\n  stringInput?: string,\r\n  formatOutput = 'HH:mm:ss',\r\n  formatInput = 'yyyyMMddHHmmss',\r\n  ignoreTimeZone?: boolean\r\n) {\r\n  try {\r\n    if (!stringInput) {\r\n      return null;\r\n    }\r\n    let time = dateFns.parse(stringInput, formatInput, new Date());\r\n    if (ignoreTimeZone !== true) {\r\n      time = dateFns.addHours(time, 7);\r\n    }\r\n    return dateFns.format(time, formatOutput);\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function formatDateToDisplay(stringInput?: string, formatOutput = 'dd/MM/yyyy', formatInput = 'yyyyMMdd') {\r\n  try {\r\n    if (!stringInput) {\r\n      return '';\r\n    }\r\n    let time = dateFns.parse(stringInput, formatInput, new Date());\r\n    // time = dateFns.addHours(time, 7);\r\n    return dateFns.format(time, formatOutput);\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function formatStringToDate(stringInput: string | undefined, formatInput = 'yyyyMMdd') {\r\n  if (stringInput == null) {\r\n    return new Date();\r\n  }\r\n\r\n  return dateFns.parse(stringInput, formatInput, new Date());\r\n}\r\n\r\nexport function addDays(date: Date, day: number) {\r\n  return dateFns.addDays(date, day);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}