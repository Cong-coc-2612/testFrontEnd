{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doQueryBracketRankInfo),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchQueryBracketRankInfo);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{GET_BRACKET_RANK_INFO}from'redux-saga/actions';var queryBracketRankInfo=function queryBracketRankInfo(data,path,param){var uri='schedule';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.GET,datas,params,paths);};function doQueryBracketRankInfo(request){var response,data;return _regeneratorRuntime.wrap(function doQueryBracketRankInfo$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(queryBracketRankInfo,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;data=response.data.result;if(!(response.data.error.MessageCode===0)){_context.next=10;break;}_context.next=8;return put({type:request.response.success,payload:{finalStageScheduleRanking:data.Schedule.finalStageSchedule.rankingTable}});case 8:_context.next=11;break;case 10:throw new Error(response.data.error.Message);case 11:_context.next=17;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);_context.next=17;return put({type:request.response.failed});case 17:case\"end\":return _context.stop();}}},_marked,null,[[0,13]]);}export default function watchQueryBracketRankInfo(){return _regeneratorRuntime.wrap(function watchQueryBracketRankInfo$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(GET_BRACKET_RANK_INFO,doQueryBracketRankInfo);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/BracketRank/queryBracketRankInfo.ts"],"names":["doQueryBracketRankInfo","watchQueryBracketRankInfo","call","takeLatest","put","query","METHOD","GET_BRACKET_RANK_INFO","queryBracketRankInfo","data","path","param","uri","datas","paths","params","GET","request","response","result","error","MessageCode","type","success","payload","finalStageScheduleRanking","Schedule","finalStageSchedule","rankingTable","Error","Message","failed"],"mappings":"wXAaUA,sB,iDAqBeC,yB,EAlCzB,OAASC,IAAT,CAAeC,UAAf,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,iBAA9B,CAEA,OAASC,qBAAT,KAAsC,oBAAtC,CAEA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,IAAD,CAAgBC,IAAhB,CAAuCC,KAAvC,CAA0D,CACrF,GAAMC,CAAAA,GAAG,CAAG,UAAZ,CACA,GAAMC,CAAAA,KAAK,kBAAQJ,IAAR,CAAX,CACA,GAAMK,CAAAA,KAAK,CAAGJ,IAAd,CACA,GAAMK,CAAAA,MAAM,kBAAQJ,KAAR,CAAZ,CACA,MAAON,CAAAA,KAAK,CAACO,GAAD,CAAMN,MAAM,CAACU,GAAb,CAAkBH,KAAlB,CAAyBE,MAAzB,CAAiCD,KAAjC,CAAZ,CACD,CAND,CAQA,QAAUd,CAAAA,sBAAV,CAAiCiB,OAAjC,mLAEqB,MAAMf,CAAAA,IAAI,CAACM,oBAAD,CAAuBS,OAAO,CAACR,IAAR,CAAaA,IAApC,CAA0CQ,OAAO,CAACR,IAAR,CAAaC,IAAvD,CAA6DO,OAAO,CAACR,IAAR,CAAaE,KAA1E,CAAV,CAFrB,OAEUO,QAFV,eAGUT,IAHV,CAGiBS,QAAQ,CAACT,IAAT,CAAcU,MAH/B,MAIQD,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBC,WAApB,GAAoC,CAJ5C,2CAKM,MAAMjB,CAAAA,GAAG,CAAC,CACRkB,IAAI,CAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf,CAERC,OAAO,CAAE,CACPC,yBAAyB,CAAEhB,IAAI,CAACiB,QAAL,CAAcC,kBAAd,CAAiCC,YADrD,CAFD,CAAD,CAAT,CALN,2CAYY,IAAIC,CAAAA,KAAJ,CAAUX,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBU,OAA9B,CAZZ,2GAeI,MAAM1B,CAAAA,GAAG,CAAC,CACRkB,IAAI,CAAEL,OAAO,CAACC,QAAR,CAAiBa,MADf,CAAD,CAAT,CAfJ,qEAqBA,cAAe,SAAU9B,CAAAA,yBAAV,yJACb,MAAME,CAAAA,UAAU,CAACI,qBAAD,CAAwBP,sBAAxB,CAAhB,CADa","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { GET_BRACKET_RANK_INFO } from 'redux-saga/actions';\r\n\r\nconst queryBracketRankInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'schedule';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryBracketRankInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryBracketRankInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: {\r\n          finalStageScheduleRanking: data.Schedule.finalStageSchedule.rankingTable,\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryBracketRankInfo() {\r\n  yield takeLatest(GET_BRACKET_RANK_INFO, doQueryBracketRankInfo);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}