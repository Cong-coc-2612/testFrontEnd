{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doActiveAccount),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchActiveAccount);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{ACTIVE_ACCOUNT}from'redux-saga/actions';var activeAccount=function activeAccount(data,path,param){var uri='login/verify-authentication';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.POST,datas,params,paths);};function doActiveAccount(request){var response;return _regeneratorRuntime.wrap(function doActiveAccount$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(activeAccount,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;if(!(response.data.error.MessageCode===0)){_context.next=7;break;}_context.next=7;return put({type:request.response.success});case 7:_context.next=13;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);_context.next=13;return put({type:request.response.failed});case 13:case\"end\":return _context.stop();}}},_marked,null,[[0,9]]);}export default function watchActiveAccount(){return _regeneratorRuntime.wrap(function watchActiveAccount$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(ACTIVE_ACCOUNT,doActiveAccount);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/ActiveAccount/activeAccount.ts"],"names":["doActiveAccount","watchActiveAccount","call","takeLatest","put","query","METHOD","ACTIVE_ACCOUNT","activeAccount","data","path","param","uri","datas","paths","params","POST","request","response","error","MessageCode","type","success","failed"],"mappings":"wXAaUA,e,iDAeeC,kB,EA5BzB,OAASC,IAAT,CAAeC,UAAf,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,iBAA9B,CAEA,OAASC,cAAT,KAA+B,oBAA/B,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,IAAD,CAAgBC,IAAhB,CAAuCC,KAAvC,CAA0D,CAC9E,GAAMC,CAAAA,GAAG,CAAG,6BAAZ,CACA,GAAMC,CAAAA,KAAK,kBAAQJ,IAAR,CAAX,CACA,GAAMK,CAAAA,KAAK,CAAGJ,IAAd,CACA,GAAMK,CAAAA,MAAM,kBAAQJ,KAAR,CAAZ,CACA,MAAON,CAAAA,KAAK,CAACO,GAAD,CAAMN,MAAM,CAACU,IAAb,CAAmBH,KAAnB,CAA0BE,MAA1B,CAAkCD,KAAlC,CAAZ,CACD,CAND,CAQA,QAAUd,CAAAA,eAAV,CAA0BiB,OAA1B,uKAEqB,MAAMf,CAAAA,IAAI,CAACM,aAAD,CAAgBS,OAAO,CAACR,IAAR,CAAaA,IAA7B,CAAmCQ,OAAO,CAACR,IAAR,CAAaC,IAAhD,CAAsDO,OAAO,CAACR,IAAR,CAAaE,KAAnE,CAAV,CAFrB,OAEUO,QAFV,oBAGQA,QAAQ,CAACT,IAAT,CAAcU,KAAd,CAAoBC,WAApB,GAAoC,CAH5C,0CAIM,MAAMhB,CAAAA,GAAG,CAAC,CACRiB,IAAI,CAAEJ,OAAO,CAACC,QAAR,CAAiBI,OADf,CAAD,CAAT,CAJN,uGASI,MAAMlB,CAAAA,GAAG,CAAC,CACRiB,IAAI,CAAEJ,OAAO,CAACC,QAAR,CAAiBK,MADf,CAAD,CAAT,CATJ,oEAeA,cAAe,SAAUtB,CAAAA,kBAAV,kJACb,MAAME,CAAAA,UAAU,CAACI,cAAD,CAAiBP,eAAjB,CAAhB,CADa","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { ACTIVE_ACCOUNT } from 'redux-saga/actions';\r\n\r\nconst activeAccount = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'login/verify-authentication';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doActiveAccount(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(activeAccount, request.data.data, request.data.path, request.data.param);\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchActiveAccount() {\r\n  yield takeLatest(ACTIVE_ACCOUNT, doActiveAccount);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}