{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doAddACompetition),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchAddACompetition);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{COMMON_SHOW_NOTIFICATION,ADD_A_COMPETITION,QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID}from'redux-saga/actions';import{QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS}from'components/CompetitionsSetting/reducers';var addACompetition=function addACompetition(data,path,param){var uri='competition';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.POST,datas,params,paths);};function doAddACompetition(request){var response,data;return _regeneratorRuntime.wrap(function doAddACompetition$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(addACompetition,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;data=response.data.result;if(!(response.data.error.MessageCode===0)){_context.next=12;break;}_context.next=8;return put({type:request.response.success,payload:data.Competition});case 8:_context.next=10;return put({type:QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID,response:{success:QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,failed:QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS},data:{path:'',param:{tournamentId:request.data.data.tournamentId,limit:99},data:{}}});case 10:_context.next=13;break;case 12:throw new Error(response.data.error.Message);case 13:_context.next=19;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](0);_context.next=19;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'AddACompetition',content:_context.t0,time:new Date()}});case 19:case\"end\":return _context.stop();}}},_marked,null,[[0,15]]);}export default function watchAddACompetition(){return _regeneratorRuntime.wrap(function watchAddACompetition$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(ADD_A_COMPETITION,doAddACompetition);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/AddACompetition/addACompetition.ts"],"names":["doAddACompetition","watchAddACompetition","call","takeLatest","put","query","METHOD","COMMON_SHOW_NOTIFICATION","ADD_A_COMPETITION","QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID","QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS","addACompetition","data","path","param","uri","datas","paths","params","POST","request","response","result","error","MessageCode","type","success","payload","Competition","failed","tournamentId","limit","Error","Message","title","content","time","Date"],"mappings":"wXAcUA,iB,iDAwCeC,oB,EAtDzB,OAASC,IAAT,CAAeC,UAAf,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,iBAA9B,CAEA,OAASC,wBAAT,CAAmCC,iBAAnC,CAAsDC,sCAAtD,KAAoG,oBAApG,CACA,OAASC,8CAAT,KAA+D,yCAA/D,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,IAAD,CAAgBC,IAAhB,CAAuCC,KAAvC,CAA0D,CAChF,GAAMC,CAAAA,GAAG,CAAG,aAAZ,CACA,GAAMC,CAAAA,KAAK,kBAAQJ,IAAR,CAAX,CACA,GAAMK,CAAAA,KAAK,CAAGJ,IAAd,CACA,GAAMK,CAAAA,MAAM,kBAAQJ,KAAR,CAAZ,CACA,MAAOT,CAAAA,KAAK,CAACU,GAAD,CAAMT,MAAM,CAACa,IAAb,CAAmBH,KAAnB,CAA0BE,MAA1B,CAAkCD,KAAlC,CAAZ,CACD,CAND,CAQA,QAAUjB,CAAAA,iBAAV,CAA4BoB,OAA5B,8KAEqB,MAAMlB,CAAAA,IAAI,CAACS,eAAD,CAAkBS,OAAO,CAACR,IAAR,CAAaA,IAA/B,CAAqCQ,OAAO,CAACR,IAAR,CAAaC,IAAlD,CAAwDO,OAAO,CAACR,IAAR,CAAaE,KAArE,CAAV,CAFrB,OAEUO,QAFV,eAGUT,IAHV,CAGiBS,QAAQ,CAACT,IAAT,CAAcU,MAH/B,MAIQD,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBC,WAApB,GAAoC,CAJ5C,2CAKM,MAAMpB,CAAAA,GAAG,CAAC,CACRqB,IAAI,CAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf,CAERC,OAAO,CAAEf,IAAI,CAACgB,WAFN,CAAD,CAAT,CALN,wBASM,MAAMxB,CAAAA,GAAG,CAAC,CACRqB,IAAI,CAAEhB,sCADE,CAERY,QAAQ,CAAE,CACRK,OAAO,CAAEhB,8CADD,CAERmB,MAAM,CAAEnB,8CAFA,CAFF,CAMRE,IAAI,CAAE,CACJC,IAAI,CAAE,EADF,CAEJC,KAAK,CAAE,CACLgB,YAAY,CAAEV,OAAO,CAACR,IAAR,CAAaA,IAAb,CAAkBkB,YAD3B,CAELC,KAAK,CAAE,EAFF,CAFH,CAMJnB,IAAI,CAAE,EANF,CANE,CAAD,CAAT,CATN,4CAyBY,IAAIoB,CAAAA,KAAJ,CAAUX,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBU,OAA9B,CAzBZ,2GA4BI,MAAM7B,CAAAA,GAAG,CAAC,CACRqB,IAAI,CAAElB,wBADE,CAERK,IAAI,CAAE,CACJa,IAAI,CAAE,OADF,CAEJS,KAAK,CAAE,iBAFH,CAGJC,OAAO,YAHH,CAIJC,IAAI,CAAE,GAAIC,CAAAA,IAAJ,EAJF,CAFE,CAAD,CAAT,CA5BJ,qEAwCA,cAAe,SAAUpC,CAAAA,oBAAV,oJACb,MAAME,CAAAA,UAAU,CAACK,iBAAD,CAAoBR,iBAApB,CAAhB,CADa","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, ADD_A_COMPETITION, QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID } from 'redux-saga/actions';\r\nimport { QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS } from 'components/CompetitionsSetting/reducers';\r\n\r\nconst addACompetition = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'competition';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doAddACompetition(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(addACompetition, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.Competition,\r\n      });\r\n      yield put({\r\n        type: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID,\r\n        response: {\r\n          success: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\r\n          failed: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            tournamentId: request.data.data.tournamentId,\r\n            limit: 99,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'AddACompetition',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchAddACompetition() {\r\n  yield takeLatest(ADD_A_COMPETITION, doAddACompetition);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}