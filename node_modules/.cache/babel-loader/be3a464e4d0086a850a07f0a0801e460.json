{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doUpdateAvatarTournament),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchUpdateAvatarTournament);import axios from'axios';import{call,put,takeLatest}from'redux-saga/effects';import'whatwg-fetch';import{COMMON_SHOW_NOTIFICATION,TOURNAMENT_UPDATE_AVATAR}from'redux-saga/actions';import{QUERY_TOURNAMENT_INFO_SUCCESS}from'screens/TournamentInfo/reducers';import store from'redux-saga/store';import config from'config';var uploadFile=function uploadFile(data,path,param){if(param.file!=null){var file=param.file[0];var form=new FormData();form.append('file',file);// return query(uri, METHOD.POST, undefined, undefined, paths, form);\nreturn new Promise(function(resolve,reject){axios.post(\"\".concat(config.apiUrl.baseURI,\"tournament/uploadAvatar\"),form,{params:{id:param.id},headers:{'Content-Type':'multipart/form-data'}}).then(function(response){console.log('SUCCESS!!',response);resolve(response);}).catch(function(error){console.log('FAILED!!',error);reject(error);});});}else{return null;}};function doUpdateAvatarTournament(request){var response,data;return _regeneratorRuntime.wrap(function doUpdateAvatarTournament$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(uploadFile,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;data=response.data.result;if(!(response.data.error.MessageCode===0)){_context.next=12;break;}_context.next=8;return put({type:request.response.success,payload:data.Tournament});case 8:_context.next=10;return put({type:QUERY_TOURNAMENT_INFO_SUCCESS,payload:_objectSpread({},store.getState().tournamentInfo,{Tournament:data.Tournament})});case 10:_context.next=13;break;case 12:throw new Error(response.data.error.Message);case 13:_context.next=19;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](0);_context.next=19;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'Update Background',content:_context.t0,time:new Date()}});case 19:case\"end\":return _context.stop();}}},_marked,null,[[0,15]]);}export default function watchUpdateAvatarTournament(){return _regeneratorRuntime.wrap(function watchUpdateAvatarTournament$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(TOURNAMENT_UPDATE_AVATAR,doUpdateAvatarTournament);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/UpdateAvatarTournament/updateAvatarTournament.ts"],"names":["doUpdateAvatarTournament","watchUpdateAvatarTournament","axios","call","put","takeLatest","COMMON_SHOW_NOTIFICATION","TOURNAMENT_UPDATE_AVATAR","QUERY_TOURNAMENT_INFO_SUCCESS","store","config","uploadFile","data","path","param","file","form","FormData","append","Promise","resolve","reject","post","apiUrl","baseURI","params","id","headers","then","response","console","log","catch","error","request","result","MessageCode","type","success","payload","Tournament","getState","tournamentInfo","Error","Message","title","content","time","Date"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\nimport 'whatwg-fetch';\r\nimport { IParams, IRequest, IBigRequest, IResponse } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, TOURNAMENT_UPDATE_AVATAR } from 'redux-saga/actions';\r\nimport { QUERY_TOURNAMENT_INFO_SUCCESS } from 'screens/TournamentInfo/reducers';\r\nimport store from 'redux-saga/store';\r\nimport config from 'config';\r\n\r\nconst uploadFile = (data: IParams, path: string | number, param: IParams) => {\r\n  if (param.file != null) {\r\n    const file: File = (param.file as unknown as IParams[])[0] as unknown as File;\r\n    const form = new FormData();\r\n    form.append('file', file);\r\n    // return query(uri, METHOD.POST, undefined, undefined, paths, form);\r\n    return new Promise<IResponse<IParams>>((resolve: Function, reject: Function) => {\r\n      axios.post(`${config.apiUrl.baseURI}tournament/uploadAvatar`,\r\n        form,\r\n        {\r\n          params: { id: param.id },\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        }\r\n      ).then((response) => {\r\n        console.log('SUCCESS!!', response);\r\n        resolve(response);\r\n      })\r\n        .catch((error) => {\r\n          console.log('FAILED!!', error);\r\n          reject(error);\r\n        });\r\n    });\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nfunction* doUpdateAvatarTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(uploadFile, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.Tournament,\r\n      });\r\n      yield put({\r\n        type: QUERY_TOURNAMENT_INFO_SUCCESS,\r\n        payload: { ...store.getState().tournamentInfo, Tournament: data.Tournament },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'Update Background',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchUpdateAvatarTournament() {\r\n  yield takeLatest(TOURNAMENT_UPDATE_AVATAR, doUpdateAvatarTournament);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}