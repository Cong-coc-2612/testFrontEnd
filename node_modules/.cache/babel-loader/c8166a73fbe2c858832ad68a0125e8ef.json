{"ast":null,"code":"import _classCallCheck from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import{connect}from'react-redux';import ReduxBlockUi from'react-block-ui/redux';import{isAfter,isBefore}from'date-fns';import DatePicker from\"react-datepicker\";import'react-block-ui/style.css';import TextInput from'components/TextInput';import{formatStringToDate}from'utils/datetime';import{checkUsernameExisted,setUsernameExistedDefault}from'redux-saga/global-actions/CheckUsernameExisted-action';import{CHECK_USERNAME_EXISTED,EDIT_TOURNAMENT_INFO}from'redux-saga/actions';import{CHECK_USERNAME_EXISTED_SUCCESS,CHECK_USERNAME_EXISTED_FAILED}from'redux-saga/global-reducers/IsUsernameExisted-reducer';import{editTournamentInfo}from'./actions';import{EDIT_TOURNAMENT_INFO_SUCCESS,EDIT_TOURNAMENT_INFO_FAILED}from'./reducers';import'./styles.css';var TournamentSetting=/*#__PURE__*/function(_React$Component){_inherits(TournamentSetting,_React$Component);var _super=_createSuper(TournamentSetting);function TournamentSetting(props){var _this;_classCallCheck(this,TournamentSetting);_this=_super.call(this,props);_this.addManager=function(username){_this.setState({listManager:_this.state.listManager.concat(username)});};_this.onDeleteManager=function(itemm){_this.setState({listManager:_this.state.listManager.filter(function(item){return item!==itemm;})});};_this.onChangeUsername=function(value){_this.setState({username:value});};_this.onChangeTournamentName=function(value){_this.setState({tournamentName:value});};_this.onChangeTournamentShortName=function(value){_this.setState({tournamentShortName:value});};_this.onChangeDescription=function(value){_this.setState({description:value});};_this.onChangeStartLocation=function(value){_this.setState({startLocation:value});};_this.onChangeEndLocation=function(value){_this.setState({endLocation:value});};_this.onChangeDonor=function(value){_this.setState({donor:value});};_this.validate=function(){var usernameError=false;var usernameErrorContent='';if(_this.state.username.trim()===''){usernameError=true;usernameErrorContent='Tên đăng nhập không được trống';}else if(_this.state.listManager.includes(_this.state.username.trim())){usernameError=true;usernameErrorContent='Người dùng này đã là quản lý';}else{var params={path:'',param:{username:_this.state.username},data:{}};_this.props.checkUsernameExisted(params);}return{usernameError:usernameError,usernameErrorContent:usernameErrorContent};};_this.handleAddManager=function(){var _this$validate=_this.validate(),usernameError=_this$validate.usernameError,usernameErrorContent=_this$validate.usernameErrorContent;_this.setState({usernameError:usernameError,usernameErrorContent:usernameErrorContent});_this.props.setUsernameExistedDefault();};_this.handleChangeStartDate=function(value){if(isAfter(value,_this.state.endDate)){_this.setState({startDate:value,endDate:value});}else if(isBefore(value,_this.state.startFormDate)){_this.setState({startDate:value,startFormDate:value,endFormDate:value});}else if(isBefore(value,_this.state.endFormDate)){_this.setState({startDate:value,endFormDate:value});}else{_this.setState({startDate:value});}};_this.handleChangeStartFormDate=function(value){if(isAfter(value,_this.state.endFormDate)){_this.setState({startFormDate:value,endFormDate:value});}else{_this.setState({startFormDate:value});}};_this.handleChangeEndDate=function(value){if(isBefore(value,_this.state.startDate)){if(isBefore(value,_this.state.startFormDate)){_this.setState({startFormDate:value,endFormDate:value,endDate:value,startDate:value});}else if(isBefore(value,_this.state.endFormDate)){_this.setState({endFormDate:value,endDate:value,startDate:value});}else{_this.setState({startDate:value,endDate:value});}}else{_this.setState({endDate:value});}};_this.handleChangeEndFormDate=function(value){if(isBefore(value,_this.state.startFormDate)){_this.setState({startFormDate:value,endFormDate:value});}else{_this.setState({endFormDate:value});}};_this.validateInfo=function(){var tournamentNameError=false;var tournamentNameErrorContent='';var tournamentShortNameErrorContent='';var tournamentShortNameError=false;var descriptionErrorContent='';var descriptionError=false;var startLocationErrorContent='';var startLocationError=false;var endLocationErrorContent='';var endLocationError=false;var donorErrorContent='';var donorError=false;if(_this.state.tournamentName.trim()===''){tournamentNameError=true;tournamentNameErrorContent='Tên giải không được trống';}if(_this.state.tournamentShortName.trim()===''){tournamentShortNameError=true;tournamentShortNameErrorContent='Tên ngắn giải không được trống';}return{tournamentNameError:tournamentNameError,tournamentNameErrorContent:tournamentNameErrorContent,tournamentShortNameErrorContent:tournamentShortNameErrorContent,tournamentShortNameError:tournamentShortNameError,descriptionError:descriptionError,descriptionErrorContent:descriptionErrorContent,startLocationError:startLocationError,startLocationErrorContent:startLocationErrorContent,endLocationError:endLocationError,endLocationErrorContent:endLocationErrorContent,donorError:donorError,donorErrorContent:donorErrorContent};};_this.handleSave=function(){var _this$validateInfo=_this.validateInfo(),tournamentNameError=_this$validateInfo.tournamentNameError,tournamentNameErrorContent=_this$validateInfo.tournamentNameErrorContent,tournamentShortNameErrorContent=_this$validateInfo.tournamentShortNameErrorContent,tournamentShortNameError=_this$validateInfo.tournamentShortNameError,descriptionError=_this$validateInfo.descriptionError,descriptionErrorContent=_this$validateInfo.descriptionErrorContent,startLocationError=_this$validateInfo.startLocationError,startLocationErrorContent=_this$validateInfo.startLocationErrorContent,endLocationError=_this$validateInfo.endLocationError,endLocationErrorContent=_this$validateInfo.endLocationErrorContent,donorError=_this$validateInfo.donorError,donorErrorContent=_this$validateInfo.donorErrorContent;_this.setState({tournamentNameError:tournamentNameError,tournamentNameErrorContent:tournamentNameErrorContent,tournamentShortNameErrorContent:tournamentShortNameErrorContent,tournamentShortNameError:tournamentShortNameError,descriptionError:descriptionError,descriptionErrorContent:descriptionErrorContent,startLocationError:startLocationError,startLocationErrorContent:startLocationErrorContent,endLocationError:endLocationError,endLocationErrorContent:endLocationErrorContent,donorError:donorError,donorErrorContent:donorErrorContent});if(tournamentNameError===true||tournamentShortNameError===true||descriptionError===true||startLocationError===true||endLocationError===true||donorError===true){return;}var params={path:'',param:{id:_this.props.tournamentId},data:{fullName:_this.state.tournamentName,shortName:_this.state.tournamentShortName,description:_this.state.description,creatorId:_this.props.tournamentInfo.creatorId,openingLocation:_this.state.startLocation,closingLocation:_this.state.endLocation,openingTime:_this.state.startDate,closingTime:_this.state.endDate,donor:_this.state.donor,url:''}};_this.props.editTournamentInfo(params);};var tournamentInfo=props.tournamentInfo;_this.state={listManager:['Phạm Minh Hiếu','Phan Trọng Nhân','Đỗ Văn Công','4','5','6','7'],donor:tournamentInfo.donor,donorError:false,donorErrorContent:'',endLocation:tournamentInfo.closingLocation,endLocationError:false,endLocationErrorContent:'',startLocation:tournamentInfo.openingLocation,startLocationError:false,startLocationErrorContent:'',description:tournamentInfo.description,descriptionError:false,descriptionErrorContent:'',tournamentShortName:tournamentInfo.shortName,tournamentShortNameError:false,tournamentShortNameErrorContent:'',tournamentName:tournamentInfo.fullName,tournamentNameError:false,tournamentNameErrorContent:'',username:'',usernameError:false,usernameErrorContent:'',startDate:formatStringToDate(tournamentInfo.openingTime,'yyyy-MM-dd'),endDate:formatStringToDate(tournamentInfo.closingTime,'yyyy-MM-dd'),endFormDate:formatStringToDate(tournamentInfo.openingTime,'yyyy-MM-dd'),startFormDate:formatStringToDate(tournamentInfo.openingTime,'yyyy-MM-dd')};return _this;}_createClass(TournamentSetting,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(nextProps,nextState){if(this.props.isUsernameExisted!==nextProps.isUsernameExisted&&nextProps.isUsernameExisted===true){this.addManager(this.state.username);}if(this.props.isUsernameExisted!==nextProps.isUsernameExisted&&nextProps.isUsernameExisted===false){this.setState({usernameError:true,usernameErrorContent:'Tài khoản không hợp lệ'});}if(this.props.isUsernameExisted!==nextProps.isUsernameExisted&&nextProps.isUsernameExisted===null){this.setState({usernameError:true,usernameErrorContent:'Mất kết nối'});}if(this.props.isUsernameExisted!==nextProps.isUsernameExisted&&nextProps.isUsernameExisted==={}){this.setState({usernameError:false,usernameErrorContent:''});}return true;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(ReduxBlockUi,{tag:\"div\",block:CHECK_USERNAME_EXISTED,unblock:[CHECK_USERNAME_EXISTED_SUCCESS,CHECK_USERNAME_EXISTED_FAILED]},/*#__PURE__*/React.createElement(ReduxBlockUi,{tag:\"div\",block:EDIT_TOURNAMENT_INFO,unblock:[EDIT_TOURNAMENT_INFO_SUCCESS,EDIT_TOURNAMENT_INFO_FAILED]},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentSetting-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentSetting-tournament-container\"},/*#__PURE__*/React.createElement(\"p\",{className:\"TournamentSetting-header-text\"},\"Th\\xF4ng tin gi\\u1EA3i \\u0111\\u1EA5u\"),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-listManager-container'},/*#__PURE__*/React.createElement(\"p\",null,\"T\\xEAn gi\\u1EA3i:\"),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-tounamentName-container-container'},/*#__PURE__*/React.createElement(TextInput,{value:this.state.tournamentName,label:\"Nh\\u1EADp t\\xEAn c\\u1EE7a gi\\u1EA3i\",error:this.state.tournamentNameError,errorContent:this.state.tournamentNameErrorContent,onChangeText:this.onChangeTournamentName}))),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-listManager-container'},/*#__PURE__*/React.createElement(\"p\",null,\"T\\xEAn ng\\u1EAFn:\"),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-tounamentName-container-container'},/*#__PURE__*/React.createElement(TextInput,{value:this.state.tournamentShortName,label:\"Nh\\u1EADp t\\xEAn ng\\u1EAFn c\\u1EE7a gi\\u1EA3i\",error:this.state.tournamentShortNameError,errorContent:this.state.tournamentShortNameErrorContent,onChangeText:this.onChangeTournamentShortName}))),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-listManager-container'},/*#__PURE__*/React.createElement(\"p\",null,\"M\\xF4 t\\u1EA3:\"),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-tounamentName-container-container'},/*#__PURE__*/React.createElement(TextInput,{value:this.state.description,label:\"Nh\\u1EADp m\\xF4 t\\u1EA3\",error:this.state.descriptionError,errorContent:this.state.descriptionErrorContent,onChangeText:this.onChangeDescription}))),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-listManager-container'},/*#__PURE__*/React.createElement(\"p\",null,\"\\u0110\\u1ECBa \\u0111i\\u1EC3m khai m\\u1EA1c:\"),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-tounamentName-container-container'},/*#__PURE__*/React.createElement(TextInput,{value:this.state.startLocation,label:\"Nh\\u1EADp \\u0111\\u1ECBa \\u0111i\\u1EC3m\",error:this.state.startLocationError,errorContent:this.state.startLocationErrorContent,onChangeText:this.onChangeStartLocation}))),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-listManager-container TournamentSetting-listManager-container1'},/*#__PURE__*/React.createElement(\"p\",{className:\"UserInfo-otherInfo-text\"},\"Ng\\xE0y khai m\\u1EA1c: \"),/*#__PURE__*/React.createElement(DatePicker,{selected:this.state.startDate,dateFormat:\"dd/MM/yyyy\",onChange:this.handleChangeStartDate})),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-listManager-container'},/*#__PURE__*/React.createElement(\"p\",null,\"\\u0110\\u1ECBa \\u0111i\\u1EC3m b\\u1EBF m\\u1EA1c:\"),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-tounamentName-container-container'},/*#__PURE__*/React.createElement(TextInput,{value:this.state.endLocation,label:\"Nh\\u1EADp \\u0111\\u1ECBa \\u0111i\\u1EC3m\",error:this.state.endLocationError,errorContent:this.state.endLocationErrorContent,onChangeText:this.onChangeEndLocation}))),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-listManager-container TournamentSetting-listManager-container1'},/*#__PURE__*/React.createElement(\"p\",{className:\"UserInfo-otherInfo-text\"},\"Ng\\xE0y b\\u1EBF m\\u1EA1c: \"),/*#__PURE__*/React.createElement(DatePicker,{selected:this.state.endDate,dateFormat:\"dd/MM/yyyy\",onChange:this.handleChangeEndDate})),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-listManager-container TournamentSetting-listManager-container1'},/*#__PURE__*/React.createElement(\"p\",{className:\"UserInfo-otherInfo-text\"},\"Ng\\xE0y m\\u1EDF form \\u0111\\u0103ng k\\xFD: \"),/*#__PURE__*/React.createElement(DatePicker,{selected:this.state.startFormDate,dateFormat:\"dd/MM/yyyy\",onChange:this.handleChangeStartFormDate,maxDate:this.state.startDate})),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-listManager-container TournamentSetting-listManager-container1'},/*#__PURE__*/React.createElement(\"p\",{className:\"UserInfo-otherInfo-text\"},\"Ng\\xE0y \\u0111\\xF3ng form \\u0111\\u0103ng k\\xFD: \"),/*#__PURE__*/React.createElement(DatePicker,{selected:this.state.endFormDate,dateFormat:\"dd/MM/yyyy\",onChange:this.handleChangeEndFormDate,maxDate:this.state.startDate})),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-listManager-container'},/*#__PURE__*/React.createElement(\"p\",null,\"Nh\\xE0 t\\xE0i tr\\u1EE3:\"),/*#__PURE__*/React.createElement(\"div\",{className:'TournamentSetting-tounamentName-container-container'},/*#__PURE__*/React.createElement(TextInput,{value:this.state.donor,label:\"Nh\\u1EADp t\\xEAn nh\\xE0 t\\xE0i tr\\u1EE3\",error:this.state.donorError,errorContent:this.state.donorErrorContent,onChangeText:this.onChangeDonor})))),/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentSetting-competition-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentSetting-button-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"TournamentSetting-button\",onClick:this.handleSave},/*#__PURE__*/React.createElement(\"h4\",{className:\"TournamentSetting-button-text\"},\"L\\u01B0u c\\xE0i \\u0111\\u1EB7t\")))))));}}]);return TournamentSetting;}(React.Component);var mapStateToProps=function mapStateToProps(state){return{isUsernameExisted:state.isUsernameExisted};};export default connect(mapStateToProps,{checkUsernameExisted:checkUsernameExisted,setUsernameExistedDefault:setUsernameExistedDefault,editTournamentInfo:editTournamentInfo})(TournamentSetting);","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/components/TournamentSetting/index.tsx"],"names":["React","connect","ReduxBlockUi","isAfter","isBefore","DatePicker","TextInput","formatStringToDate","checkUsernameExisted","setUsernameExistedDefault","CHECK_USERNAME_EXISTED","EDIT_TOURNAMENT_INFO","CHECK_USERNAME_EXISTED_SUCCESS","CHECK_USERNAME_EXISTED_FAILED","editTournamentInfo","EDIT_TOURNAMENT_INFO_SUCCESS","EDIT_TOURNAMENT_INFO_FAILED","TournamentSetting","props","addManager","username","setState","listManager","state","concat","onDeleteManager","itemm","filter","item","onChangeUsername","value","onChangeTournamentName","tournamentName","onChangeTournamentShortName","tournamentShortName","onChangeDescription","description","onChangeStartLocation","startLocation","onChangeEndLocation","endLocation","onChangeDonor","donor","validate","usernameError","usernameErrorContent","trim","includes","params","path","param","data","handleAddManager","handleChangeStartDate","endDate","startDate","startFormDate","endFormDate","handleChangeStartFormDate","handleChangeEndDate","handleChangeEndFormDate","validateInfo","tournamentNameError","tournamentNameErrorContent","tournamentShortNameErrorContent","tournamentShortNameError","descriptionErrorContent","descriptionError","startLocationErrorContent","startLocationError","endLocationErrorContent","endLocationError","donorErrorContent","donorError","handleSave","id","tournamentId","fullName","shortName","creatorId","tournamentInfo","openingLocation","closingLocation","openingTime","closingTime","url","nextProps","nextState","isUsernameExisted","Component","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReduxBlockUi from 'react-block-ui/redux';\r\nimport { isAfter, isBefore } from 'date-fns';\r\nimport DatePicker from \"react-datepicker\";\r\nimport 'react-block-ui/style.css';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { formatStringToDate } from 'utils/datetime';\r\nimport { checkUsernameExisted, setUsernameExistedDefault } from 'redux-saga/global-actions/CheckUsernameExisted-action';\r\nimport { CHECK_USERNAME_EXISTED, EDIT_TOURNAMENT_INFO } from 'redux-saga/actions';\r\nimport { CHECK_USERNAME_EXISTED_SUCCESS, CHECK_USERNAME_EXISTED_FAILED } from 'redux-saga/global-reducers/IsUsernameExisted-reducer';\r\nimport { editTournamentInfo } from './actions';\r\nimport { EDIT_TOURNAMENT_INFO_SUCCESS, EDIT_TOURNAMENT_INFO_FAILED } from './reducers';\r\nimport './styles.css';\r\n\r\ninterface ITournamentSettingProps extends React.ClassAttributes<TournamentSetting> {\r\n  isUsernameExisted: boolean | null | {};\r\n  tournamentInfo: IParams;\r\n  tournamentId: number;\r\n\r\n  checkUsernameExisted(param: IBigRequest): void;\r\n  editTournamentInfo(param: IBigRequest): void;\r\n  setUsernameExistedDefault(): void;\r\n}\r\n\r\ninterface ITournamentSettingState {\r\n  listManager: string[];\r\n  username: string;\r\n  usernameError: boolean;\r\n  usernameErrorContent: string;\r\n  tournamentName: string;\r\n  tournamentNameError: boolean;\r\n  tournamentNameErrorContent: string;\r\n  tournamentShortName: string;\r\n  tournamentShortNameError: boolean;\r\n  tournamentShortNameErrorContent: string;\r\n  description: string;\r\n  descriptionError: boolean;\r\n  descriptionErrorContent: string;\r\n  startLocation: string;\r\n  startLocationError: boolean;\r\n  startLocationErrorContent: string;\r\n  endLocation: string;\r\n  endLocationError: boolean;\r\n  endLocationErrorContent: string;\r\n  donor: string;\r\n  donorError: boolean;\r\n  donorErrorContent: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n  endFormDate: Date;\r\n  startFormDate: Date;\r\n}\r\n\r\nclass TournamentSetting extends React.Component<ITournamentSettingProps, ITournamentSettingState> {\r\n  constructor(props: ITournamentSettingProps) {\r\n    super(props);\r\n    const { tournamentInfo } = props;\r\n    this.state = {\r\n      listManager: ['Phạm Minh Hiếu', 'Phan Trọng Nhân', 'Đỗ Văn Công', '4', '5', '6', '7'],\r\n      donor: tournamentInfo.donor as string,\r\n      donorError: false,\r\n      donorErrorContent: '',\r\n      endLocation: tournamentInfo.closingLocation as string,\r\n      endLocationError: false,\r\n      endLocationErrorContent: '',\r\n      startLocation: tournamentInfo.openingLocation as string,\r\n      startLocationError: false,\r\n      startLocationErrorContent: '',\r\n      description: tournamentInfo.description as string,\r\n      descriptionError: false,\r\n      descriptionErrorContent: '',\r\n      tournamentShortName: tournamentInfo.shortName as string,\r\n      tournamentShortNameError: false,\r\n      tournamentShortNameErrorContent: '',\r\n      tournamentName: tournamentInfo.fullName as string,\r\n      tournamentNameError: false,\r\n      tournamentNameErrorContent: '',\r\n      username: '',\r\n      usernameError: false,\r\n      usernameErrorContent: '',\r\n      startDate: formatStringToDate(tournamentInfo.openingTime as string, 'yyyy-MM-dd'),\r\n      endDate: formatStringToDate(tournamentInfo.closingTime as string, 'yyyy-MM-dd'),\r\n      endFormDate: formatStringToDate(tournamentInfo.openingTime as string, 'yyyy-MM-dd'),\r\n      startFormDate: formatStringToDate(tournamentInfo.openingTime as string, 'yyyy-MM-dd'),\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: ITournamentSettingProps, nextState: ITournamentSettingState) {\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === true) {\r\n      this.addManager(this.state.username);\r\n    }\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === false) {\r\n      this.setState({\r\n        usernameError: true,\r\n        usernameErrorContent: 'Tài khoản không hợp lệ',\r\n      });\r\n    }\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === null) {\r\n      this.setState({\r\n        usernameError: true,\r\n        usernameErrorContent: 'Mất kết nối',\r\n      });\r\n    }\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === {}) {\r\n      this.setState({\r\n        usernameError: false,\r\n        usernameErrorContent: '',\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private addManager = (username: string) => {\r\n    this.setState({\r\n      listManager: this.state.listManager.concat(username),\r\n    });\r\n  }\r\n\r\n  private onDeleteManager = (itemm: string) => {\r\n    this.setState({\r\n      listManager: this.state.listManager.filter((item) => item !== itemm),\r\n    });\r\n  }\r\n\r\n  private onChangeUsername = (value: string) => {\r\n    this.setState({ username: value, });\r\n  }\r\n\r\n  private onChangeTournamentName = (value: string) => {\r\n    this.setState({ tournamentName: value, });\r\n  }\r\n\r\n  private onChangeTournamentShortName = (value: string) => {\r\n    this.setState({ tournamentShortName: value, });\r\n  }\r\n\r\n  private onChangeDescription = (value: string) => {\r\n    this.setState({ description: value, });\r\n  }\r\n\r\n  private onChangeStartLocation = (value: string) => {\r\n    this.setState({ startLocation: value, });\r\n  }\r\n\r\n  private onChangeEndLocation = (value: string) => {\r\n    this.setState({ endLocation: value, });\r\n  }\r\n\r\n  private onChangeDonor = (value: string) => {\r\n    this.setState({ donor: value, });\r\n  }\r\n\r\n  private validate = () => {\r\n    let usernameError = false;\r\n    let usernameErrorContent = '';\r\n    if (this.state.username.trim() === '') {\r\n      usernameError = true;\r\n      usernameErrorContent = 'Tên đăng nhập không được trống';\r\n    } else if (this.state.listManager.includes(this.state.username.trim())) {\r\n      usernameError = true;\r\n      usernameErrorContent = 'Người dùng này đã là quản lý';\r\n    } else {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          username: this.state.username,\r\n        },\r\n        data: {},\r\n      };\r\n      this.props.checkUsernameExisted(params);\r\n    }\r\n\r\n    return { usernameError, usernameErrorContent };\r\n  }\r\n\r\n  private handleAddManager = () => {\r\n    const { usernameError, usernameErrorContent } = this.validate();\r\n    this.setState({\r\n      usernameError,\r\n      usernameErrorContent,\r\n    });\r\n    this.props.setUsernameExistedDefault();\r\n  }\r\n\r\n  private handleChangeStartDate = (value: Date) => {\r\n    if (isAfter(value, this.state.endDate)) {\r\n      this.setState({\r\n        startDate: value,\r\n        endDate: value,\r\n      });\r\n    } else if (isBefore(value, this.state.startFormDate)) {\r\n      this.setState({\r\n        startDate: value,\r\n        startFormDate: value,\r\n        endFormDate: value,\r\n      });\r\n    } else if (isBefore(value, this.state.endFormDate)) {\r\n      this.setState({\r\n        startDate: value,\r\n        endFormDate: value,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        startDate: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  private handleChangeStartFormDate = (value: Date) => {\r\n    if (isAfter(value, this.state.endFormDate)) {\r\n      this.setState({\r\n        startFormDate: value,\r\n        endFormDate: value,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        startFormDate: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  private handleChangeEndDate = (value: Date) => {\r\n    if (isBefore(value, this.state.startDate)) {\r\n      if (isBefore(value, this.state.startFormDate)) {\r\n        this.setState({\r\n          startFormDate: value,\r\n          endFormDate: value,\r\n          endDate: value,\r\n          startDate: value,\r\n        });\r\n      } else if (isBefore(value, this.state.endFormDate)) {\r\n        this.setState({\r\n          endFormDate: value,\r\n          endDate: value,\r\n          startDate: value,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          startDate: value,\r\n          endDate: value,\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        endDate: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  private handleChangeEndFormDate = (value: Date) => {\r\n    if (isBefore(value, this.state.startFormDate)) {\r\n      this.setState({\r\n        startFormDate: value,\r\n        endFormDate: value,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        endFormDate: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  private validateInfo = () => {\r\n    let tournamentNameError = false;\r\n    let tournamentNameErrorContent = '';\r\n    let tournamentShortNameErrorContent = '';\r\n    let tournamentShortNameError = false;\r\n    let descriptionErrorContent = '';\r\n    let descriptionError = false;\r\n    let startLocationErrorContent = '';\r\n    let startLocationError = false;\r\n    let endLocationErrorContent = '';\r\n    let endLocationError = false;\r\n    let donorErrorContent = '';\r\n    let donorError = false;\r\n    if (this.state.tournamentName.trim() === '') {\r\n      tournamentNameError = true;\r\n      tournamentNameErrorContent = 'Tên giải không được trống';\r\n    }\r\n    if (this.state.tournamentShortName.trim() === '') {\r\n      tournamentShortNameError = true;\r\n      tournamentShortNameErrorContent = 'Tên ngắn giải không được trống';\r\n    }\r\n\r\n    return { tournamentNameError, tournamentNameErrorContent, tournamentShortNameErrorContent, tournamentShortNameError, descriptionError, descriptionErrorContent, startLocationError, startLocationErrorContent, endLocationError, endLocationErrorContent, donorError, donorErrorContent };\r\n  }\r\n\r\n  private handleSave = () => {\r\n    const { tournamentNameError, tournamentNameErrorContent, tournamentShortNameErrorContent, tournamentShortNameError, descriptionError, descriptionErrorContent, startLocationError, startLocationErrorContent, endLocationError, endLocationErrorContent, donorError, donorErrorContent } = this.validateInfo();\r\n    this.setState({\r\n      tournamentNameError,\r\n      tournamentNameErrorContent,\r\n      tournamentShortNameErrorContent,\r\n      tournamentShortNameError,\r\n      descriptionError,\r\n      descriptionErrorContent,\r\n      startLocationError,\r\n      startLocationErrorContent,\r\n      endLocationError,\r\n      endLocationErrorContent,\r\n      donorError,\r\n      donorErrorContent\r\n    });\r\n    if (tournamentNameError === true || tournamentShortNameError === true || descriptionError === true || startLocationError === true || endLocationError === true || donorError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        id: this.props.tournamentId,\r\n      },\r\n      data: {\r\n        fullName: this.state.tournamentName,\r\n        shortName: this.state.tournamentShortName,\r\n        description: this.state.description,\r\n        creatorId: this.props.tournamentInfo.creatorId,\r\n        openingLocation: this.state.startLocation,\r\n        closingLocation: this.state.endLocation,\r\n        openingTime: this.state.startDate,\r\n        closingTime: this.state.endDate,\r\n        donor: this.state.donor,\r\n        url: '',\r\n      },\r\n    };\r\n\r\n    this.props.editTournamentInfo(params);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReduxBlockUi\r\n        tag=\"div\"\r\n        block={CHECK_USERNAME_EXISTED}\r\n        unblock={[CHECK_USERNAME_EXISTED_SUCCESS, CHECK_USERNAME_EXISTED_FAILED]}\r\n      >\r\n        <ReduxBlockUi\r\n          tag=\"div\"\r\n          block={EDIT_TOURNAMENT_INFO}\r\n          unblock={[EDIT_TOURNAMENT_INFO_SUCCESS, EDIT_TOURNAMENT_INFO_FAILED]}\r\n        >\r\n          <div className=\"TournamentSetting-container\">\r\n            <div className=\"TournamentSetting-tournament-container\">\r\n              <p className=\"TournamentSetting-header-text\">Thông tin giải đấu</p>\r\n              {/* <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Danh sách quản trị viên: </p>\r\n                <div className={'TournamentSetting-listManager-container-container'}>\r\n                  {this.state.listManager.map((item, index) => <div className={'TournamentSetting-manager-container'} key={index}>\r\n                    <p className={'TournamentSetting-manager-text'}>{item}</p>\r\n                    <div className={'TournamentSetting-icon-container'} onClick={() => { this.onDeleteManager(item) }}>\r\n                      <AiOutlineClose />\r\n                    </div>\r\n                  </div>)}\r\n                  <TextInput label='nhập username để thêm quản trị viên' error={this.state.usernameError} errorContent={this.state.usernameErrorContent} onChangeText={this.onChangeUsername} onHandleSubmit={this.handleAddManager} />\r\n                </div>\r\n              </div> */}\r\n              <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Tên giải:</p>\r\n                <div className={'TournamentSetting-tounamentName-container-container'}>\r\n                  <TextInput value={this.state.tournamentName} label='Nhập tên của giải' error={this.state.tournamentNameError} errorContent={this.state.tournamentNameErrorContent} onChangeText={this.onChangeTournamentName} />\r\n                </div>\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Tên ngắn:</p>\r\n                <div className={'TournamentSetting-tounamentName-container-container'}>\r\n                  <TextInput value={this.state.tournamentShortName} label='Nhập tên ngắn của giải' error={this.state.tournamentShortNameError} errorContent={this.state.tournamentShortNameErrorContent} onChangeText={this.onChangeTournamentShortName} />\r\n                  {/*defaultValue */}\r\n                </div>\r\n              </div>\r\n              {/* <div className={'TournamentSetting-checkBox-container'}>\r\n              <label className=\"Checkbox-label\">\r\n                <input type=\"checkbox\" />\r\n            Đăng kí qua form\r\n          </label>\r\n            </div>\r\n            <div className={'TournamentSetting-checkBox-container'}>\r\n              <label className=\"Checkbox-label\">\r\n                <input type=\"checkbox\" />\r\n            Xắp xếp lịch cho 2 giải so le\r\n          </label>\r\n            </div> */}\r\n              <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Mô tả:</p>\r\n                <div className={'TournamentSetting-tounamentName-container-container'}>\r\n                  <TextInput value={this.state.description} label='Nhập mô tả' error={this.state.descriptionError} errorContent={this.state.descriptionErrorContent} onChangeText={this.onChangeDescription} />\r\n                </div>\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Địa điểm khai mạc:</p>\r\n                <div className={'TournamentSetting-tounamentName-container-container'}>\r\n                  <TextInput value={this.state.startLocation} label='Nhập địa điểm' error={this.state.startLocationError} errorContent={this.state.startLocationErrorContent} onChangeText={this.onChangeStartLocation} />\r\n                </div>\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container TournamentSetting-listManager-container1'}>\r\n                <p className=\"UserInfo-otherInfo-text\">Ngày khai mạc: </p>\r\n                <DatePicker\r\n                  selected={this.state.startDate}\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  onChange={this.handleChangeStartDate}\r\n                />\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Địa điểm bế mạc:</p>\r\n                <div className={'TournamentSetting-tounamentName-container-container'}>\r\n                  <TextInput value={this.state.endLocation} label='Nhập địa điểm' error={this.state.endLocationError} errorContent={this.state.endLocationErrorContent} onChangeText={this.onChangeEndLocation} />\r\n                </div>\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container TournamentSetting-listManager-container1'}>\r\n                <p className=\"UserInfo-otherInfo-text\">Ngày bế mạc: </p>\r\n                <DatePicker\r\n                  selected={this.state.endDate}\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  onChange={this.handleChangeEndDate}\r\n                />\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container TournamentSetting-listManager-container1'}>\r\n                <p className=\"UserInfo-otherInfo-text\">Ngày mở form đăng ký: </p>\r\n                <DatePicker\r\n                  selected={this.state.startFormDate}\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  onChange={this.handleChangeStartFormDate}\r\n                  maxDate={this.state.startDate}\r\n                />\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container TournamentSetting-listManager-container1'}>\r\n                <p className=\"UserInfo-otherInfo-text\">Ngày đóng form đăng ký: </p>\r\n                <DatePicker\r\n                  selected={this.state.endFormDate}\r\n                  dateFormat=\"dd/MM/yyyy\"\r\n                  onChange={this.handleChangeEndFormDate}\r\n                  maxDate={this.state.startDate}\r\n                />\r\n              </div>\r\n              <div className={'TournamentSetting-listManager-container'}>\r\n                <p>Nhà tài trợ:</p>\r\n                <div className={'TournamentSetting-tounamentName-container-container'}>\r\n                  <TextInput value={this.state.donor} label='Nhập tên nhà tài trợ' error={this.state.donorError} errorContent={this.state.donorErrorContent} onChangeText={this.onChangeDonor} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"TournamentSetting-competition-container\">\r\n              <div className=\"TournamentSetting-button-container\">\r\n                <div className=\"TournamentSetting-button\" onClick={this.handleSave}>\r\n                  <h4 className=\"TournamentSetting-button-text\">Lưu cài đặt</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ReduxBlockUi>\r\n      </ReduxBlockUi>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    isUsernameExisted: state.isUsernameExisted,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { checkUsernameExisted, setUsernameExistedDefault, editTournamentInfo }\r\n)(TournamentSetting);"]},"metadata":{},"sourceType":"module"}