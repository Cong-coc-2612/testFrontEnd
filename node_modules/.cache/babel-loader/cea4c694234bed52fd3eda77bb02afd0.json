{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doEditUserInfo),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchEditUserInfo);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{COMMON_SHOW_NOTIFICATION,EDIT_USER_INFO}from'redux-saga/actions';import{QUERY_USER_INFO_SUCCESS}from'screens/UserInfo/reducers';import{LOGIN_SUCCESS}from'screens/Login/reducers';import store from'redux-saga/store';var editUserInfo=function editUserInfo(data,path,param){var uri='user';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.PUT,datas,params,paths);};function doEditUserInfo(request){var response,data;return _regeneratorRuntime.wrap(function doEditUserInfo$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(editUserInfo,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;data=response.data.result;if(!(response.data.error.MessageCode===0)){_context.next=15;break;}_context.next=8;return put({type:request.response.success,payload:data});case 8:_context.next=10;return put({type:QUERY_USER_INFO_SUCCESS,payload:_objectSpread({},store.getState().userInfo,{User:data.User})});case 10:if(!(store.getState().currentUserInfo!=null&&store.getState().currentUserInfo.id===data.User.id)){_context.next=13;break;}_context.next=13;return put({type:LOGIN_SUCCESS,payload:data.User});case 13:_context.next=16;break;case 15:throw new Error(response.data.error.Message);case 16:_context.next=24;break;case 18:_context.prev=18;_context.t0=_context[\"catch\"](0);_context.next=22;return put({type:request.response.failed});case 22:_context.next=24;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'EditUserInfo',content:_context.t0,time:new Date()}});case 24:case\"end\":return _context.stop();}}},_marked,null,[[0,18]]);}export default function watchEditUserInfo(){return _regeneratorRuntime.wrap(function watchEditUserInfo$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(EDIT_USER_INFO,doEditUserInfo);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/EditUserInfo/editUserInfo.ts"],"names":["doEditUserInfo","watchEditUserInfo","call","takeLatest","put","query","METHOD","COMMON_SHOW_NOTIFICATION","EDIT_USER_INFO","QUERY_USER_INFO_SUCCESS","LOGIN_SUCCESS","store","editUserInfo","data","path","param","uri","datas","paths","params","PUT","request","response","result","error","MessageCode","type","success","payload","getState","userInfo","User","currentUserInfo","id","Error","Message","failed","title","content","time","Date"],"mappings":"wXAiBUA,c,iDAsCeC,iB,EAvDzB,OAASC,IAAT,CAAeC,UAAf,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,iBAA9B,CAEA,OAASC,wBAAT,CAAmCC,cAAnC,KAAyD,oBAAzD,CACA,OAASC,uBAAT,KAAwC,2BAAxC,CACA,OAASC,aAAT,KAA8B,wBAA9B,CACA,MAAOC,CAAAA,KAAP,KAAkB,kBAAlB,CAGA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,IAAD,CAAgBC,IAAhB,CAAuCC,KAAvC,CAA0D,CAC7E,GAAMC,CAAAA,GAAG,CAAG,MAAZ,CACA,GAAMC,CAAAA,KAAK,kBAAQJ,IAAR,CAAX,CACA,GAAMK,CAAAA,KAAK,CAAGJ,IAAd,CACA,GAAMK,CAAAA,MAAM,kBAAQJ,KAAR,CAAZ,CACA,MAAOV,CAAAA,KAAK,CAACW,GAAD,CAAMV,MAAM,CAACc,GAAb,CAAkBH,KAAlB,CAAyBE,MAAzB,CAAiCD,KAAjC,CAAZ,CACD,CAND,CAQA,QAAUlB,CAAAA,cAAV,CAAyBqB,OAAzB,2KAEqB,MAAMnB,CAAAA,IAAI,CAACU,YAAD,CAAeS,OAAO,CAACR,IAAR,CAAaA,IAA5B,CAAkCQ,OAAO,CAACR,IAAR,CAAaC,IAA/C,CAAqDO,OAAO,CAACR,IAAR,CAAaE,KAAlE,CAAV,CAFrB,OAEUO,QAFV,eAGUT,IAHV,CAGiBS,QAAQ,CAACT,IAAT,CAAcU,MAH/B,MAIQD,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBC,WAApB,GAAoC,CAJ5C,2CAKM,MAAMrB,CAAAA,GAAG,CAAC,CACRsB,IAAI,CAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf,CAERC,OAAO,CAAEf,IAFD,CAAD,CAAT,CALN,wBASM,MAAMT,CAAAA,GAAG,CAAC,CACRsB,IAAI,CAAEjB,uBADE,CAERmB,OAAO,kBAAOjB,KAAK,CAACkB,QAAN,GAAiBC,QAAxB,EAAkCC,IAAI,CAAElB,IAAI,CAACkB,IAA7C,EAFC,CAAD,CAAT,CATN,aAaUpB,KAAK,CAACkB,QAAN,GAAiBG,eAAjB,EAAoC,IAApC,EAA4CrB,KAAK,CAACkB,QAAN,GAAiBG,eAAjB,CAAkCC,EAAlC,GAAyCpB,IAAI,CAACkB,IAAL,CAAUE,EAbzG,4CAcQ,MAAM7B,CAAAA,GAAG,CAAC,CACRsB,IAAI,CAAEhB,aADE,CAERkB,OAAO,CAAEf,IAAI,CAACkB,IAFN,CAAD,CAAT,CAdR,4CAoBY,IAAIG,CAAAA,KAAJ,CAAUZ,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBW,OAA9B,CApBZ,2GAuBI,MAAM/B,CAAAA,GAAG,CAAC,CACRsB,IAAI,CAAEL,OAAO,CAACC,QAAR,CAAiBc,MADf,CAAD,CAAT,CAvBJ,yBA0BI,MAAMhC,CAAAA,GAAG,CAAC,CACRsB,IAAI,CAAEnB,wBADE,CAERM,IAAI,CAAE,CACJa,IAAI,CAAE,OADF,CAEJW,KAAK,CAAE,cAFH,CAGJC,OAAO,YAHH,CAIJC,IAAI,CAAE,GAAIC,CAAAA,IAAJ,EAJF,CAFE,CAAD,CAAT,CA1BJ,qEAsCA,cAAe,SAAUvC,CAAAA,iBAAV,iJACb,MAAME,CAAAA,UAAU,CAACK,cAAD,CAAiBR,cAAjB,CAAhB,CADa","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, EDIT_USER_INFO } from 'redux-saga/actions';\r\nimport { QUERY_USER_INFO_SUCCESS } from 'screens/UserInfo/reducers';\r\nimport { LOGIN_SUCCESS } from 'screens/Login/reducers';\r\nimport store from 'redux-saga/store';\r\n\r\n\r\nconst editUserInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'user';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doEditUserInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(editUserInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: QUERY_USER_INFO_SUCCESS,\r\n        payload: { ...store.getState().userInfo, User: data.User },\r\n      });\r\n      if (store.getState().currentUserInfo != null && store.getState().currentUserInfo!.id === data.User.id) {\r\n        yield put({\r\n          type: LOGIN_SUCCESS,\r\n          payload: data.User,\r\n        });\r\n      }\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'EditUserInfo',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchEditUserInfo() {\r\n  yield takeLatest(EDIT_USER_INFO, doEditUserInfo);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}