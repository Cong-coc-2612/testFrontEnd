{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doQueryAllFormat),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchQueryAllFormat);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{COMMON_SHOW_NOTIFICATION,QUERY_ALL_FORMATS}from'redux-saga/actions';var queryAllFormat=function queryAllFormat(){var uri='formats';return query(uri,METHOD.GET,{},{},'');};function doQueryAllFormat(request){var response,data;return _regeneratorRuntime.wrap(function doQueryAllFormat$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(queryAllFormat);case 3:response=_context.sent;data=response.data.result;if(!(response.data.error.MessageCode===0)){_context.next=10;break;}_context.next=8;return put({type:request.response.success,payload:data.CompetitionSettings});case 8:_context.next=11;break;case 10:throw new Error(response.data.error.Message);case 11:_context.next=19;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);_context.next=17;return put({type:request.response.failed});case 17:_context.next=19;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'QueryAllFormat',content:_context.t0,time:new Date()}});case 19:case\"end\":return _context.stop();}}},_marked,null,[[0,13]]);}export default function watchQueryAllFormat(){return _regeneratorRuntime.wrap(function watchQueryAllFormat$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(QUERY_ALL_FORMATS,doQueryAllFormat);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/QueryAllFormat/queryAllFormat.ts"],"names":["doQueryAllFormat","watchQueryAllFormat","call","takeLatest","put","query","METHOD","COMMON_SHOW_NOTIFICATION","QUERY_ALL_FORMATS","queryAllFormat","uri","GET","request","response","data","result","error","MessageCode","type","success","payload","CompetitionSettings","Error","Message","failed","title","content","time","Date"],"mappings":"iNAWUA,gB,iDA4BeC,mB,EAvCzB,OAASC,IAAT,CAAeC,UAAf,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,iBAA9B,CAEA,OAASC,wBAAT,CAAmCC,iBAAnC,KAA4D,oBAA5D,CAGA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,GAAMC,CAAAA,GAAG,CAAG,SAAZ,CACA,MAAOL,CAAAA,KAAK,CAACK,GAAD,CAAMJ,MAAM,CAACK,GAAb,CAAkB,EAAlB,CAAsB,EAAtB,CAA0B,EAA1B,CAAZ,CACD,CAHD,CAKA,QAAUX,CAAAA,gBAAV,CAA2BY,OAA3B,6KAEqB,MAAMV,CAAAA,IAAI,CAACO,cAAD,CAAV,CAFrB,OAEUI,QAFV,eAGUC,IAHV,CAGiBD,QAAQ,CAACC,IAAT,CAAcC,MAH/B,MAIQF,QAAQ,CAACC,IAAT,CAAcE,KAAd,CAAoBC,WAApB,GAAoC,CAJ5C,2CAKM,MAAMb,CAAAA,GAAG,CAAC,CACRc,IAAI,CAAEN,OAAO,CAACC,QAAR,CAAiBM,OADf,CAERC,OAAO,CAAEN,IAAI,CAACO,mBAFN,CAAD,CAAT,CALN,2CAUY,IAAIC,CAAAA,KAAJ,CAAUT,QAAQ,CAACC,IAAT,CAAcE,KAAd,CAAoBO,OAA9B,CAVZ,2GAaI,MAAMnB,CAAAA,GAAG,CAAC,CACRc,IAAI,CAAEN,OAAO,CAACC,QAAR,CAAiBW,MADf,CAAD,CAAT,CAbJ,yBAgBI,MAAMpB,CAAAA,GAAG,CAAC,CACRc,IAAI,CAAEX,wBADE,CAERO,IAAI,CAAE,CACJI,IAAI,CAAE,OADF,CAEJO,KAAK,CAAE,gBAFH,CAGJC,OAAO,YAHH,CAIJC,IAAI,CAAE,GAAIC,CAAAA,IAAJ,EAJF,CAFE,CAAD,CAAT,CAhBJ,qEA4BA,cAAe,SAAU3B,CAAAA,mBAAV,mJACb,MAAME,CAAAA,UAAU,CAACK,iBAAD,CAAoBR,gBAApB,CAAhB,CADa","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_ALL_FORMATS } from 'redux-saga/actions';\r\n\r\n\r\nconst queryAllFormat = () => {\r\n  const uri = 'formats';\r\n  return query(uri, METHOD.GET, {}, {}, '');\r\n};\r\n\r\nfunction* doQueryAllFormat(request: IRequest<null>) {\r\n  try {\r\n    const response = yield call(queryAllFormat);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.CompetitionSettings,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryAllFormat',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryAllFormat() {\r\n  yield takeLatest(QUERY_ALL_FORMATS, doQueryAllFormat);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}