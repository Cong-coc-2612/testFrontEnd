{"ast":null,"code":"import _regeneratorRuntime from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"E:\\\\frontEnd\\\\SportTournamentSupportSystemFE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(doSearchUsers),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchSearchUsers);import{call,takeLatest,put}from'redux-saga/effects';import{query,METHOD}from'utils/socketApi';import{SEARCH_USER,COMMON_SHOW_NOTIFICATION}from'redux-saga/actions';var searchUsers=function searchUsers(data,path,param){var uri='users/getBySearchString';var datas=_objectSpread({},data);var paths=path;var params=_objectSpread({},param);return query(uri,METHOD.GET,datas,params,paths);};function doSearchUsers(request){var response,data;return _regeneratorRuntime.wrap(function doSearchUsers$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(searchUsers,request.data.data,request.data.path,request.data.param);case 3:response=_context.sent;data=response.data.result;if(!(response.data.error.MessageCode===0)){_context.next=8;break;}_context.next=8;return put({type:request.response.success,payload:{Users:data.Users,TotalPage:data.TotalPage}});case 8:_context.next=16;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);_context.next=14;return put({type:request.response.failed});case 14:_context.next=16;return put({type:COMMON_SHOW_NOTIFICATION,data:{type:'error',title:'SearchUsers',content:_context.t0,time:new Date()}});case 16:case\"end\":return _context.stop();}}},_marked,null,[[0,10]]);}export default function watchSearchUsers(){return _regeneratorRuntime.wrap(function watchSearchUsers$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(SEARCH_USER,doSearchUsers);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/redux-saga/sagas/SearchUsers/searchUsers.ts"],"names":["doSearchUsers","watchSearchUsers","call","takeLatest","put","query","METHOD","SEARCH_USER","COMMON_SHOW_NOTIFICATION","searchUsers","data","path","param","uri","datas","paths","params","GET","request","response","result","error","MessageCode","type","success","payload","Users","TotalPage","failed","title","content","time","Date"],"mappings":"wXAcUA,a,iDA0BeC,gB,EAxCzB,OAASC,IAAT,CAAeC,UAAf,CAA2BC,GAA3B,KAAsC,oBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,iBAA9B,CAEA,OAASC,WAAT,CAAsBC,wBAAtB,KAAsD,oBAAtD,CAGA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,IAAD,CAAgBC,IAAhB,CAAuCC,KAAvC,CAA0D,CAC5E,GAAMC,CAAAA,GAAG,CAAG,yBAAZ,CACA,GAAMC,CAAAA,KAAK,kBAAQJ,IAAR,CAAX,CACA,GAAMK,CAAAA,KAAK,CAAGJ,IAAd,CACA,GAAMK,CAAAA,MAAM,kBAAQJ,KAAR,CAAZ,CACA,MAAOP,CAAAA,KAAK,CAACQ,GAAD,CAAMP,MAAM,CAACW,GAAb,CAAkBH,KAAlB,CAAyBE,MAAzB,CAAiCD,KAAjC,CAAZ,CACD,CAND,CAQA,QAAUf,CAAAA,aAAV,CAAwBkB,OAAxB,0KAEqB,MAAMhB,CAAAA,IAAI,CAACO,WAAD,CAAcS,OAAO,CAACR,IAAR,CAAaA,IAA3B,CAAiCQ,OAAO,CAACR,IAAR,CAAaC,IAA9C,CAAoDO,OAAO,CAACR,IAAR,CAAaE,KAAjE,CAAV,CAFrB,OAEUO,QAFV,eAGUT,IAHV,CAGiBS,QAAQ,CAACT,IAAT,CAAcU,MAH/B,MAIQD,QAAQ,CAACT,IAAT,CAAcW,KAAd,CAAoBC,WAApB,GAAoC,CAJ5C,0CAKM,MAAMlB,CAAAA,GAAG,CAAC,CACRmB,IAAI,CAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf,CAERC,OAAO,CAAE,CAAEC,KAAK,CAAEhB,IAAI,CAACgB,KAAd,CAAqBC,SAAS,CAAEjB,IAAI,CAACiB,SAArC,CAFD,CAAD,CAAT,CALN,yGAWI,MAAMvB,CAAAA,GAAG,CAAC,CACRmB,IAAI,CAAEL,OAAO,CAACC,QAAR,CAAiBS,MADf,CAAD,CAAT,CAXJ,yBAcI,MAAMxB,CAAAA,GAAG,CAAC,CACRmB,IAAI,CAAEf,wBADE,CAERE,IAAI,CAAE,CACJa,IAAI,CAAE,OADF,CAEJM,KAAK,CAAE,aAFH,CAGJC,OAAO,YAHH,CAIJC,IAAI,CAAE,GAAIC,CAAAA,IAAJ,EAJF,CAFE,CAAD,CAAT,CAdJ,qEA0BA,cAAe,SAAU/B,CAAAA,gBAAV,gJACb,MAAME,CAAAA,UAAU,CAACI,WAAD,CAAcP,aAAd,CAAhB,CADa","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { SEARCH_USER, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\n\r\n\r\nconst searchUsers = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'users/getBySearchString';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doSearchUsers(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(searchUsers, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: { Users: data.Users, TotalPage: data.TotalPage },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'SearchUsers',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchSearchUsers() {\r\n  yield takeLatest(SEARCH_USER, doSearchUsers);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}