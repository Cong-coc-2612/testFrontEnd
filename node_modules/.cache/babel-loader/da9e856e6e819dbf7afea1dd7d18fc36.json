{"ast":null,"code":"import{QUERY_TOURNAMENT_INFO,QUERY_SPORTS_BY_TOURNAMENT,QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT,START_TOURNAMENT,FINISH_TOURNAMENT,TOURNAMENT_UPDATE_AVATAR,TOURNAMENT_UPDATE_BACKGROUND}from\"redux-saga/actions\";import{QUERY_TOURNAMENT_INFO_SUCCESS,QUERY_TOURNAMENT_INFO_FAILED,QUERY_SPORTS_BY_TOURNAMENT_SUCCESS,QUERY_SPORTS_BY_TOURNAMENT_FAILED,QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS,QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED,FINISH_TOURNAMENT_SUCCESS,FINISH_TOURNAMENT_FAILED,START_TOURNAMENT_SUCCESS,START_TOURNAMENT_FAILED,TOURNAMENT_UPDATE_AVATAR_SUCCESS,TOURNAMENT_UPDATE_AVATAR_FAILED,TOURNAMENT_UPDATE_BACKGROUND_SUCCESS,TOURNAMENT_UPDATE_BACKGROUND_FAILED}from\"./reducers\";export var queryTournamentInfo=function queryTournamentInfo(data){return{type:QUERY_TOURNAMENT_INFO,response:{success:QUERY_TOURNAMENT_INFO_SUCCESS,failed:QUERY_TOURNAMENT_INFO_FAILED},data:{path:data.path,param:data.param,data:data.data}};};export var querySportsByTournament=function querySportsByTournament(data){return{type:QUERY_SPORTS_BY_TOURNAMENT,response:{success:QUERY_SPORTS_BY_TOURNAMENT_SUCCESS,failed:QUERY_SPORTS_BY_TOURNAMENT_FAILED},data:{path:data.path,param:data.param,data:data.data}};};export var queryCompetitionsBySportAndTournament=function queryCompetitionsBySportAndTournament(data){return{type:QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT,response:{success:QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS,failed:QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED},data:{path:data.path,param:data.param,data:data.data}};};export var startTournament=function startTournament(data){return{type:START_TOURNAMENT,response:{success:START_TOURNAMENT_SUCCESS,failed:START_TOURNAMENT_FAILED},data:{path:data.path,param:data.param,data:data.data}};};export var finishTournament=function finishTournament(data){return{type:FINISH_TOURNAMENT,response:{success:FINISH_TOURNAMENT_SUCCESS,failed:FINISH_TOURNAMENT_FAILED},data:{path:data.path,param:data.param,data:data.data}};};export var updateAvatarTournament=function updateAvatarTournament(data){return{type:TOURNAMENT_UPDATE_AVATAR,response:{success:TOURNAMENT_UPDATE_AVATAR_SUCCESS,failed:TOURNAMENT_UPDATE_AVATAR_FAILED},data:{path:data.path,param:data.param,data:data.data}};};export var updateBackgroundTournament=function updateBackgroundTournament(data){return{type:TOURNAMENT_UPDATE_BACKGROUND,response:{success:TOURNAMENT_UPDATE_BACKGROUND_SUCCESS,failed:TOURNAMENT_UPDATE_BACKGROUND_FAILED},data:{path:data.path,param:data.param,data:data.data}};};","map":{"version":3,"sources":["E:/frontEnd/SportTournamentSupportSystemFE/src/screens/TournamentInfo/actions.ts"],"names":["QUERY_TOURNAMENT_INFO","QUERY_SPORTS_BY_TOURNAMENT","QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT","START_TOURNAMENT","FINISH_TOURNAMENT","TOURNAMENT_UPDATE_AVATAR","TOURNAMENT_UPDATE_BACKGROUND","QUERY_TOURNAMENT_INFO_SUCCESS","QUERY_TOURNAMENT_INFO_FAILED","QUERY_SPORTS_BY_TOURNAMENT_SUCCESS","QUERY_SPORTS_BY_TOURNAMENT_FAILED","QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS","QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED","FINISH_TOURNAMENT_SUCCESS","FINISH_TOURNAMENT_FAILED","START_TOURNAMENT_SUCCESS","START_TOURNAMENT_FAILED","TOURNAMENT_UPDATE_AVATAR_SUCCESS","TOURNAMENT_UPDATE_AVATAR_FAILED","TOURNAMENT_UPDATE_BACKGROUND_SUCCESS","TOURNAMENT_UPDATE_BACKGROUND_FAILED","queryTournamentInfo","data","type","response","success","failed","path","param","querySportsByTournament","queryCompetitionsBySportAndTournament","startTournament","finishTournament","updateAvatarTournament","updateBackgroundTournament"],"mappings":"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","sourcesContent":["import { IBigRequest } from \"interfaces/common\";\r\nimport { QUERY_TOURNAMENT_INFO, QUERY_SPORTS_BY_TOURNAMENT, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT, START_TOURNAMENT, FINISH_TOURNAMENT, TOURNAMENT_UPDATE_AVATAR, TOURNAMENT_UPDATE_BACKGROUND } from \"redux-saga/actions\";\r\nimport { QUERY_TOURNAMENT_INFO_SUCCESS, QUERY_TOURNAMENT_INFO_FAILED, QUERY_SPORTS_BY_TOURNAMENT_SUCCESS, QUERY_SPORTS_BY_TOURNAMENT_FAILED, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED, FINISH_TOURNAMENT_SUCCESS, FINISH_TOURNAMENT_FAILED, START_TOURNAMENT_SUCCESS, START_TOURNAMENT_FAILED, TOURNAMENT_UPDATE_AVATAR_SUCCESS, TOURNAMENT_UPDATE_AVATAR_FAILED, TOURNAMENT_UPDATE_BACKGROUND_SUCCESS, TOURNAMENT_UPDATE_BACKGROUND_FAILED } from \"./reducers\";\r\n\r\nexport const queryTournamentInfo = (data: IBigRequest) => ({\r\n  type: QUERY_TOURNAMENT_INFO,\r\n  response: {\r\n    success: QUERY_TOURNAMENT_INFO_SUCCESS,\r\n    failed: QUERY_TOURNAMENT_INFO_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const querySportsByTournament = (data: IBigRequest) => ({\r\n  type: QUERY_SPORTS_BY_TOURNAMENT,\r\n  response: {\r\n    success: QUERY_SPORTS_BY_TOURNAMENT_SUCCESS,\r\n    failed: QUERY_SPORTS_BY_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const queryCompetitionsBySportAndTournament = (data: IBigRequest) => ({\r\n  type: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT,\r\n  response: {\r\n    success: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS,\r\n    failed: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const startTournament = (data: IBigRequest) => ({\r\n  type: START_TOURNAMENT,\r\n  response: {\r\n    success: START_TOURNAMENT_SUCCESS,\r\n    failed: START_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const finishTournament = (data: IBigRequest) => ({\r\n  type: FINISH_TOURNAMENT,\r\n  response: {\r\n    success: FINISH_TOURNAMENT_SUCCESS,\r\n    failed: FINISH_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const updateAvatarTournament = (data: IBigRequest) => ({\r\n  type: TOURNAMENT_UPDATE_AVATAR,\r\n  response: {\r\n    success: TOURNAMENT_UPDATE_AVATAR_SUCCESS,\r\n    failed: TOURNAMENT_UPDATE_AVATAR_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const updateBackgroundTournament = (data: IBigRequest) => ({\r\n  type: TOURNAMENT_UPDATE_BACKGROUND,\r\n  response: {\r\n    success: TOURNAMENT_UPDATE_BACKGROUND_SUCCESS,\r\n    failed: TOURNAMENT_UPDATE_BACKGROUND_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}